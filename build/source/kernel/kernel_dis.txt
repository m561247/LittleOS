
C:/diy-x86os-master/start/new_start/build/source/kernel/kernel.elf:     file format elf32-i386
C:/diy-x86os-master/start/new_start/build/source/kernel/kernel.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010000

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00009eac memsz 0x00009eac flags r-x
    LOAD off    0x0000b000 vaddr 0x0001a000 paddr 0x0001a000 align 2**12
         filesz 0x00000178 memsz 0x000460c0 flags rw-
    LOAD off    0x0000c000 vaddr 0x80000000 paddr 0x000600c0 align 2**12
         filesz 0x00000387 memsz 0x00000387 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008af3  00010000  00010000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       000013ac  00018b00  00018b00  00009b00  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00000178  0001a000  0001a000  0000b000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          000450c0  0001b000  0001b000  0000b178  2**12
                  ALLOC
  4 .first_task   00000387  80000000  000600c0  0000c000  2**0
                  CONTENTS, ALLOC, LOAD, CODE
  5 .debug_line   0000501c  00000000  00000000  0000c387  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00012cb4  00000000  00000000  000113a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003224  00000000  00000000  00024057  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000340  00000000  00000000  00027280  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  000275c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00002d27  00000000  00000000  00027698  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .comment      00000011  00000000  00000000  0002a3bf  2**0
                  CONTENTS, READONLY
 12 .debug_frame  00002ba8  00000000  00000000  0002a3d0  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
00010000 l    d  .text	00000000 .text
00018b00 l    d  .rodata	00000000 .rodata
0001a000 l    d  .data	00000000 .data
0001b000 l    d  .bss	00000000 .bss
80000000 l    d  .first_task	00000000 .first_task
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 CMakeFiles/kernel.dir/init/start.S.obj
00010010 l       .text	00000000 gdt_reload
00000000 l    df *ABS*	00000000 memory.c
00010323 l     F .text	00000017 up2
0001033a l     F .text	0000000d down2
00010347 l     F .text	0000000c write_cr3
00010353 l     F .text	00000014 pde_index
00010367 l     F .text	00000027 pde_paddr
0001038e l     F .text	00000010 pte_index
0001039e l     F .text	00000027 pte_paddr
000103c5 l     F .text	0000000f get_pte_perm
000103d4 l     F .text	00000011 mmu_set_page_dir
0001b000 l     O .bss	00000028 paddr_alloc
0001c000 l     O .bss	00001000 kernel_page_dir
000103e5 l     F .text	00000013 current_page_dir
000103f8 l     F .text	00000058 addr_alloc_init
00010450 l     F .text	00000067 addr_alloc_page
000104b7 l     F .text	00000062 addr_free_page
00010519 l     F .text	00000066 show_mem_info
0001057f l     F .text	0000003c total_mem_size
00018c6c l     O .rodata	00000012 __func__.2383
0001a000 l     O .data	00000050 kernel_map.2395
00018c80 l     O .rodata	00000013 __func__.2423
00018c94 l     O .rodata	00000011 __func__.2501
00018ca8 l     O .rodata	0000000c __func__.2508
00018cb4 l     O .rodata	00000009 __func__.2516
00000000 l    df *ABS*	00000000 syscall.c
00018cc0 l     O .rodata	00000194 sys_table
00000000 l    df *ABS*	00000000 task.c
00010fc1 l     F .text	0000000c write_cr3
00010fcd l     F .text	00000007 hlt
00010fd4 l     F .text	0000000c write_tr
00010fe0 l     F .text	0000001b list_node_init
00010ffb l     F .text	0000000b list_node_next
00011006 l     F .text	0000000b list_count
00011011 l     F .text	0000000a list_first
0001101b l     F .text	00000011 mmu_set_page_dir
0001d000 l     O .bss	000005c0 task_manager
0001d5c0 l     O .bss	00001000 idle_task_stack
0001e5c0 l     O .bss	00016400 task_table
000349c0 l     O .bss	00000014 task_table_mutex
0001102c l     F .text	000001cd tss_init
00019014 l     O .rodata	0000000a __func__.3104
00019020 l     O .rodata	00000010 __func__.3130
0001151c l     F .text	0000000a idle_task_entry
00011666 l     F .text	00000045 task_next_run
00011948 l     F .text	00000069 alloc_task
000119b1 l     F .text	00000030 free_task
00011a45 l     F .text	00000062 copy_opened_files
00011c43 l     F .text	00000129 load_phdr
00019030 l     O .rodata	0000000a __func__.3242
00011d6c l     F .text	00000213 load_elf_file
00011f7f l     F .text	00000130 copy_args
0001903c l     O .rodata	0000000a __func__.3277
00000000 l    df *ABS*	00000000 cpu.c
000124ea l     F .text	00000028 lgdt
00012512 l     F .text	0000001a far_jump
000349e0 l     O .bss	00000800 gdt_table
000351e0 l     O .bss	00000014 mutex
00000000 l    df *ABS*	00000000 irq.c
00012764 l     F .text	0000001d inb
00012781 l     F .text	0000001f outb
000127a0 l     F .text	00000007 cli
000127a7 l     F .text	00000007 sti
000127ae l     F .text	00000011 read_cr2
000127bf l     F .text	00000028 lidt
000127e7 l     F .text	00000007 hlt
000127ee l     F .text	00000010 read_eflags
000127fe l     F .text	0000000b write_eflags
00035200 l     O .bss	00000400 idt_table
00012809 l     F .text	000000ff dump_core_regs
00012908 l     F .text	00000071 do_default_handler
00012d40 l     F .text	00000093 init_pic
00000000 l    df *ABS*	00000000 console.c
00013137 l     F .text	0000001d inb
00013154 l     F .text	0000001f outb
00035600 l     O .bss	00000340 console_buf
00013173 l     F .text	00000074 read_cursor_pos
000131e7 l     F .text	000000c1 update_cursor_pos
00013427 l     F .text	00000091 erase_rows
000134b8 l     F .text	00000088 scroll_up
00013540 l     F .text	00000010 move_to_col0
00013550 l     F .text	00000038 move_next_line
00013588 l     F .text	00000076 move_forward
000135fe l     F .text	00000094 show_char
00013692 l     F .text	00000078 move_backword
0001370a l     F .text	00000085 clear_display
0001378f l     F .text	00000073 move_next_tab
00013925 l     F .text	0000003a erase_backword
0001395f l     F .text	000000b8 write_normal
00013a17 l     F .text	00000029 clear_esc_param
00013a40 l     F .text	00000075 write_esc
00013ab5 l     F .text	00000099 set_font_style
000195e0 l     O .rodata	00000020 color_table.2399
00013b4e l     F .text	00000037 move_left
00013b85 l     F .text	00000049 move_right
00013bce l     F .text	00000033 move_cursor
00013c01 l     F .text	00000051 erase_in_display
00013c52 l     F .text	000000f7 write_esc_square
00000000 l    df *ABS*	00000000 dev.c
0001a050 l     O .data	00000008 dev_desc_tbl
00035940 l     O .bss	00000a00 dev_tbl
00013e46 l     F .text	0000003e is_devid_bad
00000000 l    df *ABS*	00000000 disk.c
00014137 l     F .text	0000001d inb
00014154 l     F .text	0000001f inw
00014173 l     F .text	0000001f outb
00014192 l     F .text	00000021 outw
00036340 l     O .bss	00000250 disk_buf
00036590 l     O .bss	00000014 mutex
000365a4 l     O .bss	00000010 op_sem
000365b4 l     O .bss	00000004 task_on_op
000141b3 l     F .text	00000130 ata_send_cmd
000142e3 l     F .text	00000050 ata_read_data
00014333 l     F .text	00000050 ata_write_data
00014383 l     F .text	0000004b ata_wait_data
000143ce l     F .text	000000fe print_disk_info
000144cc l     F .text	00000119 detect_part_info
000145e5 l     F .text	00000127 identify_disk
00000000 l    df *ABS*	00000000 kbd.c
00014bc1 l     F .text	0000001d inb
00014bde l     F .text	0000001f outb
000365b8 l     O .bss	00000004 kbd_state
000197c0 l     O .rodata	00000200 map_table
00014bfd l     F .text	00000015 get_key
00014c12 l     F .text	0000001a is_make_code
00014cd6 l     F .text	00000045 update_led_status
00014d1b l     F .text	0000003c do_fx_key
00014d57 l     F .text	000001d0 do_normal_key
00014f27 l     F .text	0000008a do_e0_key
000365bc l     O .bss	00000004 recv_state.2129
000365c0 l     O .bss	00000004 inited.2139
00000000 l    df *ABS*	00000000 time.c
000150b3 l     F .text	0000001f outb
000365c4 l     O .bss	00000004 sys_tick
000150fa l     F .text	00000060 init_pit
00000000 l    df *ABS*	00000000 tty.c
000365e0 l     O .bss	000022a0 tty_devs
00038880 l     O .bss	00000004 curr_tty
000152b2 l     F .text	0000004f get_tty
00000000 l    df *ABS*	00000000 devfs.c
0001a0e0 l     O .data	0000000c devfs_type_list
00000000 l    df *ABS*	00000000 fatfs.c
00015939 l     F .text	00000017 up2
00015950 l     F .text	00000059 bread_sector
000159a9 l     F .text	0000003e bwrite_secotr
00015d84 l     F .text	00000087 to_sfn
00015fa7 l     F .text	00000080 read_dir_entry
00016027 l     F .text	000000aa write_dir_entry
000160d1 l     F .text	00000179 expand_file
0001624a l     F .text	000000c2 move_file_pos
00016587 l     F .text	00000065 read_from_diritem
00000000 l    df *ABS*	00000000 file.c
000388a0 l     O .bss	00024000 file_table
0005c8a0 l     O .bss	00000014 file_alloc_mutex
00000000 l    df *ABS*	00000000 fs.c
00016fe2 l     F .text	0000000b list_node_next
00016fed l     F .text	0000000a list_first
0005c8c0 l     O .bss	0000000c mounted_list
0005c8cc l     O .bss	0000000c free_list
0005c8e0 l     O .bss	000017c0 fs_tbl
0005e0a0 l     O .bss	00000004 root_fs
00016ff7 l     F .text	0000001d is_fd_bad
00017014 l     F .text	00000026 get_fs_op
0001703a l     F .text	000001c7 mount
00017201 l     F .text	00000060 mount_list_init
00019d60 l     O .rodata	00000008 __func__.3078
000173ee l     F .text	0000002b fs_protect
00017419 l     F .text	0000002b fs_unprotect
00019d68 l     O .rodata	0000000a __func__.3169
00000000 l    df *ABS*	00000000 init.c
0005e0a4 l     O .bss	00000004 init_boot_info
00019e20 l     O .rodata	00000013 __func__.3085
00000000 l    df *ABS*	00000000 mutex.c
00017d26 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 sem.c
00017eb5 l     F .text	0000000b list_count
00000000 l    df *ABS*	00000000 bitmap.c
00000000 l    df *ABS*	00000000 klib.c
00018243 l     F .text	00000007 hlt
0001a174 l     O .data	00000004 num2ch.1951
00000000 l    df *ABS*	00000000 list.c
000187ff l     F .text	00000013 list_is_empty
00000000 l    df *ABS*	00000000 log.c
0005e0a8 l     O .bss	00000014 mutex
0005e0bc l     O .bss	00000004 log_dev_id
00000000 l    df *ABS*	00000000 first_task.c
00000000 l    df *ABS*	00000000 lib_syscall.c
800000cd l     F .first_task	0000004c sys_call
00015f63 g     F .text	00000044 diritem_get_type
0001813b g     F .text	0000003a bitmap_get_bit
0001842d g     F .text	0000004f kernel_memcpy
00017906 g     F .text	000000fc sys_close
00011709 g     F .text	0000000a task_current
00017346 g     F .text	00000050 path_begin_with
800001d1 g     F .first_task	0000001b yield
00013103 g     F .text	0000000b irq_enable_global
00018896 g     F .text	00000064 list_insert_last
00011713 g     F .text	00000032 task_file
000102a5 g       .text	00000000 exception_handler_kbd
00010e06 g     F .text	0000010c sys_sbrk
000117bf g     F .text	00000061 sys_yield
000119e1 g     F .text	00000064 sys_msleep
00012aad g     F .text	0000001c do_handler_segment_not_present
00011607 g     F .text	00000034 task_set_ready
00015c57 g     F .text	0000012d cluster_alloc_free
00018175 g     F .text	0000001b bitmap_is_set
0001847c g     F .text	00000041 kernel_memset
0001401c g     F .text	0000004c dev_write
00017871 g     F .text	00000095 sys_lseek
00015073 g     F .text	00000040 kbd_init
00015ace g     F .text	0000012f cluster_set_next
00010267 g       .text	00000000 exception_handler_virtual_exception
00014b83 g     F .text	00000006 disk_close
00010f2c g     F .text	00000095 do_handler_syscall
0001824a g     F .text	0000002d strings_count
00012746 g     F .text	0000001e cpu_init
000189f7 g     F .text	0000002f log_init
00016cc3 g     F .text	000000f4 fatfs_readdir
00011aa7 g     F .text	0000019c sys_fork
00017cc9 g     F .text	0000005d init_main
0001020c g       .text	00000000 exception_handler_alignment_check
00014b79 g     F .text	0000000a disk_control
000125f9 g     F .text	00000039 gdt_free_sel
00010f12 g     F .text	0000001a sys_print_msg
0001a140 g     O .data	00000034 fatfs_op
000182bd g     F .text	00000047 kernel_strcpy
0001a000 g       .data	00000000 s_data
800001a4 g     F .first_task	0000002d execve
80000147 g     F .first_task	0000001b getpid
00012fe6 g     F .text	0000008b irq_enable
00010028 g       .text	00000000 exception_handler_unknown
00015ed0 g     F .text	00000093 diritem_get_name
00015e0b g     F .text	00000037 diritem_name_match
000100a4 g       .text	00000000 exception_handler_breakpoint
00012a05 g     F .text	0000001c do_handler_overflow
00012cd0 g     F .text	0000001c do_handler_alignment_check
0001066b g     F .text	00000089 memory_create_map
000176e8 g     F .text	000000c5 sys_read
00017396 g     F .text	00000058 path_next_child
00014c8d g     F .text	00000035 kbd_wait_recv_ready
0001691f g     F .text	0000021e fatfs_write
00013378 g     F .text	000000af console_select
000101b3 g       .text	00000000 exception_handler_general_protection
00012ae5 g     F .text	000000d8 do_handler_general_protection
00013820 g     F .text	0000001e restore_cursor
00017fd5 g     F .text	00000029 sem_count
80000010 g     F .first_task	000000bd first_task_main
00012995 g     F .text	0000001c do_handler_divider
00018067 g     F .text	000000d4 bitmap_set_bit
00012a75 g     F .text	0000001c do_handler_double_fault
00016db7 g     F .text	0000000a fatfs_closedir
00012bbd g     F .text	000000f7 do_handler_page_fault
0001630c g     F .text	0000023f fatfs_mount
80000324 g     F .first_task	00000021 isatty
0001677a g     F .text	000001a5 fatfs_read
0001013f g       .text	00000000 exception_handler_double_fault
00012dd3 g     F .text	0000002b pic_send_eoi
00011512 g     F .text	0000000a task_first_task
00010000 g       .text	00000000 s_text
000107af g     F .text	00000085 memory_create_uvm
00017ee3 g     F .text	0000006e sem_wait
00010c4a g     F .text	00000025 memory_alloc_page_for
000150d2 g     F .text	00000028 do_handler_timer
00010196 g       .text	00000000 exception_handler_stack_segment_fault
80000000 g       .first_task	00000000 first_task_entry
00017a4d g     F .text	00000093 sys_fstat
00013fd0 g     F .text	0000004c dev_read
00016bc7 g     F .text	000000df fatfs_seek
00016b3d g     F .text	0000008a fatfs_close
00012d24 g     F .text	0000001c do_handler_virtual_exception
0001590f g     F .text	0000000a devfs_stat
000100c3 g       .text	00000000 exception_handler_overflow
000102e3 g       .text	00000000 simple_switch
000102c4 g       .text	00000000 exception_handler_ide_primary
0001654b g     F .text	0000003c fatfs_unmount
800002d0 g     F .first_task	0000002d lseek
0005e0c0 g     O .bss	00002000 stack
0001470c g     F .text	000000f8 disk_init
00017261 g     F .text	0000008a fs_init
00016f7a g     F .text	00000038 file_inc_ref
00010c89 g     F .text	00000099 memory_free_page
000600c0 g       *ABS*	00000000 s_first_task
00011798 g     F .text	00000027 task_remove_fd
00015608 g     F .text	000000ba tty_control
0001383e g     F .text	000000e7 console_init
000154e7 g     F .text	00000121 tty_read
00011372 g     F .text	0000008f task_uninit
00010b61 g     F .text	000000e9 memory_alloc_for_page_dir
00015919 g     F .text	00000020 devfs_ioctl
000151a9 g     F .text	0000007f tty_fifo_get
000100e2 g       .text	00000000 exception_handler_bound_range
000156c8 g     F .text	0000006d tty_in
00015a10 g     F .text	000000be cluster_get_next
00017f51 g     F .text	00000084 sem_notify
00010ade g     F .text	00000083 memory_copy_uvm_data
00014068 g     F .text	0000004c dev_control
00014fb1 g     F .text	000000c2 do_handler_kbd
00012a3d g     F .text	0000001c do_handler_invalid_opcode
0001015c g       .text	00000000 exception_handler_invalid_tss
00017b33 g     F .text	00000053 sys_readdir
00012cb4 g     F .text	0000001c do_handler_fpu_error
00011423 g     F .text	000000ef task_first_init
00012cec g     F .text	0000001c do_handler_machine_check
80000282 g     F .first_task	0000002d write
00017444 g     F .text	00000182 sys_open
000129b1 g     F .text	0000001c do_handler_Debug
800002fd g     F .first_task	00000027 fstat
00017a02 g     F .text	0000004b sys_isatty
00018837 g     F .text	0000005f list_insert_first
00013e84 g     F .text	0000014c dev_open
000172eb g     F .text	0000005b path_to_num
000116e7 g     F .text	00000022 task_set_wakeup
000129cd g     F .text	0000001c do_handler_NMI
00010047 g       .text	00000000 exception_handler_divider
00015172 g     F .text	00000037 tty_fifo_init
0001a060 g     O .data	00000038 dev_disk_desc
00018304 g     F .text	00000070 kernel_strncpy
000130f8 g     F .text	0000000b irq_disable_global
000177ad g     F .text	000000c4 sys_write
800001ec g     F .first_task	00000021 wait
00060447 g       *ABS*	00000000 mem_free_start
00014c61 g     F .text	0000002c kbd_write
00017c26 g     F .text	0000003d kernel_init
00017ec0 g     F .text	00000023 sem_init
00010000 g       .text	00000000 _start
0001867e g     F .text	0000014b kernel_vsprintf
00018277 g     F .text	00000046 get_file_name
00010120 g       .text	00000000 exception_handler_device_unavailable
00010101 g       .text	00000000 exception_handler_invalid_opcode
000140b4 g     F .text	00000083 dev_close
00013802 g     F .text	0000001e save_cursor
000600c0 g       .bss	00000000 e_data
80000255 g     F .first_task	0000002d read
00017d5f g     F .text	00000097 mutex_lock
00017b86 g     F .text	00000050 sys_closedir
00016dc1 g     F .text	000000ec fatfs_unlink
00011745 g     F .text	00000053 task_alloc_fd
00015905 g     F .text	0000000a devfs_seek
00010229 g       .text	00000000 exception_handler_machine_check
000153fa g     F .text	000000ed tty_write
00012a91 g     F .text	0000001c do_handler_invalid_tss
00000000 g       *ABS*	00000000 kernel_base
00015228 g     F .text	0000008a tty_fifo_put
00060447 g       *ABS*	00000000 e_first_task
000116ab g     F .text	0000003c task_set_sleep
000175c6 g     F .text	0000009e sys_dup
000187c9 g     F .text	00000036 panic
00010286 g       .text	00000000 exception_handler_timer
00012fac g     F .text	0000003a irq_install
000126ab g     F .text	00000088 init_gdt
0001575e g     F .text	00000017 devfs_mount
00015301 g     F .text	000000f9 tty_open
80000189 g     F .first_task	0000001b fork
0001310e g     F .text	00000018 irq_enter_protection
00017d31 g     F .text	0000002e mutex_init
00013071 g     F .text	00000087 irq_disable
80000345 g     F .first_task	00000021 sbrk
0001a100 g     O .data	00000034 devfs_op
0001577b g     F .text	00000127 devfs_open
00010248 g       .text	00000000 exception_handler_smd_exception
00017664 g     F .text	00000084 sys_ioctl
00010834 g     F .text	0000010f memory_destroy_uvm
00017ffe g     F .text	00000016 bitmap_byte_count
00012a59 g     F .text	0000001c do_handler_device_unavailable
00017bd6 g     F .text	00000050 sys_unlink
000159e7 g     F .text	00000029 cluster_is_valid
00016cb0 g     F .text	00000013 fatfs_opendir
00011820 g     F .text	0000003c task_dispatch
00010943 g     F .text	00000155 memory_copy_uvm
000156c2 g     F .text	00000006 tty_close
000158c6 g     F .text	00000024 devfs_write
00017c63 g     F .text	00000066 move_to_first_task
00012733 g     F .text	00000013 switch_to_tss
000158ea g     F .text	0000001b devfs_close
00013d49 g     F .text	000000f7 console_write
00014c2c g     F .text	00000035 kbd_wait_send_ready
80000366 g     F .first_task	00000021 dup
000184bd g     F .text	0000005e kernel_memcmp
000106f4 g     F .text	000000bb create_kernel_table
00018812 g     F .text	00000025 list_init
00012d08 g     F .text	0000001c do_handler_smd_exception
000101d0 g       .text	00000000 exception_handler_page_fault
0001163b g     F .text	0000002b task_set_block
00012979 g     F .text	0000001c do_handler_unknown
00010c6f g     F .text	0000001a memory_alloc_page
000101ed g       .text	00000000 exception_handler_fpu_error
00011401 g     F .text	00000022 task_switch_from_to
00012dfe g     F .text	000001ae irq_init
00017df6 g     F .text	000000bf mutex_unlock
00016fb2 g     F .text	00000030 file_table_init
00013126 g     F .text	00000011 irq_leave_protection
00016f38 g     F .text	00000042 file_free
00014cc2 g     F .text	00000014 kbd_read
00015e42 g     F .text	0000008e diritem_init
80000162 g     F .first_task	00000027 print_msg
00018374 g     F .text	0000003b kernel_strlen
0001252c g     F .text	00000086 segment_desc_set
00012a21 g     F .text	0000001c do_handler_bound_range
000102f8 g       .text	00000000 exception_handler_syscall
00014804 g     F .text	000000f5 disk_open
000165ec g     F .text	0000018e fatfs_open
000188fa g     F .text	00000078 list_remove_first
00019eac g       .rodata	00000000 e_text
000183af g     F .text	0000007e kernel_strncmp
00017ae0 g     F .text	00000053 sys_opendir
00018014 g     F .text	00000053 bitmap_init
00010179 g       .text	00000000 exception_handler_segment_not_present
000132a8 g     F .text	000000d0 console_set_cursor
00010085 g       .text	00000000 exception_handler_NMI
00016ca6 g     F .text	0000000a fatfs_stat
00018190 g     F .text	000000b3 bitmap_alloc_nbits
00016ead g     F .text	0000008b file_alloc
00011526 g     F .text	000000e1 task_manager_init
00011345 g     F .text	0000002d task_start
00010066 g       .text	00000000 exception_handler_Debug
0001185c g     F .text	000000ec task_time_tick
00010d22 g     F .text	000000e4 memory_init
000120af g     F .text	000001bd sys_execve
00014a39 g     F .text	00000140 disk_write
00012282 g     F .text	00000115 sys_wait
00012397 g     F .text	00000153 sys_exit
00015735 g     F .text	00000029 tty_select
00013e40 g     F .text	00000006 console_close
00010a98 g     F .text	00000046 memory_get_paddr
00012ac9 g     F .text	0000001c do_handler_stack_segment_fault
000129e9 g     F .text	0000001c do_handler_breakpoint
00015775 g     F .text	00000006 devfs_unmount
8000020d g     F .first_task	00000021 _exit
000158a2 g     F .text	00000024 devfs_read
00018a26 g     F .text	000000cd log_printf
000111f9 g     F .text	0000014c task_init
000148f9 g     F .text	00000140 disk_read
8000022e g     F .first_task	00000027 open
00015bfd g     F .text	0000005a cluster_free_chain
0001865a g     F .text	00000024 kernel_sprintf
0001226c g     F .text	00000016 sys_getpid
00012632 g     F .text	00000079 gdt_alloc_desc
0001851b g     F .text	0000013f kernel_itoa
00018972 g     F .text	00000085 list_remove
000125b2 g     F .text	00000047 gate_desc_set
80000119 g     F .first_task	0000002e msleep
800002af g     F .first_task	00000021 close
00014b89 g     F .text	00000038 do_handler_ide_primary
000105bb g     F .text	000000b0 find_pte
0001515a g     F .text	00000018 time_init
0001a0a0 g     O .data	00000038 dev_tty_desc



Disassembly of section .text:

00010000 <_start>:
    # 二方法
    # mov 4(%esp), %eax
    # push %eax

    # 三方法
    push 4(%esp)
   10000:	ff 74 24 04          	pushl  0x4(%esp)

    # kernel_init(boot_info)
    call kernel_init
   10004:	e8 1d 7c 00 00       	call   17c26 <kernel_init>

	jmp $KERNEL_SELECTOR_CS, $gdt_reload
   10009:	ea 10 00 01 00 08 00 	ljmp   $0x8,$0x10010

00010010 <gdt_reload>:

gdt_reload:
	mov $KERNEL_SELECTOR_DS, %ax		
   10010:	66 b8 10 00          	mov    $0x10,%ax
	mov %ax, %ds
   10014:	8e d8                	mov    %eax,%ds
    mov %ax, %ss
   10016:	8e d0                	mov    %eax,%ss
    mov %ax, %es
   10018:	8e c0                	mov    %eax,%es
    mov %ax, %fs
   1001a:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
   1001c:	8e e8                	mov    %eax,%gs

	mov $(stack + KERNEL_STACK_SIZE), %esp
   1001e:	bc c0 00 06 00       	mov    $0x600c0,%esp

	jmp init_main
   10023:	e9 a1 7c 00 00       	jmp    17cc9 <init_main>

00010028 <exception_handler_unknown>:

		add $(2*4), %esp
		iret
.endm

exception_handler unknown, -1, 0
   10028:	6a 00                	push   $0x0
   1002a:	6a ff                	push   $0xffffffff
   1002c:	60                   	pusha  
   1002d:	1e                   	push   %ds
   1002e:	06                   	push   %es
   1002f:	0f a0                	push   %fs
   10031:	0f a8                	push   %gs
   10033:	54                   	push   %esp
   10034:	e8 40 29 00 00       	call   12979 <do_handler_unknown>
   10039:	83 c4 04             	add    $0x4,%esp
   1003c:	0f a9                	pop    %gs
   1003e:	0f a1                	pop    %fs
   10040:	07                   	pop    %es
   10041:	1f                   	pop    %ds
   10042:	61                   	popa   
   10043:	83 c4 08             	add    $0x8,%esp
   10046:	cf                   	iret   

00010047 <exception_handler_divider>:
exception_handler divider, 0, 0
   10047:	6a 00                	push   $0x0
   10049:	6a 00                	push   $0x0
   1004b:	60                   	pusha  
   1004c:	1e                   	push   %ds
   1004d:	06                   	push   %es
   1004e:	0f a0                	push   %fs
   10050:	0f a8                	push   %gs
   10052:	54                   	push   %esp
   10053:	e8 3d 29 00 00       	call   12995 <do_handler_divider>
   10058:	83 c4 04             	add    $0x4,%esp
   1005b:	0f a9                	pop    %gs
   1005d:	0f a1                	pop    %fs
   1005f:	07                   	pop    %es
   10060:	1f                   	pop    %ds
   10061:	61                   	popa   
   10062:	83 c4 08             	add    $0x8,%esp
   10065:	cf                   	iret   

00010066 <exception_handler_Debug>:
exception_handler Debug, 1, 0
   10066:	6a 00                	push   $0x0
   10068:	6a 01                	push   $0x1
   1006a:	60                   	pusha  
   1006b:	1e                   	push   %ds
   1006c:	06                   	push   %es
   1006d:	0f a0                	push   %fs
   1006f:	0f a8                	push   %gs
   10071:	54                   	push   %esp
   10072:	e8 3a 29 00 00       	call   129b1 <do_handler_Debug>
   10077:	83 c4 04             	add    $0x4,%esp
   1007a:	0f a9                	pop    %gs
   1007c:	0f a1                	pop    %fs
   1007e:	07                   	pop    %es
   1007f:	1f                   	pop    %ds
   10080:	61                   	popa   
   10081:	83 c4 08             	add    $0x8,%esp
   10084:	cf                   	iret   

00010085 <exception_handler_NMI>:
exception_handler NMI, 2, 0
   10085:	6a 00                	push   $0x0
   10087:	6a 02                	push   $0x2
   10089:	60                   	pusha  
   1008a:	1e                   	push   %ds
   1008b:	06                   	push   %es
   1008c:	0f a0                	push   %fs
   1008e:	0f a8                	push   %gs
   10090:	54                   	push   %esp
   10091:	e8 37 29 00 00       	call   129cd <do_handler_NMI>
   10096:	83 c4 04             	add    $0x4,%esp
   10099:	0f a9                	pop    %gs
   1009b:	0f a1                	pop    %fs
   1009d:	07                   	pop    %es
   1009e:	1f                   	pop    %ds
   1009f:	61                   	popa   
   100a0:	83 c4 08             	add    $0x8,%esp
   100a3:	cf                   	iret   

000100a4 <exception_handler_breakpoint>:
exception_handler breakpoint, 3, 0
   100a4:	6a 00                	push   $0x0
   100a6:	6a 03                	push   $0x3
   100a8:	60                   	pusha  
   100a9:	1e                   	push   %ds
   100aa:	06                   	push   %es
   100ab:	0f a0                	push   %fs
   100ad:	0f a8                	push   %gs
   100af:	54                   	push   %esp
   100b0:	e8 34 29 00 00       	call   129e9 <do_handler_breakpoint>
   100b5:	83 c4 04             	add    $0x4,%esp
   100b8:	0f a9                	pop    %gs
   100ba:	0f a1                	pop    %fs
   100bc:	07                   	pop    %es
   100bd:	1f                   	pop    %ds
   100be:	61                   	popa   
   100bf:	83 c4 08             	add    $0x8,%esp
   100c2:	cf                   	iret   

000100c3 <exception_handler_overflow>:
exception_handler overflow, 4, 0
   100c3:	6a 00                	push   $0x0
   100c5:	6a 04                	push   $0x4
   100c7:	60                   	pusha  
   100c8:	1e                   	push   %ds
   100c9:	06                   	push   %es
   100ca:	0f a0                	push   %fs
   100cc:	0f a8                	push   %gs
   100ce:	54                   	push   %esp
   100cf:	e8 31 29 00 00       	call   12a05 <do_handler_overflow>
   100d4:	83 c4 04             	add    $0x4,%esp
   100d7:	0f a9                	pop    %gs
   100d9:	0f a1                	pop    %fs
   100db:	07                   	pop    %es
   100dc:	1f                   	pop    %ds
   100dd:	61                   	popa   
   100de:	83 c4 08             	add    $0x8,%esp
   100e1:	cf                   	iret   

000100e2 <exception_handler_bound_range>:
exception_handler bound_range, 5, 0
   100e2:	6a 00                	push   $0x0
   100e4:	6a 05                	push   $0x5
   100e6:	60                   	pusha  
   100e7:	1e                   	push   %ds
   100e8:	06                   	push   %es
   100e9:	0f a0                	push   %fs
   100eb:	0f a8                	push   %gs
   100ed:	54                   	push   %esp
   100ee:	e8 2e 29 00 00       	call   12a21 <do_handler_bound_range>
   100f3:	83 c4 04             	add    $0x4,%esp
   100f6:	0f a9                	pop    %gs
   100f8:	0f a1                	pop    %fs
   100fa:	07                   	pop    %es
   100fb:	1f                   	pop    %ds
   100fc:	61                   	popa   
   100fd:	83 c4 08             	add    $0x8,%esp
   10100:	cf                   	iret   

00010101 <exception_handler_invalid_opcode>:
exception_handler invalid_opcode, 6, 0
   10101:	6a 00                	push   $0x0
   10103:	6a 06                	push   $0x6
   10105:	60                   	pusha  
   10106:	1e                   	push   %ds
   10107:	06                   	push   %es
   10108:	0f a0                	push   %fs
   1010a:	0f a8                	push   %gs
   1010c:	54                   	push   %esp
   1010d:	e8 2b 29 00 00       	call   12a3d <do_handler_invalid_opcode>
   10112:	83 c4 04             	add    $0x4,%esp
   10115:	0f a9                	pop    %gs
   10117:	0f a1                	pop    %fs
   10119:	07                   	pop    %es
   1011a:	1f                   	pop    %ds
   1011b:	61                   	popa   
   1011c:	83 c4 08             	add    $0x8,%esp
   1011f:	cf                   	iret   

00010120 <exception_handler_device_unavailable>:
exception_handler device_unavailable, 7, 0
   10120:	6a 00                	push   $0x0
   10122:	6a 07                	push   $0x7
   10124:	60                   	pusha  
   10125:	1e                   	push   %ds
   10126:	06                   	push   %es
   10127:	0f a0                	push   %fs
   10129:	0f a8                	push   %gs
   1012b:	54                   	push   %esp
   1012c:	e8 28 29 00 00       	call   12a59 <do_handler_device_unavailable>
   10131:	83 c4 04             	add    $0x4,%esp
   10134:	0f a9                	pop    %gs
   10136:	0f a1                	pop    %fs
   10138:	07                   	pop    %es
   10139:	1f                   	pop    %ds
   1013a:	61                   	popa   
   1013b:	83 c4 08             	add    $0x8,%esp
   1013e:	cf                   	iret   

0001013f <exception_handler_double_fault>:
exception_handler double_fault, 8, 1
   1013f:	6a 08                	push   $0x8
   10141:	60                   	pusha  
   10142:	1e                   	push   %ds
   10143:	06                   	push   %es
   10144:	0f a0                	push   %fs
   10146:	0f a8                	push   %gs
   10148:	54                   	push   %esp
   10149:	e8 27 29 00 00       	call   12a75 <do_handler_double_fault>
   1014e:	83 c4 04             	add    $0x4,%esp
   10151:	0f a9                	pop    %gs
   10153:	0f a1                	pop    %fs
   10155:	07                   	pop    %es
   10156:	1f                   	pop    %ds
   10157:	61                   	popa   
   10158:	83 c4 08             	add    $0x8,%esp
   1015b:	cf                   	iret   

0001015c <exception_handler_invalid_tss>:
exception_handler invalid_tss, 10, 1
   1015c:	6a 0a                	push   $0xa
   1015e:	60                   	pusha  
   1015f:	1e                   	push   %ds
   10160:	06                   	push   %es
   10161:	0f a0                	push   %fs
   10163:	0f a8                	push   %gs
   10165:	54                   	push   %esp
   10166:	e8 26 29 00 00       	call   12a91 <do_handler_invalid_tss>
   1016b:	83 c4 04             	add    $0x4,%esp
   1016e:	0f a9                	pop    %gs
   10170:	0f a1                	pop    %fs
   10172:	07                   	pop    %es
   10173:	1f                   	pop    %ds
   10174:	61                   	popa   
   10175:	83 c4 08             	add    $0x8,%esp
   10178:	cf                   	iret   

00010179 <exception_handler_segment_not_present>:
exception_handler segment_not_present, 11, 1
   10179:	6a 0b                	push   $0xb
   1017b:	60                   	pusha  
   1017c:	1e                   	push   %ds
   1017d:	06                   	push   %es
   1017e:	0f a0                	push   %fs
   10180:	0f a8                	push   %gs
   10182:	54                   	push   %esp
   10183:	e8 25 29 00 00       	call   12aad <do_handler_segment_not_present>
   10188:	83 c4 04             	add    $0x4,%esp
   1018b:	0f a9                	pop    %gs
   1018d:	0f a1                	pop    %fs
   1018f:	07                   	pop    %es
   10190:	1f                   	pop    %ds
   10191:	61                   	popa   
   10192:	83 c4 08             	add    $0x8,%esp
   10195:	cf                   	iret   

00010196 <exception_handler_stack_segment_fault>:
exception_handler stack_segment_fault, 12, 1
   10196:	6a 0c                	push   $0xc
   10198:	60                   	pusha  
   10199:	1e                   	push   %ds
   1019a:	06                   	push   %es
   1019b:	0f a0                	push   %fs
   1019d:	0f a8                	push   %gs
   1019f:	54                   	push   %esp
   101a0:	e8 24 29 00 00       	call   12ac9 <do_handler_stack_segment_fault>
   101a5:	83 c4 04             	add    $0x4,%esp
   101a8:	0f a9                	pop    %gs
   101aa:	0f a1                	pop    %fs
   101ac:	07                   	pop    %es
   101ad:	1f                   	pop    %ds
   101ae:	61                   	popa   
   101af:	83 c4 08             	add    $0x8,%esp
   101b2:	cf                   	iret   

000101b3 <exception_handler_general_protection>:
exception_handler general_protection, 13, 1
   101b3:	6a 0d                	push   $0xd
   101b5:	60                   	pusha  
   101b6:	1e                   	push   %ds
   101b7:	06                   	push   %es
   101b8:	0f a0                	push   %fs
   101ba:	0f a8                	push   %gs
   101bc:	54                   	push   %esp
   101bd:	e8 23 29 00 00       	call   12ae5 <do_handler_general_protection>
   101c2:	83 c4 04             	add    $0x4,%esp
   101c5:	0f a9                	pop    %gs
   101c7:	0f a1                	pop    %fs
   101c9:	07                   	pop    %es
   101ca:	1f                   	pop    %ds
   101cb:	61                   	popa   
   101cc:	83 c4 08             	add    $0x8,%esp
   101cf:	cf                   	iret   

000101d0 <exception_handler_page_fault>:
exception_handler page_fault, 14, 1
   101d0:	6a 0e                	push   $0xe
   101d2:	60                   	pusha  
   101d3:	1e                   	push   %ds
   101d4:	06                   	push   %es
   101d5:	0f a0                	push   %fs
   101d7:	0f a8                	push   %gs
   101d9:	54                   	push   %esp
   101da:	e8 de 29 00 00       	call   12bbd <do_handler_page_fault>
   101df:	83 c4 04             	add    $0x4,%esp
   101e2:	0f a9                	pop    %gs
   101e4:	0f a1                	pop    %fs
   101e6:	07                   	pop    %es
   101e7:	1f                   	pop    %ds
   101e8:	61                   	popa   
   101e9:	83 c4 08             	add    $0x8,%esp
   101ec:	cf                   	iret   

000101ed <exception_handler_fpu_error>:
exception_handler fpu_error, 16, 0
   101ed:	6a 00                	push   $0x0
   101ef:	6a 10                	push   $0x10
   101f1:	60                   	pusha  
   101f2:	1e                   	push   %ds
   101f3:	06                   	push   %es
   101f4:	0f a0                	push   %fs
   101f6:	0f a8                	push   %gs
   101f8:	54                   	push   %esp
   101f9:	e8 b6 2a 00 00       	call   12cb4 <do_handler_fpu_error>
   101fe:	83 c4 04             	add    $0x4,%esp
   10201:	0f a9                	pop    %gs
   10203:	0f a1                	pop    %fs
   10205:	07                   	pop    %es
   10206:	1f                   	pop    %ds
   10207:	61                   	popa   
   10208:	83 c4 08             	add    $0x8,%esp
   1020b:	cf                   	iret   

0001020c <exception_handler_alignment_check>:
exception_handler alignment_check, 17, 1
   1020c:	6a 11                	push   $0x11
   1020e:	60                   	pusha  
   1020f:	1e                   	push   %ds
   10210:	06                   	push   %es
   10211:	0f a0                	push   %fs
   10213:	0f a8                	push   %gs
   10215:	54                   	push   %esp
   10216:	e8 b5 2a 00 00       	call   12cd0 <do_handler_alignment_check>
   1021b:	83 c4 04             	add    $0x4,%esp
   1021e:	0f a9                	pop    %gs
   10220:	0f a1                	pop    %fs
   10222:	07                   	pop    %es
   10223:	1f                   	pop    %ds
   10224:	61                   	popa   
   10225:	83 c4 08             	add    $0x8,%esp
   10228:	cf                   	iret   

00010229 <exception_handler_machine_check>:
exception_handler machine_check, 18, 0
   10229:	6a 00                	push   $0x0
   1022b:	6a 12                	push   $0x12
   1022d:	60                   	pusha  
   1022e:	1e                   	push   %ds
   1022f:	06                   	push   %es
   10230:	0f a0                	push   %fs
   10232:	0f a8                	push   %gs
   10234:	54                   	push   %esp
   10235:	e8 b2 2a 00 00       	call   12cec <do_handler_machine_check>
   1023a:	83 c4 04             	add    $0x4,%esp
   1023d:	0f a9                	pop    %gs
   1023f:	0f a1                	pop    %fs
   10241:	07                   	pop    %es
   10242:	1f                   	pop    %ds
   10243:	61                   	popa   
   10244:	83 c4 08             	add    $0x8,%esp
   10247:	cf                   	iret   

00010248 <exception_handler_smd_exception>:
exception_handler smd_exception, 19, 0
   10248:	6a 00                	push   $0x0
   1024a:	6a 13                	push   $0x13
   1024c:	60                   	pusha  
   1024d:	1e                   	push   %ds
   1024e:	06                   	push   %es
   1024f:	0f a0                	push   %fs
   10251:	0f a8                	push   %gs
   10253:	54                   	push   %esp
   10254:	e8 af 2a 00 00       	call   12d08 <do_handler_smd_exception>
   10259:	83 c4 04             	add    $0x4,%esp
   1025c:	0f a9                	pop    %gs
   1025e:	0f a1                	pop    %fs
   10260:	07                   	pop    %es
   10261:	1f                   	pop    %ds
   10262:	61                   	popa   
   10263:	83 c4 08             	add    $0x8,%esp
   10266:	cf                   	iret   

00010267 <exception_handler_virtual_exception>:
exception_handler virtual_exception, 20, 0
   10267:	6a 00                	push   $0x0
   10269:	6a 14                	push   $0x14
   1026b:	60                   	pusha  
   1026c:	1e                   	push   %ds
   1026d:	06                   	push   %es
   1026e:	0f a0                	push   %fs
   10270:	0f a8                	push   %gs
   10272:	54                   	push   %esp
   10273:	e8 ac 2a 00 00       	call   12d24 <do_handler_virtual_exception>
   10278:	83 c4 04             	add    $0x4,%esp
   1027b:	0f a9                	pop    %gs
   1027d:	0f a1                	pop    %fs
   1027f:	07                   	pop    %es
   10280:	1f                   	pop    %ds
   10281:	61                   	popa   
   10282:	83 c4 08             	add    $0x8,%esp
   10285:	cf                   	iret   

00010286 <exception_handler_timer>:

exception_handler timer, 0x20, 0
   10286:	6a 00                	push   $0x0
   10288:	6a 20                	push   $0x20
   1028a:	60                   	pusha  
   1028b:	1e                   	push   %ds
   1028c:	06                   	push   %es
   1028d:	0f a0                	push   %fs
   1028f:	0f a8                	push   %gs
   10291:	54                   	push   %esp
   10292:	e8 3b 4e 00 00       	call   150d2 <do_handler_timer>
   10297:	83 c4 04             	add    $0x4,%esp
   1029a:	0f a9                	pop    %gs
   1029c:	0f a1                	pop    %fs
   1029e:	07                   	pop    %es
   1029f:	1f                   	pop    %ds
   102a0:	61                   	popa   
   102a1:	83 c4 08             	add    $0x8,%esp
   102a4:	cf                   	iret   

000102a5 <exception_handler_kbd>:
exception_handler kbd, 0x21, 0
   102a5:	6a 00                	push   $0x0
   102a7:	6a 21                	push   $0x21
   102a9:	60                   	pusha  
   102aa:	1e                   	push   %ds
   102ab:	06                   	push   %es
   102ac:	0f a0                	push   %fs
   102ae:	0f a8                	push   %gs
   102b0:	54                   	push   %esp
   102b1:	e8 fb 4c 00 00       	call   14fb1 <do_handler_kbd>
   102b6:	83 c4 04             	add    $0x4,%esp
   102b9:	0f a9                	pop    %gs
   102bb:	0f a1                	pop    %fs
   102bd:	07                   	pop    %es
   102be:	1f                   	pop    %ds
   102bf:	61                   	popa   
   102c0:	83 c4 08             	add    $0x8,%esp
   102c3:	cf                   	iret   

000102c4 <exception_handler_ide_primary>:
exception_handler ide_primary, 0x2E, 0
   102c4:	6a 00                	push   $0x0
   102c6:	6a 2e                	push   $0x2e
   102c8:	60                   	pusha  
   102c9:	1e                   	push   %ds
   102ca:	06                   	push   %es
   102cb:	0f a0                	push   %fs
   102cd:	0f a8                	push   %gs
   102cf:	54                   	push   %esp
   102d0:	e8 b4 48 00 00       	call   14b89 <do_handler_ide_primary>
   102d5:	83 c4 04             	add    $0x4,%esp
   102d8:	0f a9                	pop    %gs
   102da:	0f a1                	pop    %fs
   102dc:	07                   	pop    %es
   102dd:	1f                   	pop    %ds
   102de:	61                   	popa   
   102df:	83 c4 08             	add    $0x8,%esp
   102e2:	cf                   	iret   

000102e3 <simple_switch>:


	.text
	.global simple_switch
simple_switch:
	movl 4(%esp), %eax   
   102e3:	8b 44 24 04          	mov    0x4(%esp),%eax
	movl 8(%esp), %edx   
   102e7:	8b 54 24 08          	mov    0x8(%esp),%edx

	push %ebp
   102eb:	55                   	push   %ebp
	push %ebx
   102ec:	53                   	push   %ebx
	push %esi
   102ed:	56                   	push   %esi
	push %edi
   102ee:	57                   	push   %edi

	mov %esp, (%eax)    
   102ef:	89 20                	mov    %esp,(%eax)
  	mov %edx, %esp     
   102f1:	89 d4                	mov    %edx,%esp

	pop %edi
   102f3:	5f                   	pop    %edi
	pop %esi
   102f4:	5e                   	pop    %esi
	pop %ebx
   102f5:	5b                   	pop    %ebx
	pop %ebp
   102f6:	5d                   	pop    %ebp
  	ret
   102f7:	c3                   	ret    

000102f8 <exception_handler_syscall>:

     .global exception_handler_syscall
    .extern do_handler_syscall
exception_handler_syscall:
	pusha
   102f8:	60                   	pusha  
	push %ds
   102f9:	1e                   	push   %ds
	push %es
   102fa:	06                   	push   %es
	push %fs
   102fb:	0f a0                	push   %fs
	push %gs
   102fd:	0f a8                	push   %gs
	pushf
   102ff:	9c                   	pushf  

	mov $(KERNEL_SELECTOR_DS), %eax
   10300:	b8 10 00 00 00       	mov    $0x10,%eax
	mov %eax, %ds
   10305:	8e d8                	mov    %eax,%ds
	mov %eax, %es
   10307:	8e c0                	mov    %eax,%es
	mov %eax, %fs
   10309:	8e e0                	mov    %eax,%fs
	mov %eax, %gs
   1030b:	8e e8                	mov    %eax,%gs

    mov %esp, %eax
   1030d:	89 e0                	mov    %esp,%eax
    push %eax
   1030f:	50                   	push   %eax
	call do_handler_syscall
   10310:	e8 17 0c 00 00       	call   10f2c <do_handler_syscall>
	add $4, %esp
   10315:	83 c4 04             	add    $0x4,%esp

	popf
   10318:	9d                   	popf   
	pop %gs
   10319:	0f a9                	pop    %gs
	pop %fs
   1031b:	0f a1                	pop    %fs
	pop %es
   1031d:	07                   	pop    %es
	pop %ds
   1031e:	1f                   	pop    %ds
	popa
   1031f:	61                   	popa   
	
   10320:	ca 14 00             	lret   $0x14

00010323 <up2>:

#include <stdarg.h>
#include "comm/types.h"

 
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   10323:	55                   	push   %ebp
   10324:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   10326:	8b 55 08             	mov    0x8(%ebp),%edx
   10329:	8b 45 0c             	mov    0xc(%ebp),%eax
   1032c:	01 d0                	add    %edx,%eax
   1032e:	8d 50 ff             	lea    -0x1(%eax),%edx
   10331:	8b 45 0c             	mov    0xc(%ebp),%eax
   10334:	f7 d8                	neg    %eax
   10336:	21 d0                	and    %edx,%eax
}
   10338:	5d                   	pop    %ebp
   10339:	c3                   	ret    

0001033a <down2>:

 
static inline uint32_t down2 (uint32_t size, uint32_t bound) {
   1033a:	55                   	push   %ebp
   1033b:	89 e5                	mov    %esp,%ebp
    return size & ~(bound - 1);
   1033d:	8b 45 0c             	mov    0xc(%ebp),%eax
   10340:	f7 d8                	neg    %eax
   10342:	23 45 08             	and    0x8(%ebp),%eax
}
   10345:	5d                   	pop    %ebp
   10346:	c3                   	ret    

00010347 <write_cr3>:
	uint32_t cr2;
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
	return cr2;
}

static inline void write_cr3(uint32_t v) {
   10347:	55                   	push   %ebp
   10348:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   1034a:	8b 45 08             	mov    0x8(%ebp),%eax
   1034d:	0f 22 d8             	mov    %eax,%cr3
}
   10350:	90                   	nop
   10351:	5d                   	pop    %ebp
   10352:	c3                   	ret    

00010353 <pde_index>:
}pte_t;

#pragma pack()


static inline uint32_t pde_index (uint32_t vaddr) {
   10353:	55                   	push   %ebp
   10354:	89 e5                	mov    %esp,%ebp
   10356:	83 ec 10             	sub    $0x10,%esp
    int index = (vaddr >> 22); 
   10359:	8b 45 08             	mov    0x8(%ebp),%eax
   1035c:	c1 e8 16             	shr    $0x16,%eax
   1035f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return index;
   10362:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   10365:	c9                   	leave  
   10366:	c3                   	ret    

00010367 <pde_paddr>:


static inline uint32_t pde_paddr (pde_t * pde) {
   10367:	55                   	push   %ebp
   10368:	89 e5                	mov    %esp,%ebp
    return pde->phy_pt_addr << 12;
   1036a:	8b 45 08             	mov    0x8(%ebp),%eax
   1036d:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   10371:	c0 ea 04             	shr    $0x4,%dl
   10374:	0f b6 d2             	movzbl %dl,%edx
   10377:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   1037b:	c1 e1 04             	shl    $0x4,%ecx
   1037e:	09 ca                	or     %ecx,%edx
   10380:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   10384:	c1 e0 0c             	shl    $0xc,%eax
   10387:	09 d0                	or     %edx,%eax
   10389:	c1 e0 0c             	shl    $0xc,%eax
}
   1038c:	5d                   	pop    %ebp
   1038d:	c3                   	ret    

0001038e <pte_index>:


static inline int pte_index (uint32_t vaddr) {
   1038e:	55                   	push   %ebp
   1038f:	89 e5                	mov    %esp,%ebp
    return (vaddr >> 12) & 0x3FF;  
   10391:	8b 45 08             	mov    0x8(%ebp),%eax
   10394:	c1 e8 0c             	shr    $0xc,%eax
   10397:	25 ff 03 00 00       	and    $0x3ff,%eax
}
   1039c:	5d                   	pop    %ebp
   1039d:	c3                   	ret    

0001039e <pte_paddr>:


static inline uint32_t pte_paddr (pte_t * pte) {
   1039e:	55                   	push   %ebp
   1039f:	89 e5                	mov    %esp,%ebp
    return pte->phy_page_addr << 12;
   103a1:	8b 45 08             	mov    0x8(%ebp),%eax
   103a4:	0f b6 50 01          	movzbl 0x1(%eax),%edx
   103a8:	c0 ea 04             	shr    $0x4,%dl
   103ab:	0f b6 d2             	movzbl %dl,%edx
   103ae:	0f b6 48 02          	movzbl 0x2(%eax),%ecx
   103b2:	c1 e1 04             	shl    $0x4,%ecx
   103b5:	09 ca                	or     %ecx,%edx
   103b7:	0f b6 40 03          	movzbl 0x3(%eax),%eax
   103bb:	c1 e0 0c             	shl    $0xc,%eax
   103be:	09 d0                	or     %edx,%eax
   103c0:	c1 e0 0c             	shl    $0xc,%eax
}
   103c3:	5d                   	pop    %ebp
   103c4:	c3                   	ret    

000103c5 <get_pte_perm>:


static inline uint32_t get_pte_perm (pte_t * pte) {
   103c5:	55                   	push   %ebp
   103c6:	89 e5                	mov    %esp,%ebp
    return (pte->v & 0x1FF);                  
   103c8:	8b 45 08             	mov    0x8(%ebp),%eax
   103cb:	8b 00                	mov    (%eax),%eax
   103cd:	25 ff 01 00 00       	and    $0x1ff,%eax
}
   103d2:	5d                   	pop    %ebp
   103d3:	c3                   	ret    

000103d4 <mmu_set_page_dir>:



static inline void mmu_set_page_dir (uint32_t paddr) {
   103d4:	55                   	push   %ebp
   103d5:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   103d7:	ff 75 08             	pushl  0x8(%ebp)
   103da:	e8 68 ff ff ff       	call   10347 <write_cr3>
   103df:	83 c4 04             	add    $0x4,%esp
}
   103e2:	90                   	nop
   103e3:	c9                   	leave  
   103e4:	c3                   	ret    

000103e5 <current_page_dir>:
#include "dev/console.h"

static addr_alloc_t paddr_alloc;       
static pde_t kernel_page_dir[PDE_CNT] __attribute__((aligned(MEM_PAGE_SIZE))); 

static pde_t * current_page_dir (void) {
   103e5:	55                   	push   %ebp
   103e6:	89 e5                	mov    %esp,%ebp
   103e8:	83 ec 08             	sub    $0x8,%esp
    return (pde_t *)task_current()->tss.cr3;
   103eb:	e8 19 13 00 00       	call   11709 <task_current>
   103f0:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
}
   103f6:	c9                   	leave  
   103f7:	c3                   	ret    

000103f8 <addr_alloc_init>:


static void addr_alloc_init (addr_alloc_t * alloc, uint8_t * bits,
                    uint32_t start, uint32_t size, uint32_t page_size) {
   103f8:	55                   	push   %ebp
   103f9:	89 e5                	mov    %esp,%ebp
   103fb:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&alloc->mutex);
   103fe:	8b 45 08             	mov    0x8(%ebp),%eax
   10401:	83 ec 0c             	sub    $0xc,%esp
   10404:	50                   	push   %eax
   10405:	e8 27 79 00 00       	call   17d31 <mutex_init>
   1040a:	83 c4 10             	add    $0x10,%esp
    alloc->start = start;
   1040d:	8b 45 08             	mov    0x8(%ebp),%eax
   10410:	8b 55 10             	mov    0x10(%ebp),%edx
   10413:	89 50 20             	mov    %edx,0x20(%eax)
    alloc->size = size;
   10416:	8b 45 08             	mov    0x8(%ebp),%eax
   10419:	8b 55 14             	mov    0x14(%ebp),%edx
   1041c:	89 50 24             	mov    %edx,0x24(%eax)
    alloc->page_size = page_size;
   1041f:	8b 45 08             	mov    0x8(%ebp),%eax
   10422:	8b 55 18             	mov    0x18(%ebp),%edx
   10425:	89 50 1c             	mov    %edx,0x1c(%eax)
    bitmap_init(&alloc->bitmap, bits, alloc->size / page_size, 0);
   10428:	8b 45 08             	mov    0x8(%ebp),%eax
   1042b:	8b 40 24             	mov    0x24(%eax),%eax
   1042e:	ba 00 00 00 00       	mov    $0x0,%edx
   10433:	f7 75 18             	divl   0x18(%ebp)
   10436:	89 c2                	mov    %eax,%edx
   10438:	8b 45 08             	mov    0x8(%ebp),%eax
   1043b:	83 c0 14             	add    $0x14,%eax
   1043e:	6a 00                	push   $0x0
   10440:	52                   	push   %edx
   10441:	ff 75 0c             	pushl  0xc(%ebp)
   10444:	50                   	push   %eax
   10445:	e8 ca 7b 00 00       	call   18014 <bitmap_init>
   1044a:	83 c4 10             	add    $0x10,%esp
}
   1044d:	90                   	nop
   1044e:	c9                   	leave  
   1044f:	c3                   	ret    

00010450 <addr_alloc_page>:


static uint32_t addr_alloc_page (addr_alloc_t * alloc, int page_count) {
   10450:	55                   	push   %ebp
   10451:	89 e5                	mov    %esp,%ebp
   10453:	83 ec 18             	sub    $0x18,%esp
    uint32_t addr = 0;
   10456:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&alloc->mutex);
   1045d:	8b 45 08             	mov    0x8(%ebp),%eax
   10460:	83 ec 0c             	sub    $0xc,%esp
   10463:	50                   	push   %eax
   10464:	e8 f6 78 00 00       	call   17d5f <mutex_lock>
   10469:	83 c4 10             	add    $0x10,%esp

    int page_index = bitmap_alloc_nbits(&alloc->bitmap, 0, page_count);
   1046c:	8b 45 08             	mov    0x8(%ebp),%eax
   1046f:	83 c0 14             	add    $0x14,%eax
   10472:	83 ec 04             	sub    $0x4,%esp
   10475:	ff 75 0c             	pushl  0xc(%ebp)
   10478:	6a 00                	push   $0x0
   1047a:	50                   	push   %eax
   1047b:	e8 10 7d 00 00       	call   18190 <bitmap_alloc_nbits>
   10480:	83 c4 10             	add    $0x10,%esp
   10483:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_index >= 0) {
   10486:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1048a:	78 17                	js     104a3 <addr_alloc_page+0x53>
        addr = alloc->start + page_index * alloc->page_size;
   1048c:	8b 45 08             	mov    0x8(%ebp),%eax
   1048f:	8b 50 20             	mov    0x20(%eax),%edx
   10492:	8b 45 08             	mov    0x8(%ebp),%eax
   10495:	8b 48 1c             	mov    0x1c(%eax),%ecx
   10498:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1049b:	0f af c1             	imul   %ecx,%eax
   1049e:	01 d0                	add    %edx,%eax
   104a0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    mutex_unlock(&alloc->mutex);
   104a3:	8b 45 08             	mov    0x8(%ebp),%eax
   104a6:	83 ec 0c             	sub    $0xc,%esp
   104a9:	50                   	push   %eax
   104aa:	e8 47 79 00 00       	call   17df6 <mutex_unlock>
   104af:	83 c4 10             	add    $0x10,%esp
    return addr;
   104b2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   104b5:	c9                   	leave  
   104b6:	c3                   	ret    

000104b7 <addr_free_page>:


static void addr_free_page (addr_alloc_t * alloc, uint32_t addr, int page_count) {
   104b7:	55                   	push   %ebp
   104b8:	89 e5                	mov    %esp,%ebp
   104ba:	53                   	push   %ebx
   104bb:	83 ec 14             	sub    $0x14,%esp
    mutex_lock(&alloc->mutex);
   104be:	8b 45 08             	mov    0x8(%ebp),%eax
   104c1:	83 ec 0c             	sub    $0xc,%esp
   104c4:	50                   	push   %eax
   104c5:	e8 95 78 00 00       	call   17d5f <mutex_lock>
   104ca:	83 c4 10             	add    $0x10,%esp

    uint32_t pg_idx = (addr - alloc->start) / alloc->page_size;
   104cd:	8b 45 08             	mov    0x8(%ebp),%eax
   104d0:	8b 40 20             	mov    0x20(%eax),%eax
   104d3:	8b 55 0c             	mov    0xc(%ebp),%edx
   104d6:	89 d1                	mov    %edx,%ecx
   104d8:	29 c1                	sub    %eax,%ecx
   104da:	8b 45 08             	mov    0x8(%ebp),%eax
   104dd:	8b 58 1c             	mov    0x1c(%eax),%ebx
   104e0:	89 c8                	mov    %ecx,%eax
   104e2:	ba 00 00 00 00       	mov    $0x0,%edx
   104e7:	f7 f3                	div    %ebx
   104e9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    bitmap_set_bit(&alloc->bitmap, pg_idx, page_count, 0);
   104ec:	8b 45 f4             	mov    -0xc(%ebp),%eax
   104ef:	8b 55 08             	mov    0x8(%ebp),%edx
   104f2:	83 c2 14             	add    $0x14,%edx
   104f5:	6a 00                	push   $0x0
   104f7:	ff 75 10             	pushl  0x10(%ebp)
   104fa:	50                   	push   %eax
   104fb:	52                   	push   %edx
   104fc:	e8 66 7b 00 00       	call   18067 <bitmap_set_bit>
   10501:	83 c4 10             	add    $0x10,%esp

    mutex_unlock(&alloc->mutex);
   10504:	8b 45 08             	mov    0x8(%ebp),%eax
   10507:	83 ec 0c             	sub    $0xc,%esp
   1050a:	50                   	push   %eax
   1050b:	e8 e6 78 00 00       	call   17df6 <mutex_unlock>
   10510:	83 c4 10             	add    $0x10,%esp
}
   10513:	90                   	nop
   10514:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10517:	c9                   	leave  
   10518:	c3                   	ret    

00010519 <show_mem_info>:

static void show_mem_info (boot_info_t * boot_info) {
   10519:	55                   	push   %ebp
   1051a:	89 e5                	mov    %esp,%ebp
   1051c:	83 ec 18             	sub    $0x18,%esp
    log_printf("mem region:");
   1051f:	83 ec 0c             	sub    $0xc,%esp
   10522:	68 00 8b 01 00       	push   $0x18b00
   10527:	e8 fa 84 00 00       	call   18a26 <log_printf>
   1052c:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1052f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10536:	eb 29                	jmp    10561 <show_mem_info+0x48>
        log_printf("[%d]: 0x%x - 0x%x", i,
   10538:	8b 45 08             	mov    0x8(%ebp),%eax
   1053b:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1053e:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   10542:	8b 45 08             	mov    0x8(%ebp),%eax
   10545:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10548:	8b 04 c8             	mov    (%eax,%ecx,8),%eax
   1054b:	52                   	push   %edx
   1054c:	50                   	push   %eax
   1054d:	ff 75 f4             	pushl  -0xc(%ebp)
   10550:	68 0c 8b 01 00       	push   $0x18b0c
   10555:	e8 cc 84 00 00       	call   18a26 <log_printf>
   1055a:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1055d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10561:	8b 45 08             	mov    0x8(%ebp),%eax
   10564:	8b 40 50             	mov    0x50(%eax),%eax
   10567:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1056a:	7c cc                	jl     10538 <show_mem_info+0x1f>
                    boot_info->ram_region_cfg[i].start,
                    boot_info->ram_region_cfg[i].size);
    }
    log_printf("\n");
   1056c:	83 ec 0c             	sub    $0xc,%esp
   1056f:	68 1e 8b 01 00       	push   $0x18b1e
   10574:	e8 ad 84 00 00       	call   18a26 <log_printf>
   10579:	83 c4 10             	add    $0x10,%esp
}
   1057c:	90                   	nop
   1057d:	c9                   	leave  
   1057e:	c3                   	ret    

0001057f <total_mem_size>:

static uint32_t total_mem_size(boot_info_t * boot_info) {
   1057f:	55                   	push   %ebp
   10580:	89 e5                	mov    %esp,%ebp
   10582:	83 ec 10             	sub    $0x10,%esp
    int mem_size = 0;
   10585:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    for (int i = 0; i < boot_info->ram_region_count; i++) {
   1058c:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   10593:	eb 16                	jmp    105ab <total_mem_size+0x2c>
        mem_size += boot_info->ram_region_cfg[i].size;
   10595:	8b 45 08             	mov    0x8(%ebp),%eax
   10598:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1059b:	8b 54 d0 04          	mov    0x4(%eax,%edx,8),%edx
   1059f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   105a2:	01 d0                	add    %edx,%eax
   105a4:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < boot_info->ram_region_count; i++) {
   105a7:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   105ab:	8b 45 08             	mov    0x8(%ebp),%eax
   105ae:	8b 40 50             	mov    0x50(%eax),%eax
   105b1:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   105b4:	7c df                	jl     10595 <total_mem_size+0x16>
    }
    return mem_size;
   105b6:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   105b9:	c9                   	leave  
   105ba:	c3                   	ret    

000105bb <find_pte>:

pte_t * find_pte (pde_t * page_dir, uint32_t vaddr, int alloc) {
   105bb:	55                   	push   %ebp
   105bc:	89 e5                	mov    %esp,%ebp
   105be:	83 ec 18             	sub    $0x18,%esp
    pte_t * page_table;

    pde_t *pde = page_dir + pde_index(vaddr);
   105c1:	ff 75 0c             	pushl  0xc(%ebp)
   105c4:	e8 8a fd ff ff       	call   10353 <pde_index>
   105c9:	83 c4 04             	add    $0x4,%esp
   105cc:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   105d3:	8b 45 08             	mov    0x8(%ebp),%eax
   105d6:	01 d0                	add    %edx,%eax
   105d8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (pde->present) {
   105db:	8b 45 f0             	mov    -0x10(%ebp),%eax
   105de:	0f b6 00             	movzbl (%eax),%eax
   105e1:	83 e0 01             	and    $0x1,%eax
   105e4:	84 c0                	test   %al,%al
   105e6:	74 10                	je     105f8 <find_pte+0x3d>
        page_table = (pte_t *)pde_paddr(pde);
   105e8:	ff 75 f0             	pushl  -0x10(%ebp)
   105eb:	e8 77 fd ff ff       	call   10367 <pde_paddr>
   105f0:	83 c4 04             	add    $0x4,%esp
   105f3:	89 45 f4             	mov    %eax,-0xc(%ebp)
   105f6:	eb 57                	jmp    1064f <find_pte+0x94>
    } else {
        if (alloc == 0) {
   105f8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   105fc:	75 07                	jne    10605 <find_pte+0x4a>
            return (pte_t *)0;
   105fe:	b8 00 00 00 00       	mov    $0x0,%eax
   10603:	eb 64                	jmp    10669 <find_pte+0xae>
        }

        uint32_t pg_paddr = addr_alloc_page(&paddr_alloc, 1);
   10605:	83 ec 08             	sub    $0x8,%esp
   10608:	6a 01                	push   $0x1
   1060a:	68 00 b0 01 00       	push   $0x1b000
   1060f:	e8 3c fe ff ff       	call   10450 <addr_alloc_page>
   10614:	83 c4 10             	add    $0x10,%esp
   10617:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (pg_paddr == 0) {
   1061a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1061e:	75 07                	jne    10627 <find_pte+0x6c>
            return (pte_t *)0;
   10620:	b8 00 00 00 00       	mov    $0x0,%eax
   10625:	eb 42                	jmp    10669 <find_pte+0xae>
        }

        pde->v = pg_paddr | PTE_P | PTE_W | PDE_U;
   10627:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1062a:	83 c8 07             	or     $0x7,%eax
   1062d:	89 c2                	mov    %eax,%edx
   1062f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10632:	89 10                	mov    %edx,(%eax)

        //kernel_pg_last[pde_index(vaddr)].v = pg_paddr | PTE_P | PTE_W;

        page_table = (pte_t *)(pg_paddr);
   10634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10637:	89 45 f4             	mov    %eax,-0xc(%ebp)
        kernel_memset(page_table, 0, MEM_PAGE_SIZE);
   1063a:	83 ec 04             	sub    $0x4,%esp
   1063d:	68 00 10 00 00       	push   $0x1000
   10642:	6a 00                	push   $0x0
   10644:	ff 75 f4             	pushl  -0xc(%ebp)
   10647:	e8 30 7e 00 00       	call   1847c <kernel_memset>
   1064c:	83 c4 10             	add    $0x10,%esp
    }

    return page_table + pte_index(vaddr);
   1064f:	83 ec 0c             	sub    $0xc,%esp
   10652:	ff 75 0c             	pushl  0xc(%ebp)
   10655:	e8 34 fd ff ff       	call   1038e <pte_index>
   1065a:	83 c4 10             	add    $0x10,%esp
   1065d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10664:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10667:	01 d0                	add    %edx,%eax
}
   10669:	c9                   	leave  
   1066a:	c3                   	ret    

0001066b <memory_create_map>:

int memory_create_map (pde_t * page_dir, uint32_t vaddr, uint32_t paddr, int count, uint32_t perm) {
   1066b:	55                   	push   %ebp
   1066c:	89 e5                	mov    %esp,%ebp
   1066e:	83 ec 18             	sub    $0x18,%esp
    for (int i = 0; i < count; i++) {
   10671:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10678:	eb 6b                	jmp    106e5 <memory_create_map+0x7a>
        // log_printf("create map: v-0x%x p-0x%x, perm: 0x%x", vaddr, paddr, perm);

        pte_t * pte = find_pte(page_dir, vaddr, 1);
   1067a:	83 ec 04             	sub    $0x4,%esp
   1067d:	6a 01                	push   $0x1
   1067f:	ff 75 0c             	pushl  0xc(%ebp)
   10682:	ff 75 08             	pushl  0x8(%ebp)
   10685:	e8 31 ff ff ff       	call   105bb <find_pte>
   1068a:	83 c4 10             	add    $0x10,%esp
   1068d:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pte == (pte_t *)0) {
   10690:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10694:	75 07                	jne    1069d <memory_create_map+0x32>
            // log_printf("create pte failed. pte == 0");
            return -1;
   10696:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1069b:	eb 55                	jmp    106f2 <memory_create_map+0x87>
        }

        // log_printf("\tpte addr: 0x%x", (uint32_t)pte);
        ASSERT(pte->present == 0);
   1069d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106a0:	0f b6 00             	movzbl (%eax),%eax
   106a3:	83 e0 01             	and    $0x1,%eax
   106a6:	84 c0                	test   %al,%al
   106a8:	74 19                	je     106c3 <memory_create_map+0x58>
   106aa:	68 20 8b 01 00       	push   $0x18b20
   106af:	68 6c 8c 01 00       	push   $0x18c6c
   106b4:	6a 6c                	push   $0x6c
   106b6:	68 34 8b 01 00       	push   $0x18b34
   106bb:	e8 09 81 00 00       	call   187c9 <panic>
   106c0:	83 c4 10             	add    $0x10,%esp

        pte->v = paddr | perm | PTE_P;
   106c3:	8b 45 10             	mov    0x10(%ebp),%eax
   106c6:	0b 45 18             	or     0x18(%ebp),%eax
   106c9:	83 c8 01             	or     $0x1,%eax
   106cc:	89 c2                	mov    %eax,%edx
   106ce:	8b 45 f0             	mov    -0x10(%ebp),%eax
   106d1:	89 10                	mov    %edx,(%eax)

        vaddr += MEM_PAGE_SIZE;
   106d3:	81 45 0c 00 10 00 00 	addl   $0x1000,0xc(%ebp)
        paddr += MEM_PAGE_SIZE;
   106da:	81 45 10 00 10 00 00 	addl   $0x1000,0x10(%ebp)
    for (int i = 0; i < count; i++) {
   106e1:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   106e5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   106e8:	3b 45 14             	cmp    0x14(%ebp),%eax
   106eb:	7c 8d                	jl     1067a <memory_create_map+0xf>
    }

    return 0;
   106ed:	b8 00 00 00 00       	mov    $0x0,%eax
}
   106f2:	c9                   	leave  
   106f3:	c3                   	ret    

000106f4 <create_kernel_table>:

void create_kernel_table (void) {
   106f4:	55                   	push   %ebp
   106f5:	89 e5                	mov    %esp,%ebp
   106f7:	83 ec 28             	sub    $0x28,%esp
        {(void *)CONSOLE_DISP_ADDR, (void *)(CONSOLE_DISP_END - 1), (void *)CONSOLE_VIDEO_BASE, PTE_W},

        {(void *)MEM_EXT_START, (void *)MEM_EXT_END,     (void *)MEM_EXT_START, PTE_W},
    };

    kernel_memset(kernel_page_dir, 0, sizeof(kernel_page_dir));
   106fa:	83 ec 04             	sub    $0x4,%esp
   106fd:	68 00 10 00 00       	push   $0x1000
   10702:	6a 00                	push   $0x0
   10704:	68 00 c0 01 00       	push   $0x1c000
   10709:	e8 6e 7d 00 00       	call   1847c <kernel_memset>
   1070e:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   10711:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10718:	e9 83 00 00 00       	jmp    107a0 <create_kernel_table+0xac>
        memory_map_t * map = kernel_map + i;
   1071d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10720:	c1 e0 04             	shl    $0x4,%eax
   10723:	05 00 a0 01 00       	add    $0x1a000,%eax
   10728:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int vstart = down2((uint32_t)map->vstart, MEM_PAGE_SIZE);
   1072b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1072e:	8b 00                	mov    (%eax),%eax
   10730:	83 ec 08             	sub    $0x8,%esp
   10733:	68 00 10 00 00       	push   $0x1000
   10738:	50                   	push   %eax
   10739:	e8 fc fb ff ff       	call   1033a <down2>
   1073e:	83 c4 10             	add    $0x10,%esp
   10741:	89 45 ec             	mov    %eax,-0x14(%ebp)
        int vend = up2((uint32_t)map->vend, MEM_PAGE_SIZE);
   10744:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10747:	8b 40 04             	mov    0x4(%eax),%eax
   1074a:	83 ec 08             	sub    $0x8,%esp
   1074d:	68 00 10 00 00       	push   $0x1000
   10752:	50                   	push   %eax
   10753:	e8 cb fb ff ff       	call   10323 <up2>
   10758:	83 c4 10             	add    $0x10,%esp
   1075b:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int page_count = (vend - vstart) / MEM_PAGE_SIZE;
   1075e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   10761:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10764:	8d 90 ff 0f 00 00    	lea    0xfff(%eax),%edx
   1076a:	85 c0                	test   %eax,%eax
   1076c:	0f 48 c2             	cmovs  %edx,%eax
   1076f:	c1 f8 0c             	sar    $0xc,%eax
   10772:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        memory_create_map(kernel_page_dir, vstart, (uint32_t)map->pstart, page_count, map->perm);
   10775:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10778:	8b 50 0c             	mov    0xc(%eax),%edx
   1077b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1077e:	8b 40 08             	mov    0x8(%eax),%eax
   10781:	89 c1                	mov    %eax,%ecx
   10783:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10786:	83 ec 0c             	sub    $0xc,%esp
   10789:	52                   	push   %edx
   1078a:	ff 75 e4             	pushl  -0x1c(%ebp)
   1078d:	51                   	push   %ecx
   1078e:	50                   	push   %eax
   1078f:	68 00 c0 01 00       	push   $0x1c000
   10794:	e8 d2 fe ff ff       	call   1066b <memory_create_map>
   10799:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < sizeof(kernel_map) / sizeof(memory_map_t); i++) {
   1079c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   107a0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   107a3:	83 f8 04             	cmp    $0x4,%eax
   107a6:	0f 86 71 ff ff ff    	jbe    1071d <create_kernel_table+0x29>
    }
}
   107ac:	90                   	nop
   107ad:	c9                   	leave  
   107ae:	c3                   	ret    

000107af <memory_create_uvm>:

uint32_t memory_create_uvm (void) {
   107af:	55                   	push   %ebp
   107b0:	89 e5                	mov    %esp,%ebp
   107b2:	83 ec 18             	sub    $0x18,%esp
    pde_t * page_dir = (pde_t *)addr_alloc_page(&paddr_alloc, 1);
   107b5:	83 ec 08             	sub    $0x8,%esp
   107b8:	6a 01                	push   $0x1
   107ba:	68 00 b0 01 00       	push   $0x1b000
   107bf:	e8 8c fc ff ff       	call   10450 <addr_alloc_page>
   107c4:	83 c4 10             	add    $0x10,%esp
   107c7:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (page_dir == 0) {
   107ca:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   107ce:	75 07                	jne    107d7 <memory_create_uvm+0x28>
        return 0;
   107d0:	b8 00 00 00 00       	mov    $0x0,%eax
   107d5:	eb 5b                	jmp    10832 <memory_create_uvm+0x83>
    }
    kernel_memset((void *)page_dir, 0, MEM_PAGE_SIZE);
   107d7:	83 ec 04             	sub    $0x4,%esp
   107da:	68 00 10 00 00       	push   $0x1000
   107df:	6a 00                	push   $0x0
   107e1:	ff 75 f0             	pushl  -0x10(%ebp)
   107e4:	e8 93 7c 00 00       	call   1847c <kernel_memset>
   107e9:	83 c4 10             	add    $0x10,%esp

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   107ec:	83 ec 0c             	sub    $0xc,%esp
   107ef:	68 00 00 00 80       	push   $0x80000000
   107f4:	e8 5a fb ff ff       	call   10353 <pde_index>
   107f9:	83 c4 10             	add    $0x10,%esp
   107fc:	89 45 ec             	mov    %eax,-0x14(%ebp)
    for (int i = 0; i < user_pde_start; i++) {
   107ff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   10806:	eb 1f                	jmp    10827 <memory_create_uvm+0x78>
        page_dir[i].v = kernel_page_dir[i].v;
   10808:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1080b:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10812:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10815:	01 c2                	add    %eax,%edx
   10817:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1081a:	8b 04 85 00 c0 01 00 	mov    0x1c000(,%eax,4),%eax
   10821:	89 02                	mov    %eax,(%edx)
    for (int i = 0; i < user_pde_start; i++) {
   10823:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   10827:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1082a:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   1082d:	77 d9                	ja     10808 <memory_create_uvm+0x59>
    }

    return (uint32_t)page_dir;
   1082f:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   10832:	c9                   	leave  
   10833:	c3                   	ret    

00010834 <memory_destroy_uvm>:

void memory_destroy_uvm (uint32_t page_dir) {
   10834:	55                   	push   %ebp
   10835:	89 e5                	mov    %esp,%ebp
   10837:	83 ec 28             	sub    $0x28,%esp
    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1083a:	68 00 00 00 80       	push   $0x80000000
   1083f:	e8 0f fb ff ff       	call   10353 <pde_index>
   10844:	83 c4 04             	add    $0x4,%esp
   10847:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   1084a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1084d:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10854:	8b 45 08             	mov    0x8(%ebp),%eax
   10857:	01 d0                	add    %edx,%eax
   10859:	89 45 f4             	mov    %eax,-0xc(%ebp)

    ASSERT(page_dir != 0);
   1085c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10860:	75 1c                	jne    1087e <memory_destroy_uvm+0x4a>
   10862:	68 74 8b 01 00       	push   $0x18b74
   10867:	68 80 8c 01 00       	push   $0x18c80
   1086c:	68 a4 00 00 00       	push   $0xa4
   10871:	68 34 8b 01 00       	push   $0x18b34
   10876:	e8 4e 7f 00 00       	call   187c9 <panic>
   1087b:	83 c4 10             	add    $0x10,%esp

    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   1087e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10881:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10884:	e9 95 00 00 00       	jmp    1091e <memory_destroy_uvm+0xea>
        if (!pde->present) {
   10889:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1088c:	0f b6 00             	movzbl (%eax),%eax
   1088f:	83 e0 01             	and    $0x1,%eax
   10892:	84 c0                	test   %al,%al
   10894:	74 7f                	je     10915 <memory_destroy_uvm+0xe1>
            continue;
        }

        pte_t * pte = (pte_t *)pde_paddr(pde);
   10896:	83 ec 0c             	sub    $0xc,%esp
   10899:	ff 75 f4             	pushl  -0xc(%ebp)
   1089c:	e8 c6 fa ff ff       	call   10367 <pde_paddr>
   108a1:	83 c4 10             	add    $0x10,%esp
   108a4:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108a7:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   108ae:	eb 39                	jmp    108e9 <memory_destroy_uvm+0xb5>
            if (!pte->present) {
   108b0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   108b3:	0f b6 00             	movzbl (%eax),%eax
   108b6:	83 e0 01             	and    $0x1,%eax
   108b9:	84 c0                	test   %al,%al
   108bb:	74 23                	je     108e0 <memory_destroy_uvm+0xac>
                continue;
            }

            addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   108bd:	83 ec 0c             	sub    $0xc,%esp
   108c0:	ff 75 ec             	pushl  -0x14(%ebp)
   108c3:	e8 d6 fa ff ff       	call   1039e <pte_paddr>
   108c8:	83 c4 10             	add    $0x10,%esp
   108cb:	83 ec 04             	sub    $0x4,%esp
   108ce:	6a 01                	push   $0x1
   108d0:	50                   	push   %eax
   108d1:	68 00 b0 01 00       	push   $0x1b000
   108d6:	e8 dc fb ff ff       	call   104b7 <addr_free_page>
   108db:	83 c4 10             	add    $0x10,%esp
   108de:	eb 01                	jmp    108e1 <memory_destroy_uvm+0xad>
                continue;
   108e0:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   108e1:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   108e5:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   108e9:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   108f0:	7e be                	jle    108b0 <memory_destroy_uvm+0x7c>
        }

        addr_free_page(&paddr_alloc, (uint32_t)pde_paddr(pde), 1);
   108f2:	83 ec 0c             	sub    $0xc,%esp
   108f5:	ff 75 f4             	pushl  -0xc(%ebp)
   108f8:	e8 6a fa ff ff       	call   10367 <pde_paddr>
   108fd:	83 c4 10             	add    $0x10,%esp
   10900:	83 ec 04             	sub    $0x4,%esp
   10903:	6a 01                	push   $0x1
   10905:	50                   	push   %eax
   10906:	68 00 b0 01 00       	push   $0x1b000
   1090b:	e8 a7 fb ff ff       	call   104b7 <addr_free_page>
   10910:	83 c4 10             	add    $0x10,%esp
   10913:	eb 01                	jmp    10916 <memory_destroy_uvm+0xe2>
            continue;
   10915:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10916:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   1091a:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   1091e:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10925:	0f 8e 5e ff ff ff    	jle    10889 <memory_destroy_uvm+0x55>
    }

    addr_free_page(&paddr_alloc, page_dir, 1);
   1092b:	83 ec 04             	sub    $0x4,%esp
   1092e:	6a 01                	push   $0x1
   10930:	ff 75 08             	pushl  0x8(%ebp)
   10933:	68 00 b0 01 00       	push   $0x1b000
   10938:	e8 7a fb ff ff       	call   104b7 <addr_free_page>
   1093d:	83 c4 10             	add    $0x10,%esp
}
   10940:	90                   	nop
   10941:	c9                   	leave  
   10942:	c3                   	ret    

00010943 <memory_copy_uvm>:

uint32_t memory_copy_uvm (uint32_t page_dir) {
   10943:	55                   	push   %ebp
   10944:	89 e5                	mov    %esp,%ebp
   10946:	83 ec 38             	sub    $0x38,%esp
    uint32_t to_page_dir = memory_create_uvm();
   10949:	e8 61 fe ff ff       	call   107af <memory_create_uvm>
   1094e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (to_page_dir == 0) {
   10951:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10955:	0f 84 1b 01 00 00    	je     10a76 <memory_copy_uvm+0x133>
        goto copy_uvm_failed;
    }

    uint32_t user_pde_start = pde_index(MEMORY_TASK_BASE);
   1095b:	83 ec 0c             	sub    $0xc,%esp
   1095e:	68 00 00 00 80       	push   $0x80000000
   10963:	e8 eb f9 ff ff       	call   10353 <pde_index>
   10968:	83 c4 10             	add    $0x10,%esp
   1096b:	89 45 e0             	mov    %eax,-0x20(%ebp)
    pde_t * pde = (pde_t *)page_dir + user_pde_start;
   1096e:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10971:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   10978:	8b 45 08             	mov    0x8(%ebp),%eax
   1097b:	01 d0                	add    %edx,%eax
   1097d:	89 45 f4             	mov    %eax,-0xc(%ebp)

    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10980:	8b 45 e0             	mov    -0x20(%ebp),%eax
   10983:	89 45 f0             	mov    %eax,-0x10(%ebp)
   10986:	e9 d9 00 00 00       	jmp    10a64 <memory_copy_uvm+0x121>
        if (!pde->present) {
   1098b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1098e:	0f b6 00             	movzbl (%eax),%eax
   10991:	83 e0 01             	and    $0x1,%eax
   10994:	84 c0                	test   %al,%al
   10996:	0f 84 bf 00 00 00    	je     10a5b <memory_copy_uvm+0x118>
            continue;
        }

        pte_t * pte = (pte_t *)pde_paddr(pde);
   1099c:	83 ec 0c             	sub    $0xc,%esp
   1099f:	ff 75 f4             	pushl  -0xc(%ebp)
   109a2:	e8 c0 f9 ff ff       	call   10367 <pde_paddr>
   109a7:	83 c4 10             	add    $0x10,%esp
   109aa:	89 45 ec             	mov    %eax,-0x14(%ebp)
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   109ad:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   109b4:	e9 93 00 00 00       	jmp    10a4c <memory_copy_uvm+0x109>
            if (!pte->present) {
   109b9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   109bc:	0f b6 00             	movzbl (%eax),%eax
   109bf:	83 e0 01             	and    $0x1,%eax
   109c2:	84 c0                	test   %al,%al
   109c4:	74 7d                	je     10a43 <memory_copy_uvm+0x100>
                continue;
            }

            uint32_t page = addr_alloc_page(&paddr_alloc, 1);
   109c6:	83 ec 08             	sub    $0x8,%esp
   109c9:	6a 01                	push   $0x1
   109cb:	68 00 b0 01 00       	push   $0x1b000
   109d0:	e8 7b fa ff ff       	call   10450 <addr_alloc_page>
   109d5:	83 c4 10             	add    $0x10,%esp
   109d8:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (page == 0) {
   109db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   109df:	0f 84 94 00 00 00    	je     10a79 <memory_copy_uvm+0x136>
                goto copy_uvm_failed;
            }

            uint32_t vaddr = (i << 22) | (j << 12);
   109e5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   109e8:	c1 e0 16             	shl    $0x16,%eax
   109eb:	89 c2                	mov    %eax,%edx
   109ed:	8b 45 e8             	mov    -0x18(%ebp),%eax
   109f0:	c1 e0 0c             	shl    $0xc,%eax
   109f3:	09 d0                	or     %edx,%eax
   109f5:	89 45 d8             	mov    %eax,-0x28(%ebp)
            int err = memory_create_map((pde_t *)to_page_dir, vaddr, page, 1, get_pte_perm(pte));
   109f8:	83 ec 0c             	sub    $0xc,%esp
   109fb:	ff 75 ec             	pushl  -0x14(%ebp)
   109fe:	e8 c2 f9 ff ff       	call   103c5 <get_pte_perm>
   10a03:	83 c4 10             	add    $0x10,%esp
   10a06:	89 c2                	mov    %eax,%edx
   10a08:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a0b:	83 ec 0c             	sub    $0xc,%esp
   10a0e:	52                   	push   %edx
   10a0f:	6a 01                	push   $0x1
   10a11:	ff 75 dc             	pushl  -0x24(%ebp)
   10a14:	ff 75 d8             	pushl  -0x28(%ebp)
   10a17:	50                   	push   %eax
   10a18:	e8 4e fc ff ff       	call   1066b <memory_create_map>
   10a1d:	83 c4 20             	add    $0x20,%esp
   10a20:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   10a23:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10a27:	78 53                	js     10a7c <memory_copy_uvm+0x139>
                goto copy_uvm_failed;
            }

            kernel_memcpy((void *)page, (void *)vaddr, MEM_PAGE_SIZE);
   10a29:	8b 55 d8             	mov    -0x28(%ebp),%edx
   10a2c:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10a2f:	83 ec 04             	sub    $0x4,%esp
   10a32:	68 00 10 00 00       	push   $0x1000
   10a37:	52                   	push   %edx
   10a38:	50                   	push   %eax
   10a39:	e8 ef 79 00 00       	call   1842d <kernel_memcpy>
   10a3e:	83 c4 10             	add    $0x10,%esp
   10a41:	eb 01                	jmp    10a44 <memory_copy_uvm+0x101>
                continue;
   10a43:	90                   	nop
        for (int j = 0; j < PTE_CNT; j++, pte++) {
   10a44:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   10a48:	83 45 ec 04          	addl   $0x4,-0x14(%ebp)
   10a4c:	81 7d e8 ff 03 00 00 	cmpl   $0x3ff,-0x18(%ebp)
   10a53:	0f 8e 60 ff ff ff    	jle    109b9 <memory_copy_uvm+0x76>
   10a59:	eb 01                	jmp    10a5c <memory_copy_uvm+0x119>
            continue;
   10a5b:	90                   	nop
    for (int i = user_pde_start; i < PDE_CNT; i++, pde++) {
   10a5c:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10a60:	83 45 f4 04          	addl   $0x4,-0xc(%ebp)
   10a64:	81 7d f0 ff 03 00 00 	cmpl   $0x3ff,-0x10(%ebp)
   10a6b:	0f 8e 1a ff ff ff    	jle    1098b <memory_copy_uvm+0x48>
        }
    }
    return to_page_dir;
   10a71:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10a74:	eb 20                	jmp    10a96 <memory_copy_uvm+0x153>
        goto copy_uvm_failed;
   10a76:	90                   	nop
   10a77:	eb 04                	jmp    10a7d <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a79:	90                   	nop
   10a7a:	eb 01                	jmp    10a7d <memory_copy_uvm+0x13a>
                goto copy_uvm_failed;
   10a7c:	90                   	nop

copy_uvm_failed:
    if (to_page_dir) {
   10a7d:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10a81:	74 0e                	je     10a91 <memory_copy_uvm+0x14e>
        memory_destroy_uvm(to_page_dir);
   10a83:	83 ec 0c             	sub    $0xc,%esp
   10a86:	ff 75 e4             	pushl  -0x1c(%ebp)
   10a89:	e8 a6 fd ff ff       	call   10834 <memory_destroy_uvm>
   10a8e:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   10a91:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   10a96:	c9                   	leave  
   10a97:	c3                   	ret    

00010a98 <memory_get_paddr>:


uint32_t memory_get_paddr (uint32_t page_dir, uint32_t vaddr) {
   10a98:	55                   	push   %ebp
   10a99:	89 e5                	mov    %esp,%ebp
   10a9b:	83 ec 18             	sub    $0x18,%esp
    pte_t * pte = find_pte((pde_t *)page_dir, vaddr, 0);
   10a9e:	8b 45 08             	mov    0x8(%ebp),%eax
   10aa1:	83 ec 04             	sub    $0x4,%esp
   10aa4:	6a 00                	push   $0x0
   10aa6:	ff 75 0c             	pushl  0xc(%ebp)
   10aa9:	50                   	push   %eax
   10aaa:	e8 0c fb ff ff       	call   105bb <find_pte>
   10aaf:	83 c4 10             	add    $0x10,%esp
   10ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (pte == (pte_t *)0) {
   10ab5:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10ab9:	75 07                	jne    10ac2 <memory_get_paddr+0x2a>
        return 0;
   10abb:	b8 00 00 00 00       	mov    $0x0,%eax
   10ac0:	eb 1a                	jmp    10adc <memory_get_paddr+0x44>
    }

    return pte_paddr(pte) + (vaddr & (MEM_PAGE_SIZE - 1));
   10ac2:	83 ec 0c             	sub    $0xc,%esp
   10ac5:	ff 75 f4             	pushl  -0xc(%ebp)
   10ac8:	e8 d1 f8 ff ff       	call   1039e <pte_paddr>
   10acd:	83 c4 10             	add    $0x10,%esp
   10ad0:	89 c2                	mov    %eax,%edx
   10ad2:	8b 45 0c             	mov    0xc(%ebp),%eax
   10ad5:	25 ff 0f 00 00       	and    $0xfff,%eax
   10ada:	01 d0                	add    %edx,%eax
}
   10adc:	c9                   	leave  
   10add:	c3                   	ret    

00010ade <memory_copy_uvm_data>:


int memory_copy_uvm_data(uint32_t to, uint32_t page_dir, uint32_t from, uint32_t size) {
   10ade:	55                   	push   %ebp
   10adf:	89 e5                	mov    %esp,%ebp
   10ae1:	83 ec 18             	sub    $0x18,%esp
    char *buf, *pa0;

    while(size > 0){
   10ae4:	eb 6e                	jmp    10b54 <memory_copy_uvm_data+0x76>
        uint32_t to_paddr = memory_get_paddr(page_dir, to);
   10ae6:	83 ec 08             	sub    $0x8,%esp
   10ae9:	ff 75 08             	pushl  0x8(%ebp)
   10aec:	ff 75 0c             	pushl  0xc(%ebp)
   10aef:	e8 a4 ff ff ff       	call   10a98 <memory_get_paddr>
   10af4:	83 c4 10             	add    $0x10,%esp
   10af7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (to_paddr == 0) {
   10afa:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   10afe:	75 07                	jne    10b07 <memory_copy_uvm_data+0x29>
            return -1;
   10b00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10b05:	eb 58                	jmp    10b5f <memory_copy_uvm_data+0x81>
        }

        uint32_t offset_in_page = to_paddr & (MEM_PAGE_SIZE - 1);
   10b07:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b0a:	25 ff 0f 00 00       	and    $0xfff,%eax
   10b0f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        uint32_t curr_size = MEM_PAGE_SIZE - offset_in_page;
   10b12:	b8 00 10 00 00       	mov    $0x1000,%eax
   10b17:	2b 45 ec             	sub    -0x14(%ebp),%eax
   10b1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (curr_size > size) {
   10b1d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b20:	3b 45 14             	cmp    0x14(%ebp),%eax
   10b23:	76 06                	jbe    10b2b <memory_copy_uvm_data+0x4d>
            curr_size = size;       
   10b25:	8b 45 14             	mov    0x14(%ebp),%eax
   10b28:	89 45 f4             	mov    %eax,-0xc(%ebp)
        }

        kernel_memcpy((void *)to_paddr, (void *)from, curr_size);
   10b2b:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   10b2e:	8b 55 10             	mov    0x10(%ebp),%edx
   10b31:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10b34:	83 ec 04             	sub    $0x4,%esp
   10b37:	51                   	push   %ecx
   10b38:	52                   	push   %edx
   10b39:	50                   	push   %eax
   10b3a:	e8 ee 78 00 00       	call   1842d <kernel_memcpy>
   10b3f:	83 c4 10             	add    $0x10,%esp

        size -= curr_size;
   10b42:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b45:	29 45 14             	sub    %eax,0x14(%ebp)
        to += curr_size;
   10b48:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b4b:	01 45 08             	add    %eax,0x8(%ebp)
        from += curr_size;
   10b4e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10b51:	01 45 10             	add    %eax,0x10(%ebp)
    while(size > 0){
   10b54:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   10b58:	75 8c                	jne    10ae6 <memory_copy_uvm_data+0x8>
  }

  return 0;
   10b5a:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10b5f:	c9                   	leave  
   10b60:	c3                   	ret    

00010b61 <memory_alloc_for_page_dir>:

uint32_t memory_alloc_for_page_dir (uint32_t page_dir, uint32_t vaddr, uint32_t size, int perm) {
   10b61:	55                   	push   %ebp
   10b62:	89 e5                	mov    %esp,%ebp
   10b64:	83 ec 28             	sub    $0x28,%esp
    uint32_t curr_vaddr = vaddr;
   10b67:	8b 45 0c             	mov    0xc(%ebp),%eax
   10b6a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int page_count = up2(size, MEM_PAGE_SIZE) / MEM_PAGE_SIZE;
   10b6d:	68 00 10 00 00       	push   $0x1000
   10b72:	ff 75 10             	pushl  0x10(%ebp)
   10b75:	e8 a9 f7 ff ff       	call   10323 <up2>
   10b7a:	83 c4 08             	add    $0x8,%esp
   10b7d:	c1 e8 0c             	shr    $0xc,%eax
   10b80:	89 45 ec             	mov    %eax,-0x14(%ebp)
    vaddr = down2(vaddr, MEM_PAGE_SIZE);
   10b83:	68 00 10 00 00       	push   $0x1000
   10b88:	ff 75 0c             	pushl  0xc(%ebp)
   10b8b:	e8 aa f7 ff ff       	call   1033a <down2>
   10b90:	83 c4 08             	add    $0x8,%esp
   10b93:	89 45 0c             	mov    %eax,0xc(%ebp)

    for (int i = 0; i < page_count; i++) {
   10b96:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   10b9d:	e9 95 00 00 00       	jmp    10c37 <memory_alloc_for_page_dir+0xd6>
        uint32_t paddr = addr_alloc_page(&paddr_alloc, 1);
   10ba2:	83 ec 08             	sub    $0x8,%esp
   10ba5:	6a 01                	push   $0x1
   10ba7:	68 00 b0 01 00       	push   $0x1b000
   10bac:	e8 9f f8 ff ff       	call   10450 <addr_alloc_page>
   10bb1:	83 c4 10             	add    $0x10,%esp
   10bb4:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (paddr == 0) {
   10bb7:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   10bbb:	75 17                	jne    10bd4 <memory_alloc_for_page_dir+0x73>
            log_printf("mem alloc failed. no memory");
   10bbd:	83 ec 0c             	sub    $0xc,%esp
   10bc0:	68 82 8b 01 00       	push   $0x18b82
   10bc5:	e8 5c 7e 00 00       	call   18a26 <log_printf>
   10bca:	83 c4 10             	add    $0x10,%esp
            return 0;
   10bcd:	b8 00 00 00 00       	mov    $0x0,%eax
   10bd2:	eb 74                	jmp    10c48 <memory_alloc_for_page_dir+0xe7>
        }

        int err = memory_create_map((pde_t *)page_dir, curr_vaddr, paddr, 1, perm);
   10bd4:	8b 55 14             	mov    0x14(%ebp),%edx
   10bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10bda:	83 ec 0c             	sub    $0xc,%esp
   10bdd:	52                   	push   %edx
   10bde:	6a 01                	push   $0x1
   10be0:	ff 75 e8             	pushl  -0x18(%ebp)
   10be3:	ff 75 f4             	pushl  -0xc(%ebp)
   10be6:	50                   	push   %eax
   10be7:	e8 7f fa ff ff       	call   1066b <memory_create_map>
   10bec:	83 c4 20             	add    $0x20,%esp
   10bef:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   10bf2:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   10bf6:	79 34                	jns    10c2c <memory_alloc_for_page_dir+0xcb>
            log_printf("create memory map failed. err = %d", err);
   10bf8:	83 ec 08             	sub    $0x8,%esp
   10bfb:	ff 75 e4             	pushl  -0x1c(%ebp)
   10bfe:	68 a0 8b 01 00       	push   $0x18ba0
   10c03:	e8 1e 7e 00 00       	call   18a26 <log_printf>
   10c08:	83 c4 10             	add    $0x10,%esp
            addr_free_page(&paddr_alloc, vaddr, i + 1);
   10c0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c0e:	83 c0 01             	add    $0x1,%eax
   10c11:	83 ec 04             	sub    $0x4,%esp
   10c14:	50                   	push   %eax
   10c15:	ff 75 0c             	pushl  0xc(%ebp)
   10c18:	68 00 b0 01 00       	push   $0x1b000
   10c1d:	e8 95 f8 ff ff       	call   104b7 <addr_free_page>
   10c22:	83 c4 10             	add    $0x10,%esp
            return -1;
   10c25:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10c2a:	eb 1c                	jmp    10c48 <memory_alloc_for_page_dir+0xe7>
        }

        curr_vaddr += MEM_PAGE_SIZE;
   10c2c:	81 45 f4 00 10 00 00 	addl   $0x1000,-0xc(%ebp)
    for (int i = 0; i < page_count; i++) {
   10c33:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   10c37:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10c3a:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   10c3d:	0f 8c 5f ff ff ff    	jl     10ba2 <memory_alloc_for_page_dir+0x41>
    }

    return 0;
   10c43:	b8 00 00 00 00       	mov    $0x0,%eax
}
   10c48:	c9                   	leave  
   10c49:	c3                   	ret    

00010c4a <memory_alloc_page_for>:

int memory_alloc_page_for (uint32_t addr, uint32_t size, int perm) {
   10c4a:	55                   	push   %ebp
   10c4b:	89 e5                	mov    %esp,%ebp
   10c4d:	83 ec 08             	sub    $0x8,%esp
    return memory_alloc_for_page_dir(task_current()->tss.cr3, addr, size, perm);
   10c50:	e8 b4 0a 00 00       	call   11709 <task_current>
   10c55:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   10c5b:	ff 75 10             	pushl  0x10(%ebp)
   10c5e:	ff 75 0c             	pushl  0xc(%ebp)
   10c61:	ff 75 08             	pushl  0x8(%ebp)
   10c64:	50                   	push   %eax
   10c65:	e8 f7 fe ff ff       	call   10b61 <memory_alloc_for_page_dir>
   10c6a:	83 c4 10             	add    $0x10,%esp
}
   10c6d:	c9                   	leave  
   10c6e:	c3                   	ret    

00010c6f <memory_alloc_page>:



uint32_t memory_alloc_page (void) {
   10c6f:	55                   	push   %ebp
   10c70:	89 e5                	mov    %esp,%ebp
   10c72:	83 ec 08             	sub    $0x8,%esp
    return addr_alloc_page(&paddr_alloc, 1);
   10c75:	83 ec 08             	sub    $0x8,%esp
   10c78:	6a 01                	push   $0x1
   10c7a:	68 00 b0 01 00       	push   $0x1b000
   10c7f:	e8 cc f7 ff ff       	call   10450 <addr_alloc_page>
   10c84:	83 c4 10             	add    $0x10,%esp
}
   10c87:	c9                   	leave  
   10c88:	c3                   	ret    

00010c89 <memory_free_page>:


void memory_free_page (uint32_t addr) {
   10c89:	55                   	push   %ebp
   10c8a:	89 e5                	mov    %esp,%ebp
   10c8c:	83 ec 18             	sub    $0x18,%esp
    if (addr < MEMORY_TASK_BASE) {
   10c8f:	8b 45 08             	mov    0x8(%ebp),%eax
   10c92:	85 c0                	test   %eax,%eax
   10c94:	78 17                	js     10cad <memory_free_page+0x24>
        addr_free_page(&paddr_alloc, addr, 1);
   10c96:	83 ec 04             	sub    $0x4,%esp
   10c99:	6a 01                	push   $0x1
   10c9b:	ff 75 08             	pushl  0x8(%ebp)
   10c9e:	68 00 b0 01 00       	push   $0x1b000
   10ca3:	e8 0f f8 ff ff       	call   104b7 <addr_free_page>
   10ca8:	83 c4 10             	add    $0x10,%esp

        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);

        pte->v = 0;
    }
}
   10cab:	eb 72                	jmp    10d1f <memory_free_page+0x96>
        pte_t * pte = find_pte(current_page_dir(), addr, 0);
   10cad:	e8 33 f7 ff ff       	call   103e5 <current_page_dir>
   10cb2:	83 ec 04             	sub    $0x4,%esp
   10cb5:	6a 00                	push   $0x0
   10cb7:	ff 75 08             	pushl  0x8(%ebp)
   10cba:	50                   	push   %eax
   10cbb:	e8 fb f8 ff ff       	call   105bb <find_pte>
   10cc0:	83 c4 10             	add    $0x10,%esp
   10cc3:	89 45 f4             	mov    %eax,-0xc(%ebp)
        ASSERT((pte == (pte_t *)0) && pte->present);
   10cc6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10cca:	75 0d                	jne    10cd9 <memory_free_page+0x50>
   10ccc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10ccf:	0f b6 00             	movzbl (%eax),%eax
   10cd2:	83 e0 01             	and    $0x1,%eax
   10cd5:	84 c0                	test   %al,%al
   10cd7:	75 1c                	jne    10cf5 <memory_free_page+0x6c>
   10cd9:	68 c4 8b 01 00       	push   $0x18bc4
   10cde:	68 94 8c 01 00       	push   $0x18c94
   10ce3:	68 32 01 00 00       	push   $0x132
   10ce8:	68 34 8b 01 00       	push   $0x18b34
   10ced:	e8 d7 7a 00 00       	call   187c9 <panic>
   10cf2:	83 c4 10             	add    $0x10,%esp
        addr_free_page(&paddr_alloc, pte_paddr(pte), 1);
   10cf5:	83 ec 0c             	sub    $0xc,%esp
   10cf8:	ff 75 f4             	pushl  -0xc(%ebp)
   10cfb:	e8 9e f6 ff ff       	call   1039e <pte_paddr>
   10d00:	83 c4 10             	add    $0x10,%esp
   10d03:	83 ec 04             	sub    $0x4,%esp
   10d06:	6a 01                	push   $0x1
   10d08:	50                   	push   %eax
   10d09:	68 00 b0 01 00       	push   $0x1b000
   10d0e:	e8 a4 f7 ff ff       	call   104b7 <addr_free_page>
   10d13:	83 c4 10             	add    $0x10,%esp
        pte->v = 0;
   10d16:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10d19:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
}
   10d1f:	90                   	nop
   10d20:	c9                   	leave  
   10d21:	c3                   	ret    

00010d22 <memory_init>:


void memory_init (boot_info_t * boot_info) {
   10d22:	55                   	push   %ebp
   10d23:	89 e5                	mov    %esp,%ebp
   10d25:	83 ec 18             	sub    $0x18,%esp
    extern uint8_t * mem_free_start;

    log_printf("mem init.");
   10d28:	83 ec 0c             	sub    $0xc,%esp
   10d2b:	68 e8 8b 01 00       	push   $0x18be8
   10d30:	e8 f1 7c 00 00       	call   18a26 <log_printf>
   10d35:	83 c4 10             	add    $0x10,%esp
    show_mem_info(boot_info);
   10d38:	83 ec 0c             	sub    $0xc,%esp
   10d3b:	ff 75 08             	pushl  0x8(%ebp)
   10d3e:	e8 d6 f7 ff ff       	call   10519 <show_mem_info>
   10d43:	83 c4 10             	add    $0x10,%esp

    uint8_t * mem_free = (uint8_t *)&mem_free_start;  
   10d46:	c7 45 f4 47 04 06 00 	movl   $0x60447,-0xc(%ebp)

    uint32_t mem_up1MB_free = total_mem_size(boot_info) - MEM_EXT_START;
   10d4d:	83 ec 0c             	sub    $0xc,%esp
   10d50:	ff 75 08             	pushl  0x8(%ebp)
   10d53:	e8 27 f8 ff ff       	call   1057f <total_mem_size>
   10d58:	83 c4 10             	add    $0x10,%esp
   10d5b:	2d 00 00 10 00       	sub    $0x100000,%eax
   10d60:	89 45 f0             	mov    %eax,-0x10(%ebp)
    mem_up1MB_free = down2(mem_up1MB_free, MEM_PAGE_SIZE);  
   10d63:	83 ec 08             	sub    $0x8,%esp
   10d66:	68 00 10 00 00       	push   $0x1000
   10d6b:	ff 75 f0             	pushl  -0x10(%ebp)
   10d6e:	e8 c7 f5 ff ff       	call   1033a <down2>
   10d73:	83 c4 10             	add    $0x10,%esp
   10d76:	89 45 f0             	mov    %eax,-0x10(%ebp)
    log_printf("Free memory: 0x%x, size: 0x%x", MEM_EXT_START, mem_up1MB_free);
   10d79:	83 ec 04             	sub    $0x4,%esp
   10d7c:	ff 75 f0             	pushl  -0x10(%ebp)
   10d7f:	68 00 00 10 00       	push   $0x100000
   10d84:	68 f2 8b 01 00       	push   $0x18bf2
   10d89:	e8 98 7c 00 00       	call   18a26 <log_printf>
   10d8e:	83 c4 10             	add    $0x10,%esp

    addr_alloc_init(&paddr_alloc, mem_free, MEM_EXT_START, mem_up1MB_free, MEM_PAGE_SIZE);
   10d91:	83 ec 0c             	sub    $0xc,%esp
   10d94:	68 00 10 00 00       	push   $0x1000
   10d99:	ff 75 f0             	pushl  -0x10(%ebp)
   10d9c:	68 00 00 10 00       	push   $0x100000
   10da1:	ff 75 f4             	pushl  -0xc(%ebp)
   10da4:	68 00 b0 01 00       	push   $0x1b000
   10da9:	e8 4a f6 ff ff       	call   103f8 <addr_alloc_init>
   10dae:	83 c4 20             	add    $0x20,%esp
    mem_free += bitmap_byte_count(paddr_alloc.size / MEM_PAGE_SIZE);
   10db1:	a1 24 b0 01 00       	mov    0x1b024,%eax
   10db6:	c1 e8 0c             	shr    $0xc,%eax
   10db9:	83 ec 0c             	sub    $0xc,%esp
   10dbc:	50                   	push   %eax
   10dbd:	e8 3c 72 00 00       	call   17ffe <bitmap_byte_count>
   10dc2:	83 c4 10             	add    $0x10,%esp
   10dc5:	01 45 f4             	add    %eax,-0xc(%ebp)

    ASSERT(mem_free < (uint8_t *)MEM_EBDA_START);
   10dc8:	81 7d f4 ff ff 07 00 	cmpl   $0x7ffff,-0xc(%ebp)
   10dcf:	76 1c                	jbe    10ded <memory_init+0xcb>
   10dd1:	68 10 8c 01 00       	push   $0x18c10
   10dd6:	68 a8 8c 01 00       	push   $0x18ca8
   10ddb:	68 4a 01 00 00       	push   $0x14a
   10de0:	68 34 8b 01 00       	push   $0x18b34
   10de5:	e8 df 79 00 00       	call   187c9 <panic>
   10dea:	83 c4 10             	add    $0x10,%esp

    create_kernel_table();
   10ded:	e8 02 f9 ff ff       	call   106f4 <create_kernel_table>

    mmu_set_page_dir((uint32_t)kernel_page_dir);
   10df2:	b8 00 c0 01 00       	mov    $0x1c000,%eax
   10df7:	83 ec 0c             	sub    $0xc,%esp
   10dfa:	50                   	push   %eax
   10dfb:	e8 d4 f5 ff ff       	call   103d4 <mmu_set_page_dir>
   10e00:	83 c4 10             	add    $0x10,%esp
}
   10e03:	90                   	nop
   10e04:	c9                   	leave  
   10e05:	c3                   	ret    

00010e06 <sys_sbrk>:

char * sys_sbrk(int incr) {
   10e06:	55                   	push   %ebp
   10e07:	89 e5                	mov    %esp,%ebp
   10e09:	83 ec 38             	sub    $0x38,%esp
    task_t * task = task_current();
   10e0c:	e8 f8 08 00 00       	call   11709 <task_current>
   10e11:	89 45 f0             	mov    %eax,-0x10(%ebp)
    char * pre_heap_end = (char * )task->heap_end;
   10e14:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e17:	8b 40 30             	mov    0x30(%eax),%eax
   10e1a:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int pre_incr = incr;
   10e1d:	8b 45 08             	mov    0x8(%ebp),%eax
   10e20:	89 45 e8             	mov    %eax,-0x18(%ebp)

    ASSERT(incr >= 0);
   10e23:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e27:	79 1c                	jns    10e45 <sys_sbrk+0x3f>
   10e29:	68 35 8c 01 00       	push   $0x18c35
   10e2e:	68 b4 8c 01 00       	push   $0x18cb4
   10e33:	68 56 01 00 00       	push   $0x156
   10e38:	68 34 8b 01 00       	push   $0x18b34
   10e3d:	e8 87 79 00 00       	call   187c9 <panic>
   10e42:	83 c4 10             	add    $0x10,%esp

    if (incr == 0) {
   10e45:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10e49:	75 1b                	jne    10e66 <sys_sbrk+0x60>
        log_printf("sbrk(0): end = 0x%x", pre_heap_end);
   10e4b:	83 ec 08             	sub    $0x8,%esp
   10e4e:	ff 75 ec             	pushl  -0x14(%ebp)
   10e51:	68 3f 8c 01 00       	push   $0x18c3f
   10e56:	e8 cb 7b 00 00       	call   18a26 <log_printf>
   10e5b:	83 c4 10             	add    $0x10,%esp
        return pre_heap_end;
   10e5e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10e61:	e9 aa 00 00 00       	jmp    10f10 <sys_sbrk+0x10a>
    } 
    
    uint32_t start = task->heap_end;
   10e66:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e69:	8b 40 30             	mov    0x30(%eax),%eax
   10e6c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t end = start + incr;
   10e6f:	8b 55 08             	mov    0x8(%ebp),%edx
   10e72:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e75:	01 d0                	add    %edx,%eax
   10e77:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    int start_offset = start % MEM_PAGE_SIZE;
   10e7a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10e7d:	25 ff 0f 00 00       	and    $0xfff,%eax
   10e82:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (start_offset) {
   10e85:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   10e89:	74 37                	je     10ec2 <sys_sbrk+0xbc>
        if (start_offset + incr <= MEM_PAGE_SIZE) {
   10e8b:	8b 55 e0             	mov    -0x20(%ebp),%edx
   10e8e:	8b 45 08             	mov    0x8(%ebp),%eax
   10e91:	01 d0                	add    %edx,%eax
   10e93:	3d 00 10 00 00       	cmp    $0x1000,%eax
   10e98:	7f 0e                	jg     10ea8 <sys_sbrk+0xa2>
            task->heap_end = end;
   10e9a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10e9d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10ea0:	89 50 30             	mov    %edx,0x30(%eax)
            return pre_heap_end;
   10ea3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   10ea6:	eb 68                	jmp    10f10 <sys_sbrk+0x10a>
        } else {
            uint32_t curr_size = MEM_PAGE_SIZE - start_offset;
   10ea8:	b8 00 10 00 00       	mov    $0x1000,%eax
   10ead:	2b 45 e0             	sub    -0x20(%ebp),%eax
   10eb0:	89 45 dc             	mov    %eax,-0x24(%ebp)
            start += curr_size;
   10eb3:	8b 45 dc             	mov    -0x24(%ebp),%eax
   10eb6:	01 45 f4             	add    %eax,-0xc(%ebp)
            incr -= curr_size;
   10eb9:	8b 45 08             	mov    0x8(%ebp),%eax
   10ebc:	2b 45 dc             	sub    -0x24(%ebp),%eax
   10ebf:	89 45 08             	mov    %eax,0x8(%ebp)
        }
    }

    if (incr) {
   10ec2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   10ec6:	74 3c                	je     10f04 <sys_sbrk+0xfe>
        uint32_t curr_size = end - start;
   10ec8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   10ecb:	2b 45 f4             	sub    -0xc(%ebp),%eax
   10ece:	89 45 d8             	mov    %eax,-0x28(%ebp)
        int err = memory_alloc_page_for(start, curr_size, PTE_P | PTE_U | PTE_W);
   10ed1:	83 ec 04             	sub    $0x4,%esp
   10ed4:	6a 07                	push   $0x7
   10ed6:	ff 75 d8             	pushl  -0x28(%ebp)
   10ed9:	ff 75 f4             	pushl  -0xc(%ebp)
   10edc:	e8 69 fd ff ff       	call   10c4a <memory_alloc_page_for>
   10ee1:	83 c4 10             	add    $0x10,%esp
   10ee4:	89 45 d4             	mov    %eax,-0x2c(%ebp)
        if (err < 0) {
   10ee7:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   10eeb:	79 17                	jns    10f04 <sys_sbrk+0xfe>
            log_printf("sbrk: alloc mem failed.");
   10eed:	83 ec 0c             	sub    $0xc,%esp
   10ef0:	68 53 8c 01 00       	push   $0x18c53
   10ef5:	e8 2c 7b 00 00       	call   18a26 <log_printf>
   10efa:	83 c4 10             	add    $0x10,%esp
            return (char *)-1;
   10efd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   10f02:	eb 0c                	jmp    10f10 <sys_sbrk+0x10a>
        }
    }

    //log_printf("sbrk(%d): end = 0x%x", pre_incr, end);
    task->heap_end = end;
   10f04:	8b 45 f0             	mov    -0x10(%ebp),%eax
   10f07:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   10f0a:	89 50 30             	mov    %edx,0x30(%eax)
    return (char * )pre_heap_end;        
   10f0d:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   10f10:	c9                   	leave  
   10f11:	c3                   	ret    

00010f12 <sys_print_msg>:
#include "core/memory.h"
#include "fs/fs.h"

typedef int (*syscall_handler_t)(uint32_t arg0, uint32_t arg1, uint32_t arg2, uint32_t arg3);

int sys_print_msg (char * fmt, int arg) {
   10f12:	55                   	push   %ebp
   10f13:	89 e5                	mov    %esp,%ebp
   10f15:	83 ec 08             	sub    $0x8,%esp
	log_printf(fmt, arg);
   10f18:	83 ec 08             	sub    $0x8,%esp
   10f1b:	ff 75 0c             	pushl  0xc(%ebp)
   10f1e:	ff 75 08             	pushl  0x8(%ebp)
   10f21:	e8 00 7b 00 00       	call   18a26 <log_printf>
   10f26:	83 c4 10             	add    $0x10,%esp
}
   10f29:	90                   	nop
   10f2a:	c9                   	leave  
   10f2b:	c3                   	ret    

00010f2c <do_handler_syscall>:
	[SYS_closedir] = (syscall_handler_t)sys_closedir,
	[SYS_unlink] = (syscall_handler_t)sys_unlink,
};


void do_handler_syscall (syscall_frame_t * frame) {
   10f2c:	55                   	push   %ebp
   10f2d:	89 e5                	mov    %esp,%ebp
   10f2f:	53                   	push   %ebx
   10f30:	83 ec 14             	sub    $0x14,%esp
    if (frame->func_id < sizeof(sys_table) / sizeof(sys_table[0])) {
   10f33:	8b 45 08             	mov    0x8(%ebp),%eax
   10f36:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f39:	83 f8 64             	cmp    $0x64,%eax
   10f3c:	77 4e                	ja     10f8c <do_handler_syscall+0x60>
		syscall_handler_t handler = sys_table[frame->func_id];
   10f3e:	8b 45 08             	mov    0x8(%ebp),%eax
   10f41:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f44:	8b 04 85 c0 8c 01 00 	mov    0x18cc0(,%eax,4),%eax
   10f4b:	89 45 f4             	mov    %eax,-0xc(%ebp)
		if (handler) {
   10f4e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   10f52:	74 38                	je     10f8c <do_handler_syscall+0x60>
			int ret = handler(frame->arg0, frame->arg1, frame->arg2, frame->arg3);
   10f54:	8b 45 08             	mov    0x8(%ebp),%eax
   10f57:	8b 40 4c             	mov    0x4c(%eax),%eax
   10f5a:	89 c3                	mov    %eax,%ebx
   10f5c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f5f:	8b 40 48             	mov    0x48(%eax),%eax
   10f62:	89 c1                	mov    %eax,%ecx
   10f64:	8b 45 08             	mov    0x8(%ebp),%eax
   10f67:	8b 40 44             	mov    0x44(%eax),%eax
   10f6a:	89 c2                	mov    %eax,%edx
   10f6c:	8b 45 08             	mov    0x8(%ebp),%eax
   10f6f:	8b 40 40             	mov    0x40(%eax),%eax
   10f72:	53                   	push   %ebx
   10f73:	51                   	push   %ecx
   10f74:	52                   	push   %edx
   10f75:	50                   	push   %eax
   10f76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   10f79:	ff d0                	call   *%eax
   10f7b:	83 c4 10             	add    $0x10,%esp
   10f7e:	89 45 f0             	mov    %eax,-0x10(%ebp)
			frame->eax = ret;  
   10f81:	8b 45 08             	mov    0x8(%ebp),%eax
   10f84:	8b 55 f0             	mov    -0x10(%ebp),%edx
   10f87:	89 50 30             	mov    %edx,0x30(%eax)
            return;
   10f8a:	eb 30                	jmp    10fbc <do_handler_syscall+0x90>
		}
	}

	task_t * task = task_current();
   10f8c:	e8 78 07 00 00       	call   11709 <task_current>
   10f91:	89 45 ec             	mov    %eax,-0x14(%ebp)
	log_printf("task: %s, Unknown syscall: %d", task->name,  frame->func_id);
   10f94:	8b 45 08             	mov    0x8(%ebp),%eax
   10f97:	8b 40 3c             	mov    0x3c(%eax),%eax
   10f9a:	8b 55 ec             	mov    -0x14(%ebp),%edx
   10f9d:	83 c2 04             	add    $0x4,%edx
   10fa0:	83 ec 04             	sub    $0x4,%esp
   10fa3:	50                   	push   %eax
   10fa4:	52                   	push   %edx
   10fa5:	68 54 8e 01 00       	push   $0x18e54
   10faa:	e8 77 7a 00 00       	call   18a26 <log_printf>
   10faf:	83 c4 10             	add    $0x10,%esp
    frame->eax = -1;  
   10fb2:	8b 45 08             	mov    0x8(%ebp),%eax
   10fb5:	c7 40 30 ff ff ff ff 	movl   $0xffffffff,0x30(%eax)
}
   10fbc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   10fbf:	c9                   	leave  
   10fc0:	c3                   	ret    

00010fc1 <write_cr3>:
static inline void write_cr3(uint32_t v) {
   10fc1:	55                   	push   %ebp
   10fc2:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(v));
   10fc4:	8b 45 08             	mov    0x8(%ebp),%eax
   10fc7:	0f 22 d8             	mov    %eax,%cr3
}
   10fca:	90                   	nop
   10fcb:	5d                   	pop    %ebp
   10fcc:	c3                   	ret    

00010fcd <hlt>:
	idt.limit = size - 1;

	__asm__ __volatile__("lidt %0"::"m"(idt));
}

static inline void hlt(void) {
   10fcd:	55                   	push   %ebp
   10fce:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   10fd0:	f4                   	hlt    
}
   10fd1:	90                   	nop
   10fd2:	5d                   	pop    %ebp
   10fd3:	c3                   	ret    

00010fd4 <write_tr>:

static inline void write_tr (uint32_t tss_selector) {
   10fd4:	55                   	push   %ebp
   10fd5:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("ltr %%ax"::"a"(tss_selector));
   10fd7:	8b 45 08             	mov    0x8(%ebp),%eax
   10fda:	0f 00 d8             	ltr    %ax
}
   10fdd:	90                   	nop
   10fde:	5d                   	pop    %ebp
   10fdf:	c3                   	ret    

00010fe0 <list_node_init>:
    struct _list_node_t *pre;
    struct _list_node_t *next;
} list_node_t;

static inline void list_node_init(list_node_t *node)
{
   10fe0:	55                   	push   %ebp
   10fe1:	89 e5                	mov    %esp,%ebp
    node->pre = node->next = (list_node_t *)0;
   10fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   10fe6:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   10fed:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff0:	8b 50 04             	mov    0x4(%eax),%edx
   10ff3:	8b 45 08             	mov    0x8(%ebp),%eax
   10ff6:	89 10                	mov    %edx,(%eax)
}
   10ff8:	90                   	nop
   10ff9:	5d                   	pop    %ebp
   10ffa:	c3                   	ret    

00010ffb <list_node_next>:
{
    return node->pre;
}

static inline list_node_t *list_node_next(list_node_t *node)
{
   10ffb:	55                   	push   %ebp
   10ffc:	89 e5                	mov    %esp,%ebp
    return node->next;
   10ffe:	8b 45 08             	mov    0x8(%ebp),%eax
   11001:	8b 40 04             	mov    0x4(%eax),%eax
}
   11004:	5d                   	pop    %ebp
   11005:	c3                   	ret    

00011006 <list_count>:
{
    return list->count == 0;
}

static inline int list_count(list_t *list)
{
   11006:	55                   	push   %ebp
   11007:	89 e5                	mov    %esp,%ebp
    return list->count;
   11009:	8b 45 08             	mov    0x8(%ebp),%eax
   1100c:	8b 40 08             	mov    0x8(%eax),%eax
}
   1100f:	5d                   	pop    %ebp
   11010:	c3                   	ret    

00011011 <list_first>:

static inline list_node_t *list_first(list_t *list)
{
   11011:	55                   	push   %ebp
   11012:	89 e5                	mov    %esp,%ebp
    return list->first;
   11014:	8b 45 08             	mov    0x8(%ebp),%eax
   11017:	8b 00                	mov    (%eax),%eax
}
   11019:	5d                   	pop    %ebp
   1101a:	c3                   	ret    

0001101b <mmu_set_page_dir>:
static inline void mmu_set_page_dir (uint32_t paddr) {
   1101b:	55                   	push   %ebp
   1101c:	89 e5                	mov    %esp,%ebp
    write_cr3(paddr);
   1101e:	ff 75 08             	pushl  0x8(%ebp)
   11021:	e8 9b ff ff ff       	call   10fc1 <write_cr3>
   11026:	83 c4 04             	add    $0x4,%esp
}
   11029:	90                   	nop
   1102a:	c9                   	leave  
   1102b:	c3                   	ret    

0001102c <tss_init>:
static task_manager_t task_manager;     
static uint32_t idle_task_stack[IDLE_STACK_SIZE];	
static task_t task_table[TASK_NR];      
static mutex_t task_table_mutex;        

static int tss_init (task_t * task, int flag, uint32_t entry, uint32_t esp) {
   1102c:	55                   	push   %ebp
   1102d:	89 e5                	mov    %esp,%ebp
   1102f:	83 ec 28             	sub    $0x28,%esp
    int tss_sel = gdt_alloc_desc();
   11032:	e8 fb 15 00 00       	call   12632 <gdt_alloc_desc>
   11037:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (tss_sel < 0) {
   1103a:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1103e:	79 1a                	jns    1105a <tss_init+0x2e>
        log_printf("alloc tss failed.\n");
   11040:	83 ec 0c             	sub    $0xc,%esp
   11043:	68 74 8e 01 00       	push   $0x18e74
   11048:	e8 d9 79 00 00       	call   18a26 <log_printf>
   1104d:	83 c4 10             	add    $0x10,%esp
        return -1;
   11050:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11055:	e9 9d 01 00 00       	jmp    111f7 <tss_init+0x1cb>
    }

    segment_desc_set(tss_sel, (uint32_t)&task->tss, sizeof(tss_t),
   1105a:	8b 45 08             	mov    0x8(%ebp),%eax
   1105d:	05 44 02 00 00       	add    $0x244,%eax
   11062:	68 89 00 00 00       	push   $0x89
   11067:	6a 68                	push   $0x68
   11069:	50                   	push   %eax
   1106a:	ff 75 ec             	pushl  -0x14(%ebp)
   1106d:	e8 ba 14 00 00       	call   1252c <segment_desc_set>
   11072:	83 c4 10             	add    $0x10,%esp
            SEG_P_PRESENT | SEG_DPL0 | SEG_TYPE_TSS);

    kernel_memset(&task->tss, 0, sizeof(tss_t));
   11075:	8b 45 08             	mov    0x8(%ebp),%eax
   11078:	05 44 02 00 00       	add    $0x244,%eax
   1107d:	83 ec 04             	sub    $0x4,%esp
   11080:	6a 68                	push   $0x68
   11082:	6a 00                	push   $0x0
   11084:	50                   	push   %eax
   11085:	e8 f2 73 00 00       	call   1847c <kernel_memset>
   1108a:	83 c4 10             	add    $0x10,%esp

    uint32_t kernel_stack = memory_alloc_page();
   1108d:	e8 dd fb ff ff       	call   10c6f <memory_alloc_page>
   11092:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (kernel_stack == 0) {
   11095:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11099:	0f 84 2d 01 00 00    	je     111cc <tss_init+0x1a0>
        goto tss_init_failed;
    }
    
    int code_sel, data_sel;
    if (flag & TASK_FLAG_SYSTEM) {
   1109f:	8b 45 0c             	mov    0xc(%ebp),%eax
   110a2:	83 e0 01             	and    $0x1,%eax
   110a5:	85 c0                	test   %eax,%eax
   110a7:	74 10                	je     110b9 <tss_init+0x8d>
        code_sel = KERNEL_SELECTOR_CS;
   110a9:	c7 45 f4 08 00 00 00 	movl   $0x8,-0xc(%ebp)
        data_sel = KERNEL_SELECTOR_DS;
   110b0:	c7 45 f0 10 00 00 00 	movl   $0x10,-0x10(%ebp)
   110b7:	eb 16                	jmp    110cf <tss_init+0xa3>
    } else {
        code_sel = task_manager.app_code_sel | SEG_RPL3;
   110b9:	a1 b8 d5 01 00       	mov    0x1d5b8,%eax
   110be:	83 c8 03             	or     $0x3,%eax
   110c1:	89 45 f4             	mov    %eax,-0xc(%ebp)
        data_sel = task_manager.app_data_sel | SEG_RPL3;
   110c4:	a1 bc d5 01 00       	mov    0x1d5bc,%eax
   110c9:	83 c8 03             	or     $0x3,%eax
   110cc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    }

    task->tss.eip = entry;
   110cf:	8b 45 08             	mov    0x8(%ebp),%eax
   110d2:	8b 55 10             	mov    0x10(%ebp),%edx
   110d5:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.esp = esp ? esp : kernel_stack + MEM_PAGE_SIZE; 
   110db:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   110df:	75 0a                	jne    110eb <tss_init+0xbf>
   110e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110e4:	05 00 10 00 00       	add    $0x1000,%eax
   110e9:	eb 03                	jmp    110ee <tss_init+0xc2>
   110eb:	8b 45 14             	mov    0x14(%ebp),%eax
   110ee:	8b 55 08             	mov    0x8(%ebp),%edx
   110f1:	89 82 7c 02 00 00    	mov    %eax,0x27c(%edx)
    task->tss.esp0 = kernel_stack + MEM_PAGE_SIZE;
   110f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   110fa:	8d 90 00 10 00 00    	lea    0x1000(%eax),%edx
   11100:	8b 45 08             	mov    0x8(%ebp),%eax
   11103:	89 90 48 02 00 00    	mov    %edx,0x248(%eax)
    task->tss.ss0 = KERNEL_SELECTOR_DS;
   11109:	8b 45 08             	mov    0x8(%ebp),%eax
   1110c:	c7 80 4c 02 00 00 10 	movl   $0x10,0x24c(%eax)
   11113:	00 00 00 
    task->tss.eip = entry;
   11116:	8b 45 08             	mov    0x8(%ebp),%eax
   11119:	8b 55 10             	mov    0x10(%ebp),%edx
   1111c:	89 90 64 02 00 00    	mov    %edx,0x264(%eax)
    task->tss.eflags = EFLAGS_DEFAULT| EFLAGS_IF;
   11122:	8b 45 08             	mov    0x8(%ebp),%eax
   11125:	c7 80 68 02 00 00 02 	movl   $0x202,0x268(%eax)
   1112c:	02 00 00 
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
            = task->tss.gs = data_sel;   
   1112f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   11132:	8b 45 08             	mov    0x8(%ebp),%eax
   11135:	89 90 a0 02 00 00    	mov    %edx,0x2a0(%eax)
   1113b:	8b 45 08             	mov    0x8(%ebp),%eax
   1113e:	8b 90 a0 02 00 00    	mov    0x2a0(%eax),%edx
   11144:	8b 45 08             	mov    0x8(%ebp),%eax
   11147:	89 90 9c 02 00 00    	mov    %edx,0x29c(%eax)
    task->tss.es = task->tss.ss = task->tss.ds = task->tss.fs 
   1114d:	8b 45 08             	mov    0x8(%ebp),%eax
   11150:	8b 90 9c 02 00 00    	mov    0x29c(%eax),%edx
   11156:	8b 45 08             	mov    0x8(%ebp),%eax
   11159:	89 90 98 02 00 00    	mov    %edx,0x298(%eax)
   1115f:	8b 45 08             	mov    0x8(%ebp),%eax
   11162:	8b 90 98 02 00 00    	mov    0x298(%eax),%edx
   11168:	8b 45 08             	mov    0x8(%ebp),%eax
   1116b:	89 90 94 02 00 00    	mov    %edx,0x294(%eax)
   11171:	8b 45 08             	mov    0x8(%ebp),%eax
   11174:	8b 90 94 02 00 00    	mov    0x294(%eax),%edx
   1117a:	8b 45 08             	mov    0x8(%ebp),%eax
   1117d:	89 90 8c 02 00 00    	mov    %edx,0x28c(%eax)
    task->tss.cs = code_sel; 
   11183:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11186:	8b 45 08             	mov    0x8(%ebp),%eax
   11189:	89 90 90 02 00 00    	mov    %edx,0x290(%eax)
    task->tss.iomap = 0;
   1118f:	8b 45 08             	mov    0x8(%ebp),%eax
   11192:	c7 80 a8 02 00 00 00 	movl   $0x0,0x2a8(%eax)
   11199:	00 00 00 

    uint32_t page_dir = memory_create_uvm();
   1119c:	e8 0e f6 ff ff       	call   107af <memory_create_uvm>
   111a1:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (page_dir == 0) {
   111a4:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   111a8:	74 25                	je     111cf <tss_init+0x1a3>
        goto tss_init_failed;
    }
    task->tss.cr3 = page_dir;
   111aa:	8b 45 08             	mov    0x8(%ebp),%eax
   111ad:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   111b0:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)

    task->tss_sel = tss_sel;
   111b6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   111b9:	89 c2                	mov    %eax,%edx
   111bb:	8b 45 08             	mov    0x8(%ebp),%eax
   111be:	66 89 90 ac 02 00 00 	mov    %dx,0x2ac(%eax)
    return 0;
   111c5:	b8 00 00 00 00       	mov    $0x0,%eax
   111ca:	eb 2b                	jmp    111f7 <tss_init+0x1cb>
        goto tss_init_failed;
   111cc:	90                   	nop
   111cd:	eb 01                	jmp    111d0 <tss_init+0x1a4>
        goto tss_init_failed;
   111cf:	90                   	nop
tss_init_failed:
    gdt_free_sel(tss_sel);
   111d0:	83 ec 0c             	sub    $0xc,%esp
   111d3:	ff 75 ec             	pushl  -0x14(%ebp)
   111d6:	e8 1e 14 00 00       	call   125f9 <gdt_free_sel>
   111db:	83 c4 10             	add    $0x10,%esp

    if (kernel_stack) {
   111de:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   111e2:	74 0e                	je     111f2 <tss_init+0x1c6>
        memory_free_page(kernel_stack);
   111e4:	83 ec 0c             	sub    $0xc,%esp
   111e7:	ff 75 e8             	pushl  -0x18(%ebp)
   111ea:	e8 9a fa ff ff       	call   10c89 <memory_free_page>
   111ef:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   111f2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   111f7:	c9                   	leave  
   111f8:	c3                   	ret    

000111f9 <task_init>:


int task_init (task_t *task, const char * name, int flag, uint32_t entry, uint32_t esp) {
   111f9:	55                   	push   %ebp
   111fa:	89 e5                	mov    %esp,%ebp
   111fc:	83 ec 18             	sub    $0x18,%esp
    ASSERT(task != (task_t *)0);
   111ff:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   11203:	75 19                	jne    1121e <task_init+0x25>
   11205:	68 87 8e 01 00       	push   $0x18e87
   1120a:	68 14 90 01 00       	push   $0x19014
   1120f:	6a 4c                	push   $0x4c
   11211:	68 9c 8e 01 00       	push   $0x18e9c
   11216:	e8 ae 75 00 00       	call   187c9 <panic>
   1121b:	83 c4 10             	add    $0x10,%esp

    int err = tss_init(task, flag, entry, esp);
   1121e:	ff 75 18             	pushl  0x18(%ebp)
   11221:	ff 75 14             	pushl  0x14(%ebp)
   11224:	ff 75 10             	pushl  0x10(%ebp)
   11227:	ff 75 08             	pushl  0x8(%ebp)
   1122a:	e8 fd fd ff ff       	call   1102c <tss_init>
   1122f:	83 c4 10             	add    $0x10,%esp
   11232:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   11235:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11239:	79 18                	jns    11253 <task_init+0x5a>
        log_printf("init task failed.\n");
   1123b:	83 ec 0c             	sub    $0xc,%esp
   1123e:	68 da 8e 01 00       	push   $0x18eda
   11243:	e8 de 77 00 00       	call   18a26 <log_printf>
   11248:	83 c4 10             	add    $0x10,%esp
        return err;
   1124b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1124e:	e9 f0 00 00 00       	jmp    11343 <task_init+0x14a>
    }

    kernel_strncpy(task->name, name, TASK_NAME_SIZE);
   11253:	8b 45 08             	mov    0x8(%ebp),%eax
   11256:	83 c0 04             	add    $0x4,%eax
   11259:	83 ec 04             	sub    $0x4,%esp
   1125c:	6a 20                	push   $0x20
   1125e:	ff 75 0c             	pushl  0xc(%ebp)
   11261:	50                   	push   %eax
   11262:	e8 9d 70 00 00       	call   18304 <kernel_strncpy>
   11267:	83 c4 10             	add    $0x10,%esp
    task->state = TASK_CREATED;
   1126a:	8b 45 08             	mov    0x8(%ebp),%eax
   1126d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    task->sleep_ticks = 0;
   11273:	8b 45 08             	mov    0x8(%ebp),%eax
   11276:	c7 40 38 00 00 00 00 	movl   $0x0,0x38(%eax)
    task->time_slice = TASK_TIME_SLICE_DEFAULT;
   1127d:	8b 45 08             	mov    0x8(%ebp),%eax
   11280:	c7 40 3c 0a 00 00 00 	movl   $0xa,0x3c(%eax)
    task->slice_ticks = task->time_slice;
   11287:	8b 45 08             	mov    0x8(%ebp),%eax
   1128a:	8b 50 3c             	mov    0x3c(%eax),%edx
   1128d:	8b 45 08             	mov    0x8(%ebp),%eax
   11290:	89 50 40             	mov    %edx,0x40(%eax)
    task->parent = (task_t *)0;
   11293:	8b 45 08             	mov    0x8(%ebp),%eax
   11296:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    task->heap_start = 0;
   1129d:	8b 45 08             	mov    0x8(%ebp),%eax
   112a0:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
    task->heap_end = 0;
   112a7:	8b 45 08             	mov    0x8(%ebp),%eax
   112aa:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    list_node_init(&task->all_node);
   112b1:	8b 45 08             	mov    0x8(%ebp),%eax
   112b4:	05 c0 02 00 00       	add    $0x2c0,%eax
   112b9:	83 ec 0c             	sub    $0xc,%esp
   112bc:	50                   	push   %eax
   112bd:	e8 1e fd ff ff       	call   10fe0 <list_node_init>
   112c2:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->run_node);
   112c5:	8b 45 08             	mov    0x8(%ebp),%eax
   112c8:	05 b0 02 00 00       	add    $0x2b0,%eax
   112cd:	83 ec 0c             	sub    $0xc,%esp
   112d0:	50                   	push   %eax
   112d1:	e8 0a fd ff ff       	call   10fe0 <list_node_init>
   112d6:	83 c4 10             	add    $0x10,%esp
    list_node_init(&task->wait_node);
   112d9:	8b 45 08             	mov    0x8(%ebp),%eax
   112dc:	05 b8 02 00 00       	add    $0x2b8,%eax
   112e1:	83 ec 0c             	sub    $0xc,%esp
   112e4:	50                   	push   %eax
   112e5:	e8 f6 fc ff ff       	call   10fe0 <list_node_init>
   112ea:	83 c4 10             	add    $0x10,%esp

    kernel_memset(task->file_table, 0, sizeof(task->file_table));
   112ed:	8b 45 08             	mov    0x8(%ebp),%eax
   112f0:	83 c0 44             	add    $0x44,%eax
   112f3:	83 ec 04             	sub    $0x4,%esp
   112f6:	68 00 02 00 00       	push   $0x200
   112fb:	6a 00                	push   $0x0
   112fd:	50                   	push   %eax
   112fe:	e8 79 71 00 00       	call   1847c <kernel_memset>
   11303:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   11306:	e8 03 1e 00 00       	call   1310e <irq_enter_protection>
   1130b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    task->pid = (uint32_t)task;   
   1130e:	8b 55 08             	mov    0x8(%ebp),%edx
   11311:	8b 45 08             	mov    0x8(%ebp),%eax
   11314:	89 50 24             	mov    %edx,0x24(%eax)
    list_insert_last(&task_manager.task_list, &task->all_node);
   11317:	8b 45 08             	mov    0x8(%ebp),%eax
   1131a:	05 c0 02 00 00       	add    $0x2c0,%eax
   1131f:	83 ec 08             	sub    $0x8,%esp
   11322:	50                   	push   %eax
   11323:	68 10 d0 01 00       	push   $0x1d010
   11328:	e8 69 75 00 00       	call   18896 <list_insert_last>
   1132d:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11330:	83 ec 0c             	sub    $0xc,%esp
   11333:	ff 75 f0             	pushl  -0x10(%ebp)
   11336:	e8 eb 1d 00 00       	call   13126 <irq_leave_protection>
   1133b:	83 c4 10             	add    $0x10,%esp
    return 0;
   1133e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11343:	c9                   	leave  
   11344:	c3                   	ret    

00011345 <task_start>:


void task_start(task_t * task) {
   11345:	55                   	push   %ebp
   11346:	89 e5                	mov    %esp,%ebp
   11348:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   1134b:	e8 be 1d 00 00       	call   1310e <irq_enter_protection>
   11350:	89 45 f4             	mov    %eax,-0xc(%ebp)
    task_set_ready(task);
   11353:	83 ec 0c             	sub    $0xc,%esp
   11356:	ff 75 08             	pushl  0x8(%ebp)
   11359:	e8 a9 02 00 00       	call   11607 <task_set_ready>
   1135e:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   11361:	83 ec 0c             	sub    $0xc,%esp
   11364:	ff 75 f4             	pushl  -0xc(%ebp)
   11367:	e8 ba 1d 00 00       	call   13126 <irq_leave_protection>
   1136c:	83 c4 10             	add    $0x10,%esp
}
   1136f:	90                   	nop
   11370:	c9                   	leave  
   11371:	c3                   	ret    

00011372 <task_uninit>:


void task_uninit (task_t * task) {
   11372:	55                   	push   %ebp
   11373:	89 e5                	mov    %esp,%ebp
   11375:	83 ec 08             	sub    $0x8,%esp
    if (task->tss_sel) {
   11378:	8b 45 08             	mov    0x8(%ebp),%eax
   1137b:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11382:	66 85 c0             	test   %ax,%ax
   11385:	74 19                	je     113a0 <task_uninit+0x2e>
        gdt_free_sel(task->tss_sel);
   11387:	8b 45 08             	mov    0x8(%ebp),%eax
   1138a:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11391:	0f b7 c0             	movzwl %ax,%eax
   11394:	83 ec 0c             	sub    $0xc,%esp
   11397:	50                   	push   %eax
   11398:	e8 5c 12 00 00       	call   125f9 <gdt_free_sel>
   1139d:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.esp0) {
   113a0:	8b 45 08             	mov    0x8(%ebp),%eax
   113a3:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113a9:	85 c0                	test   %eax,%eax
   113ab:	74 1a                	je     113c7 <task_uninit+0x55>
        memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   113ad:	8b 45 08             	mov    0x8(%ebp),%eax
   113b0:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   113b6:	2d 00 10 00 00       	sub    $0x1000,%eax
   113bb:	83 ec 0c             	sub    $0xc,%esp
   113be:	50                   	push   %eax
   113bf:	e8 c5 f8 ff ff       	call   10c89 <memory_free_page>
   113c4:	83 c4 10             	add    $0x10,%esp
    }

    if (task->tss.cr3) {
   113c7:	8b 45 08             	mov    0x8(%ebp),%eax
   113ca:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113d0:	85 c0                	test   %eax,%eax
   113d2:	74 15                	je     113e9 <task_uninit+0x77>
        memory_destroy_uvm(task->tss.cr3);
   113d4:	8b 45 08             	mov    0x8(%ebp),%eax
   113d7:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   113dd:	83 ec 0c             	sub    $0xc,%esp
   113e0:	50                   	push   %eax
   113e1:	e8 4e f4 ff ff       	call   10834 <memory_destroy_uvm>
   113e6:	83 c4 10             	add    $0x10,%esp
    }

    kernel_memset(task, 0, sizeof(task_t));
   113e9:	83 ec 04             	sub    $0x4,%esp
   113ec:	68 c8 02 00 00       	push   $0x2c8
   113f1:	6a 00                	push   $0x0
   113f3:	ff 75 08             	pushl  0x8(%ebp)
   113f6:	e8 81 70 00 00       	call   1847c <kernel_memset>
   113fb:	83 c4 10             	add    $0x10,%esp
}
   113fe:	90                   	nop
   113ff:	c9                   	leave  
   11400:	c3                   	ret    

00011401 <task_switch_from_to>:

void simple_switch (uint32_t ** from, uint32_t * to);


void task_switch_from_to (task_t * from, task_t * to) {
   11401:	55                   	push   %ebp
   11402:	89 e5                	mov    %esp,%ebp
   11404:	83 ec 08             	sub    $0x8,%esp
     switch_to_tss(to->tss_sel);
   11407:	8b 45 0c             	mov    0xc(%ebp),%eax
   1140a:	0f b7 80 ac 02 00 00 	movzwl 0x2ac(%eax),%eax
   11411:	0f b7 c0             	movzwl %ax,%eax
   11414:	83 ec 0c             	sub    $0xc,%esp
   11417:	50                   	push   %eax
   11418:	e8 16 13 00 00       	call   12733 <switch_to_tss>
   1141d:	83 c4 10             	add    $0x10,%esp
    //simple_switch(&from->stack, to->stack);
}
   11420:	90                   	nop
   11421:	c9                   	leave  
   11422:	c3                   	ret    

00011423 <task_first_init>:


void task_first_init (void) {
   11423:	55                   	push   %ebp
   11424:	89 e5                	mov    %esp,%ebp
   11426:	83 ec 18             	sub    $0x18,%esp
    void first_task_entry (void);

    extern uint8_t s_first_task[], e_first_task[];

    uint32_t copy_size = (uint32_t)(e_first_task - s_first_task);
   11429:	ba 47 04 06 00       	mov    $0x60447,%edx
   1142e:	b8 c0 00 06 00       	mov    $0x600c0,%eax
   11433:	29 c2                	sub    %eax,%edx
   11435:	89 d0                	mov    %edx,%eax
   11437:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t alloc_size = 10 * MEM_PAGE_SIZE;
   1143a:	c7 45 f0 00 a0 00 00 	movl   $0xa000,-0x10(%ebp)
    ASSERT(copy_size < alloc_size);
   11441:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11444:	3b 45 f0             	cmp    -0x10(%ebp),%eax
   11447:	72 1c                	jb     11465 <task_first_init+0x42>
   11449:	68 ed 8e 01 00       	push   $0x18eed
   1144e:	68 20 90 01 00       	push   $0x19020
   11453:	68 91 00 00 00       	push   $0x91
   11458:	68 9c 8e 01 00       	push   $0x18e9c
   1145d:	e8 67 73 00 00       	call   187c9 <panic>
   11462:	83 c4 10             	add    $0x10,%esp

    uint32_t first_start = (uint32_t)first_task_entry;
   11465:	c7 45 ec 00 00 00 80 	movl   $0x80000000,-0x14(%ebp)


    task_init(&task_manager.first_task, "first task", 0, first_start, first_start + alloc_size);
   1146c:	8b 55 ec             	mov    -0x14(%ebp),%edx
   1146f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11472:	01 d0                	add    %edx,%eax
   11474:	83 ec 0c             	sub    $0xc,%esp
   11477:	50                   	push   %eax
   11478:	ff 75 ec             	pushl  -0x14(%ebp)
   1147b:	6a 00                	push   $0x0
   1147d:	68 04 8f 01 00       	push   $0x18f04
   11482:	68 28 d0 01 00       	push   $0x1d028
   11487:	e8 6d fd ff ff       	call   111f9 <task_init>
   1148c:	83 c4 20             	add    $0x20,%esp
    task_manager.first_task.heap_start = (uint32_t)e_first_task;  
   1148f:	b8 47 04 06 00       	mov    $0x60447,%eax
   11494:	a3 54 d0 01 00       	mov    %eax,0x1d054
    task_manager.first_task.heap_end = task_manager.first_task.heap_start;
   11499:	a1 54 d0 01 00       	mov    0x1d054,%eax
   1149e:	a3 58 d0 01 00       	mov    %eax,0x1d058
    task_manager.curr_task = &task_manager.first_task;
   114a3:	c7 05 00 d0 01 00 28 	movl   $0x1d028,0x1d000
   114aa:	d0 01 00 

    mmu_set_page_dir(task_manager.first_task.tss.cr3);
   114ad:	a1 88 d2 01 00       	mov    0x1d288,%eax
   114b2:	83 ec 0c             	sub    $0xc,%esp
   114b5:	50                   	push   %eax
   114b6:	e8 60 fb ff ff       	call   1101b <mmu_set_page_dir>
   114bb:	83 c4 10             	add    $0x10,%esp

    memory_alloc_page_for(first_start,  alloc_size, PTE_P | PTE_W | PTE_U);
   114be:	83 ec 04             	sub    $0x4,%esp
   114c1:	6a 07                	push   $0x7
   114c3:	ff 75 f0             	pushl  -0x10(%ebp)
   114c6:	ff 75 ec             	pushl  -0x14(%ebp)
   114c9:	e8 7c f7 ff ff       	call   10c4a <memory_alloc_page_for>
   114ce:	83 c4 10             	add    $0x10,%esp
    kernel_memcpy((void *)first_start, (void *)&s_first_task, copy_size);
   114d1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   114d4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   114d7:	83 ec 04             	sub    $0x4,%esp
   114da:	52                   	push   %edx
   114db:	68 c0 00 06 00       	push   $0x600c0
   114e0:	50                   	push   %eax
   114e1:	e8 47 6f 00 00       	call   1842d <kernel_memcpy>
   114e6:	83 c4 10             	add    $0x10,%esp

    task_start(&task_manager.first_task);
   114e9:	83 ec 0c             	sub    $0xc,%esp
   114ec:	68 28 d0 01 00       	push   $0x1d028
   114f1:	e8 4f fe ff ff       	call   11345 <task_start>
   114f6:	83 c4 10             	add    $0x10,%esp

    write_tr(task_manager.first_task.tss_sel);
   114f9:	0f b7 05 d4 d2 01 00 	movzwl 0x1d2d4,%eax
   11500:	0f b7 c0             	movzwl %ax,%eax
   11503:	83 ec 0c             	sub    $0xc,%esp
   11506:	50                   	push   %eax
   11507:	e8 c8 fa ff ff       	call   10fd4 <write_tr>
   1150c:	83 c4 10             	add    $0x10,%esp
}
   1150f:	90                   	nop
   11510:	c9                   	leave  
   11511:	c3                   	ret    

00011512 <task_first_task>:


task_t * task_first_task (void) {
   11512:	55                   	push   %ebp
   11513:	89 e5                	mov    %esp,%ebp
    return &task_manager.first_task;
   11515:	b8 28 d0 01 00       	mov    $0x1d028,%eax
}
   1151a:	5d                   	pop    %ebp
   1151b:	c3                   	ret    

0001151c <idle_task_entry>:

static void idle_task_entry (void) {
   1151c:	55                   	push   %ebp
   1151d:	89 e5                	mov    %esp,%ebp
    for (;;) {
        hlt();
   1151f:	e8 a9 fa ff ff       	call   10fcd <hlt>
   11524:	eb f9                	jmp    1151f <idle_task_entry+0x3>

00011526 <task_manager_init>:
    }
}


void task_manager_init (void) {
   11526:	55                   	push   %ebp
   11527:	89 e5                	mov    %esp,%ebp
   11529:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(task_table, 0, sizeof(task_table));
   1152c:	83 ec 04             	sub    $0x4,%esp
   1152f:	68 00 64 01 00       	push   $0x16400
   11534:	6a 00                	push   $0x0
   11536:	68 c0 e5 01 00       	push   $0x1e5c0
   1153b:	e8 3c 6f 00 00       	call   1847c <kernel_memset>
   11540:	83 c4 10             	add    $0x10,%esp
    mutex_init(&task_table_mutex);
   11543:	83 ec 0c             	sub    $0xc,%esp
   11546:	68 c0 49 03 00       	push   $0x349c0
   1154b:	e8 e1 67 00 00       	call   17d31 <mutex_init>
   11550:	83 c4 10             	add    $0x10,%esp


    int sel = gdt_alloc_desc();
   11553:	e8 da 10 00 00       	call   12632 <gdt_alloc_desc>
   11558:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1155b:	68 f2 40 00 00       	push   $0x40f2
   11560:	6a ff                	push   $0xffffffff
   11562:	6a 00                	push   $0x0
   11564:	ff 75 f4             	pushl  -0xc(%ebp)
   11567:	e8 c0 0f 00 00       	call   1252c <segment_desc_set>
   1156c:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_DATA | SEG_TYPE_RW | SEG_D);
    task_manager.app_data_sel = sel;
   1156f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11572:	a3 bc d5 01 00       	mov    %eax,0x1d5bc

    sel = gdt_alloc_desc();
   11577:	e8 b6 10 00 00       	call   12632 <gdt_alloc_desc>
   1157c:	89 45 f4             	mov    %eax,-0xc(%ebp)
    segment_desc_set(sel, 0x00000000, 0xFFFFFFFF,
   1157f:	68 fa 40 00 00       	push   $0x40fa
   11584:	6a ff                	push   $0xffffffff
   11586:	6a 00                	push   $0x0
   11588:	ff 75 f4             	pushl  -0xc(%ebp)
   1158b:	e8 9c 0f 00 00       	call   1252c <segment_desc_set>
   11590:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL3 | SEG_S_NORMAL |
                     SEG_TYPE_CODE | SEG_TYPE_RW | SEG_D);
    task_manager.app_code_sel = sel;
   11593:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11596:	a3 b8 d5 01 00       	mov    %eax,0x1d5b8

    list_init(&task_manager.ready_list);
   1159b:	83 ec 0c             	sub    $0xc,%esp
   1159e:	68 04 d0 01 00       	push   $0x1d004
   115a3:	e8 6a 72 00 00       	call   18812 <list_init>
   115a8:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.task_list);
   115ab:	83 ec 0c             	sub    $0xc,%esp
   115ae:	68 10 d0 01 00       	push   $0x1d010
   115b3:	e8 5a 72 00 00       	call   18812 <list_init>
   115b8:	83 c4 10             	add    $0x10,%esp
    list_init(&task_manager.sleep_list);
   115bb:	83 ec 0c             	sub    $0xc,%esp
   115be:	68 1c d0 01 00       	push   $0x1d01c
   115c3:	e8 4a 72 00 00       	call   18812 <list_init>
   115c8:	83 c4 10             	add    $0x10,%esp

    task_init(&task_manager.idle_task,
   115cb:	b8 1c 15 01 00       	mov    $0x1151c,%eax
   115d0:	83 ec 0c             	sub    $0xc,%esp
   115d3:	6a 00                	push   $0x0
   115d5:	50                   	push   %eax
   115d6:	6a 01                	push   $0x1
   115d8:	68 0f 8f 01 00       	push   $0x18f0f
   115dd:	68 f0 d2 01 00       	push   $0x1d2f0
   115e2:	e8 12 fc ff ff       	call   111f9 <task_init>
   115e7:	83 c4 20             	add    $0x20,%esp
                "idle task",
                TASK_FLAG_SYSTEM,
                (uint32_t)idle_task_entry,
                0);     
    task_manager.curr_task = (task_t *)0;
   115ea:	c7 05 00 d0 01 00 00 	movl   $0x0,0x1d000
   115f1:	00 00 00 
    task_start(&task_manager.idle_task);
   115f4:	83 ec 0c             	sub    $0xc,%esp
   115f7:	68 f0 d2 01 00       	push   $0x1d2f0
   115fc:	e8 44 fd ff ff       	call   11345 <task_start>
   11601:	83 c4 10             	add    $0x10,%esp
}
   11604:	90                   	nop
   11605:	c9                   	leave  
   11606:	c3                   	ret    

00011607 <task_set_ready>:

void task_set_ready(task_t *task) {
   11607:	55                   	push   %ebp
   11608:	89 e5                	mov    %esp,%ebp
   1160a:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   1160d:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   11614:	74 22                	je     11638 <task_set_ready+0x31>
        list_insert_last(&task_manager.ready_list, &task->run_node);
   11616:	8b 45 08             	mov    0x8(%ebp),%eax
   11619:	05 b0 02 00 00       	add    $0x2b0,%eax
   1161e:	83 ec 08             	sub    $0x8,%esp
   11621:	50                   	push   %eax
   11622:	68 04 d0 01 00       	push   $0x1d004
   11627:	e8 6a 72 00 00       	call   18896 <list_insert_last>
   1162c:	83 c4 10             	add    $0x10,%esp
        task->state = TASK_READY;
   1162f:	8b 45 08             	mov    0x8(%ebp),%eax
   11632:	c7 00 03 00 00 00    	movl   $0x3,(%eax)
    }
}
   11638:	90                   	nop
   11639:	c9                   	leave  
   1163a:	c3                   	ret    

0001163b <task_set_block>:


void task_set_block (task_t *task) {
   1163b:	55                   	push   %ebp
   1163c:	89 e5                	mov    %esp,%ebp
   1163e:	83 ec 08             	sub    $0x8,%esp
    if (task != &task_manager.idle_task) {
   11641:	81 7d 08 f0 d2 01 00 	cmpl   $0x1d2f0,0x8(%ebp)
   11648:	74 19                	je     11663 <task_set_block+0x28>
        list_remove(&task_manager.ready_list, &task->run_node);
   1164a:	8b 45 08             	mov    0x8(%ebp),%eax
   1164d:	05 b0 02 00 00       	add    $0x2b0,%eax
   11652:	83 ec 08             	sub    $0x8,%esp
   11655:	50                   	push   %eax
   11656:	68 04 d0 01 00       	push   $0x1d004
   1165b:	e8 12 73 00 00       	call   18972 <list_remove>
   11660:	83 c4 10             	add    $0x10,%esp
    }
}
   11663:	90                   	nop
   11664:	c9                   	leave  
   11665:	c3                   	ret    

00011666 <task_next_run>:

static task_t * task_next_run (void) {
   11666:	55                   	push   %ebp
   11667:	89 e5                	mov    %esp,%ebp
   11669:	83 ec 10             	sub    $0x10,%esp
    if (list_count(&task_manager.ready_list) == 0) {
   1166c:	68 04 d0 01 00       	push   $0x1d004
   11671:	e8 90 f9 ff ff       	call   11006 <list_count>
   11676:	83 c4 04             	add    $0x4,%esp
   11679:	85 c0                	test   %eax,%eax
   1167b:	75 07                	jne    11684 <task_next_run+0x1e>
        return &task_manager.idle_task;
   1167d:	b8 f0 d2 01 00       	mov    $0x1d2f0,%eax
   11682:	eb 25                	jmp    116a9 <task_next_run+0x43>
    }
    
    list_node_t * task_node = list_first(&task_manager.ready_list);
   11684:	68 04 d0 01 00       	push   $0x1d004
   11689:	e8 83 f9 ff ff       	call   11011 <list_first>
   1168e:	83 c4 04             	add    $0x4,%esp
   11691:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return list_node_parent(task_node, task_t, run_node);
   11694:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   11698:	74 0a                	je     116a4 <task_next_run+0x3e>
   1169a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1169d:	2d b0 02 00 00       	sub    $0x2b0,%eax
   116a2:	eb 05                	jmp    116a9 <task_next_run+0x43>
   116a4:	b8 00 00 00 00       	mov    $0x0,%eax
}
   116a9:	c9                   	leave  
   116aa:	c3                   	ret    

000116ab <task_set_sleep>:


void task_set_sleep(task_t *task, uint32_t ticks) {
   116ab:	55                   	push   %ebp
   116ac:	89 e5                	mov    %esp,%ebp
   116ae:	83 ec 08             	sub    $0x8,%esp
    if (ticks <= 0) {
   116b1:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   116b5:	74 2d                	je     116e4 <task_set_sleep+0x39>
        return;
    }

    task->sleep_ticks = ticks;
   116b7:	8b 55 0c             	mov    0xc(%ebp),%edx
   116ba:	8b 45 08             	mov    0x8(%ebp),%eax
   116bd:	89 50 38             	mov    %edx,0x38(%eax)
    task->state = TASK_SLEEP;
   116c0:	8b 45 08             	mov    0x8(%ebp),%eax
   116c3:	c7 00 02 00 00 00    	movl   $0x2,(%eax)
    list_insert_last(&task_manager.sleep_list, &task->run_node);
   116c9:	8b 45 08             	mov    0x8(%ebp),%eax
   116cc:	05 b0 02 00 00       	add    $0x2b0,%eax
   116d1:	83 ec 08             	sub    $0x8,%esp
   116d4:	50                   	push   %eax
   116d5:	68 1c d0 01 00       	push   $0x1d01c
   116da:	e8 b7 71 00 00       	call   18896 <list_insert_last>
   116df:	83 c4 10             	add    $0x10,%esp
   116e2:	eb 01                	jmp    116e5 <task_set_sleep+0x3a>
        return;
   116e4:	90                   	nop
}
   116e5:	c9                   	leave  
   116e6:	c3                   	ret    

000116e7 <task_set_wakeup>:


void task_set_wakeup (task_t *task) {
   116e7:	55                   	push   %ebp
   116e8:	89 e5                	mov    %esp,%ebp
   116ea:	83 ec 08             	sub    $0x8,%esp
    list_remove(&task_manager.sleep_list, &task->run_node);
   116ed:	8b 45 08             	mov    0x8(%ebp),%eax
   116f0:	05 b0 02 00 00       	add    $0x2b0,%eax
   116f5:	83 ec 08             	sub    $0x8,%esp
   116f8:	50                   	push   %eax
   116f9:	68 1c d0 01 00       	push   $0x1d01c
   116fe:	e8 6f 72 00 00       	call   18972 <list_remove>
   11703:	83 c4 10             	add    $0x10,%esp
}
   11706:	90                   	nop
   11707:	c9                   	leave  
   11708:	c3                   	ret    

00011709 <task_current>:


task_t * task_current (void) {
   11709:	55                   	push   %ebp
   1170a:	89 e5                	mov    %esp,%ebp
    return task_manager.curr_task;
   1170c:	a1 00 d0 01 00       	mov    0x1d000,%eax
}
   11711:	5d                   	pop    %ebp
   11712:	c3                   	ret    

00011713 <task_file>:


file_t * task_file (int fd) {
   11713:	55                   	push   %ebp
   11714:	89 e5                	mov    %esp,%ebp
   11716:	83 ec 10             	sub    $0x10,%esp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   11719:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1171d:	78 1f                	js     1173e <task_file+0x2b>
   1171f:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   11723:	7f 19                	jg     1173e <task_file+0x2b>
        file_t * file = task_current()->file_table[fd];
   11725:	e8 df ff ff ff       	call   11709 <task_current>
   1172a:	89 c2                	mov    %eax,%edx
   1172c:	8b 45 08             	mov    0x8(%ebp),%eax
   1172f:	83 c0 10             	add    $0x10,%eax
   11732:	8b 44 82 04          	mov    0x4(%edx,%eax,4),%eax
   11736:	89 45 fc             	mov    %eax,-0x4(%ebp)
        return file;
   11739:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1173c:	eb 05                	jmp    11743 <task_file+0x30>
    }

    return (file_t *)0;
   1173e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11743:	c9                   	leave  
   11744:	c3                   	ret    

00011745 <task_alloc_fd>:

int task_alloc_fd (file_t * file) {
   11745:	55                   	push   %ebp
   11746:	89 e5                	mov    %esp,%ebp
   11748:	83 ec 10             	sub    $0x10,%esp
    task_t * task = task_current();
   1174b:	e8 b9 ff ff ff       	call   11709 <task_current>
   11750:	89 45 f8             	mov    %eax,-0x8(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11753:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   1175a:	eb 2f                	jmp    1178b <task_alloc_fd+0x46>
        file_t * p = task->file_table[i];
   1175c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1175f:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11762:	83 c2 10             	add    $0x10,%edx
   11765:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11769:	89 45 f4             	mov    %eax,-0xc(%ebp)
        if (p == (file_t *)0) {
   1176c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11770:	75 15                	jne    11787 <task_alloc_fd+0x42>
            task->file_table[i] = file;
   11772:	8b 45 f8             	mov    -0x8(%ebp),%eax
   11775:	8b 55 fc             	mov    -0x4(%ebp),%edx
   11778:	8d 4a 10             	lea    0x10(%edx),%ecx
   1177b:	8b 55 08             	mov    0x8(%ebp),%edx
   1177e:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
            return i;
   11782:	8b 45 fc             	mov    -0x4(%ebp),%eax
   11785:	eb 0f                	jmp    11796 <task_alloc_fd+0x51>
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11787:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   1178b:	83 7d fc 7f          	cmpl   $0x7f,-0x4(%ebp)
   1178f:	7e cb                	jle    1175c <task_alloc_fd+0x17>
        }
    }

    return -1;
   11791:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11796:	c9                   	leave  
   11797:	c3                   	ret    

00011798 <task_remove_fd>:


void task_remove_fd (int fd) {
   11798:	55                   	push   %ebp
   11799:	89 e5                	mov    %esp,%ebp
    if ((fd >= 0) && (fd < TASK_OFILE_NR)) {
   1179b:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1179f:	78 1b                	js     117bc <task_remove_fd+0x24>
   117a1:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   117a5:	7f 15                	jg     117bc <task_remove_fd+0x24>
        task_current()->file_table[fd] = (file_t *)0;
   117a7:	e8 5d ff ff ff       	call   11709 <task_current>
   117ac:	89 c2                	mov    %eax,%edx
   117ae:	8b 45 08             	mov    0x8(%ebp),%eax
   117b1:	83 c0 10             	add    $0x10,%eax
   117b4:	c7 44 82 04 00 00 00 	movl   $0x0,0x4(%edx,%eax,4)
   117bb:	00 
    }
}
   117bc:	90                   	nop
   117bd:	5d                   	pop    %ebp
   117be:	c3                   	ret    

000117bf <sys_yield>:


int sys_yield (void) {
   117bf:	55                   	push   %ebp
   117c0:	89 e5                	mov    %esp,%ebp
   117c2:	83 ec 18             	sub    $0x18,%esp
    irq_state_t state = irq_enter_protection();
   117c5:	e8 44 19 00 00       	call   1310e <irq_enter_protection>
   117ca:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&task_manager.ready_list) > 1) {
   117cd:	83 ec 0c             	sub    $0xc,%esp
   117d0:	68 04 d0 01 00       	push   $0x1d004
   117d5:	e8 2c f8 ff ff       	call   11006 <list_count>
   117da:	83 c4 10             	add    $0x10,%esp
   117dd:	83 f8 01             	cmp    $0x1,%eax
   117e0:	7e 29                	jle    1180b <sys_yield+0x4c>
        task_t * curr_task = task_current();
   117e2:	e8 22 ff ff ff       	call   11709 <task_current>
   117e7:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_set_block(curr_task);
   117ea:	83 ec 0c             	sub    $0xc,%esp
   117ed:	ff 75 f0             	pushl  -0x10(%ebp)
   117f0:	e8 46 fe ff ff       	call   1163b <task_set_block>
   117f5:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   117f8:	83 ec 0c             	sub    $0xc,%esp
   117fb:	ff 75 f0             	pushl  -0x10(%ebp)
   117fe:	e8 04 fe ff ff       	call   11607 <task_set_ready>
   11803:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   11806:	e8 15 00 00 00       	call   11820 <task_dispatch>
    }
    irq_leave_protection(state);
   1180b:	83 ec 0c             	sub    $0xc,%esp
   1180e:	ff 75 f4             	pushl  -0xc(%ebp)
   11811:	e8 10 19 00 00       	call   13126 <irq_leave_protection>
   11816:	83 c4 10             	add    $0x10,%esp

    return 0;
   11819:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1181e:	c9                   	leave  
   1181f:	c3                   	ret    

00011820 <task_dispatch>:


void task_dispatch (void) {
   11820:	55                   	push   %ebp
   11821:	89 e5                	mov    %esp,%ebp
   11823:	83 ec 18             	sub    $0x18,%esp
    task_t * to = task_next_run();
   11826:	e8 3b fe ff ff       	call   11666 <task_next_run>
   1182b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (to != task_manager.curr_task) {
   1182e:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11833:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   11836:	74 21                	je     11859 <task_dispatch+0x39>
        task_t * from = task_manager.curr_task;
   11838:	a1 00 d0 01 00       	mov    0x1d000,%eax
   1183d:	89 45 f0             	mov    %eax,-0x10(%ebp)

        task_manager.curr_task = to;
   11840:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11843:	a3 00 d0 01 00       	mov    %eax,0x1d000
        task_switch_from_to(from, to);
   11848:	83 ec 08             	sub    $0x8,%esp
   1184b:	ff 75 f4             	pushl  -0xc(%ebp)
   1184e:	ff 75 f0             	pushl  -0x10(%ebp)
   11851:	e8 ab fb ff ff       	call   11401 <task_switch_from_to>
   11856:	83 c4 10             	add    $0x10,%esp
    }
}
   11859:	90                   	nop
   1185a:	c9                   	leave  
   1185b:	c3                   	ret    

0001185c <task_time_tick>:


void task_time_tick (void) {
   1185c:	55                   	push   %ebp
   1185d:	89 e5                	mov    %esp,%ebp
   1185f:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   11862:	e8 a2 fe ff ff       	call   11709 <task_current>
   11867:	89 45 f0             	mov    %eax,-0x10(%ebp)

    irq_state_t state = irq_enter_protection();
   1186a:	e8 9f 18 00 00       	call   1310e <irq_enter_protection>
   1186f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (--curr_task->slice_ticks == 0) {
   11872:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11875:	8b 40 40             	mov    0x40(%eax),%eax
   11878:	8d 50 ff             	lea    -0x1(%eax),%edx
   1187b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1187e:	89 50 40             	mov    %edx,0x40(%eax)
   11881:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11884:	8b 40 40             	mov    0x40(%eax),%eax
   11887:	85 c0                	test   %eax,%eax
   11889:	75 28                	jne    118b3 <task_time_tick+0x57>

        curr_task->slice_ticks = curr_task->time_slice;
   1188b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1188e:	8b 50 3c             	mov    0x3c(%eax),%edx
   11891:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11894:	89 50 40             	mov    %edx,0x40(%eax)

        task_set_block(curr_task);
   11897:	83 ec 0c             	sub    $0xc,%esp
   1189a:	ff 75 f0             	pushl  -0x10(%ebp)
   1189d:	e8 99 fd ff ff       	call   1163b <task_set_block>
   118a2:	83 c4 10             	add    $0x10,%esp
        task_set_ready(curr_task);
   118a5:	83 ec 0c             	sub    $0xc,%esp
   118a8:	ff 75 f0             	pushl  -0x10(%ebp)
   118ab:	e8 57 fd ff ff       	call   11607 <task_set_ready>
   118b0:	83 c4 10             	add    $0x10,%esp
    }
    
    list_node_t * curr = list_first(&task_manager.sleep_list);
   118b3:	83 ec 0c             	sub    $0xc,%esp
   118b6:	68 1c d0 01 00       	push   $0x1d01c
   118bb:	e8 51 f7 ff ff       	call   11011 <list_first>
   118c0:	83 c4 10             	add    $0x10,%esp
   118c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   118c6:	eb 64                	jmp    1192c <task_time_tick+0xd0>
        list_node_t * next = list_node_next(curr);
   118c8:	83 ec 0c             	sub    $0xc,%esp
   118cb:	ff 75 f4             	pushl  -0xc(%ebp)
   118ce:	e8 28 f7 ff ff       	call   10ffb <list_node_next>
   118d3:	83 c4 10             	add    $0x10,%esp
   118d6:	89 45 e8             	mov    %eax,-0x18(%ebp)

        task_t * task = list_node_parent(curr, task_t, run_node);
   118d9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   118dd:	74 0a                	je     118e9 <task_time_tick+0x8d>
   118df:	8b 45 f4             	mov    -0xc(%ebp),%eax
   118e2:	2d b0 02 00 00       	sub    $0x2b0,%eax
   118e7:	eb 05                	jmp    118ee <task_time_tick+0x92>
   118e9:	b8 00 00 00 00       	mov    $0x0,%eax
   118ee:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (--task->sleep_ticks == 0) {
   118f1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118f4:	8b 40 38             	mov    0x38(%eax),%eax
   118f7:	8d 50 ff             	lea    -0x1(%eax),%edx
   118fa:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   118fd:	89 50 38             	mov    %edx,0x38(%eax)
   11900:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11903:	8b 40 38             	mov    0x38(%eax),%eax
   11906:	85 c0                	test   %eax,%eax
   11908:	75 1c                	jne    11926 <task_time_tick+0xca>
            task_set_wakeup(task);
   1190a:	83 ec 0c             	sub    $0xc,%esp
   1190d:	ff 75 e4             	pushl  -0x1c(%ebp)
   11910:	e8 d2 fd ff ff       	call   116e7 <task_set_wakeup>
   11915:	83 c4 10             	add    $0x10,%esp
            task_set_ready(task);
   11918:	83 ec 0c             	sub    $0xc,%esp
   1191b:	ff 75 e4             	pushl  -0x1c(%ebp)
   1191e:	e8 e4 fc ff ff       	call   11607 <task_set_ready>
   11923:	83 c4 10             	add    $0x10,%esp
        }
        curr = next;
   11926:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11929:	89 45 f4             	mov    %eax,-0xc(%ebp)
    while (curr) {
   1192c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   11930:	75 96                	jne    118c8 <task_time_tick+0x6c>
    }

    task_dispatch();
   11932:	e8 e9 fe ff ff       	call   11820 <task_dispatch>
    irq_leave_protection(state);
   11937:	83 ec 0c             	sub    $0xc,%esp
   1193a:	ff 75 ec             	pushl  -0x14(%ebp)
   1193d:	e8 e4 17 00 00       	call   13126 <irq_leave_protection>
   11942:	83 c4 10             	add    $0x10,%esp
}
   11945:	90                   	nop
   11946:	c9                   	leave  
   11947:	c3                   	ret    

00011948 <alloc_task>:

static task_t * alloc_task (void) {
   11948:	55                   	push   %ebp
   11949:	89 e5                	mov    %esp,%ebp
   1194b:	83 ec 18             	sub    $0x18,%esp
    task_t * task = (task_t *)0;
   1194e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&task_table_mutex);
   11955:	83 ec 0c             	sub    $0xc,%esp
   11958:	68 c0 49 03 00       	push   $0x349c0
   1195d:	e8 fd 63 00 00       	call   17d5f <mutex_lock>
   11962:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_NR; i++) {
   11965:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   1196c:	eb 28                	jmp    11996 <alloc_task+0x4e>
        task_t * curr = task_table + i;
   1196e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11971:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   11977:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   1197c:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (curr->name[0] == 0) {
   1197f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11982:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   11986:	84 c0                	test   %al,%al
   11988:	75 08                	jne    11992 <alloc_task+0x4a>
            task = curr;
   1198a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1198d:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   11990:	eb 0a                	jmp    1199c <alloc_task+0x54>
    for (int i = 0; i < TASK_NR; i++) {
   11992:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11996:	83 7d f0 7f          	cmpl   $0x7f,-0x10(%ebp)
   1199a:	7e d2                	jle    1196e <alloc_task+0x26>
        }
    }
    mutex_unlock(&task_table_mutex);
   1199c:	83 ec 0c             	sub    $0xc,%esp
   1199f:	68 c0 49 03 00       	push   $0x349c0
   119a4:	e8 4d 64 00 00       	call   17df6 <mutex_unlock>
   119a9:	83 c4 10             	add    $0x10,%esp

    return task;
   119ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   119af:	c9                   	leave  
   119b0:	c3                   	ret    

000119b1 <free_task>:


static void free_task (task_t * task) {
   119b1:	55                   	push   %ebp
   119b2:	89 e5                	mov    %esp,%ebp
   119b4:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&task_table_mutex);
   119b7:	83 ec 0c             	sub    $0xc,%esp
   119ba:	68 c0 49 03 00       	push   $0x349c0
   119bf:	e8 9b 63 00 00       	call   17d5f <mutex_lock>
   119c4:	83 c4 10             	add    $0x10,%esp
    task->name[0] = 0;
   119c7:	8b 45 08             	mov    0x8(%ebp),%eax
   119ca:	c6 40 04 00          	movb   $0x0,0x4(%eax)
    mutex_unlock(&task_table_mutex);
   119ce:	83 ec 0c             	sub    $0xc,%esp
   119d1:	68 c0 49 03 00       	push   $0x349c0
   119d6:	e8 1b 64 00 00       	call   17df6 <mutex_unlock>
   119db:	83 c4 10             	add    $0x10,%esp
}
   119de:	90                   	nop
   119df:	c9                   	leave  
   119e0:	c3                   	ret    

000119e1 <sys_msleep>:


void sys_msleep (uint32_t ms) {
   119e1:	55                   	push   %ebp
   119e2:	89 e5                	mov    %esp,%ebp
   119e4:	83 ec 18             	sub    $0x18,%esp
    if (ms < OS_TICK_MS) {
   119e7:	83 7d 08 09          	cmpl   $0x9,0x8(%ebp)
   119eb:	77 07                	ja     119f4 <sys_msleep+0x13>
        ms = OS_TICK_MS;
   119ed:	c7 45 08 0a 00 00 00 	movl   $0xa,0x8(%ebp)
    }

    irq_state_t state = irq_enter_protection();
   119f4:	e8 15 17 00 00       	call   1310e <irq_enter_protection>
   119f9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_set_block(task_manager.curr_task);
   119fc:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a01:	83 ec 0c             	sub    $0xc,%esp
   11a04:	50                   	push   %eax
   11a05:	e8 31 fc ff ff       	call   1163b <task_set_block>
   11a0a:	83 c4 10             	add    $0x10,%esp
    task_set_sleep(task_manager.curr_task, (ms + (OS_TICK_MS - 1))/ OS_TICK_MS);
   11a0d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a10:	83 c0 09             	add    $0x9,%eax
   11a13:	ba cd cc cc cc       	mov    $0xcccccccd,%edx
   11a18:	f7 e2                	mul    %edx
   11a1a:	c1 ea 03             	shr    $0x3,%edx
   11a1d:	a1 00 d0 01 00       	mov    0x1d000,%eax
   11a22:	83 ec 08             	sub    $0x8,%esp
   11a25:	52                   	push   %edx
   11a26:	50                   	push   %eax
   11a27:	e8 7f fc ff ff       	call   116ab <task_set_sleep>
   11a2c:	83 c4 10             	add    $0x10,%esp
    
    task_dispatch();
   11a2f:	e8 ec fd ff ff       	call   11820 <task_dispatch>

    irq_leave_protection(state);
   11a34:	83 ec 0c             	sub    $0xc,%esp
   11a37:	ff 75 f4             	pushl  -0xc(%ebp)
   11a3a:	e8 e7 16 00 00       	call   13126 <irq_leave_protection>
   11a3f:	83 c4 10             	add    $0x10,%esp
}
   11a42:	90                   	nop
   11a43:	c9                   	leave  
   11a44:	c3                   	ret    

00011a45 <copy_opened_files>:



static void copy_opened_files(task_t * child_task) {
   11a45:	55                   	push   %ebp
   11a46:	89 e5                	mov    %esp,%ebp
   11a48:	83 ec 18             	sub    $0x18,%esp
    task_t * parent = task_current();
   11a4b:	e8 b9 fc ff ff       	call   11709 <task_current>
   11a50:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a53:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   11a5a:	eb 42                	jmp    11a9e <copy_opened_files+0x59>
        file_t * file = parent->file_table[i];
   11a5c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a5f:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a62:	83 c2 10             	add    $0x10,%edx
   11a65:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   11a69:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (file) {
   11a6c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11a70:	74 28                	je     11a9a <copy_opened_files+0x55>
            file_inc_ref(file);
   11a72:	83 ec 0c             	sub    $0xc,%esp
   11a75:	ff 75 ec             	pushl  -0x14(%ebp)
   11a78:	e8 fd 54 00 00       	call   16f7a <file_inc_ref>
   11a7d:	83 c4 10             	add    $0x10,%esp
            child_task->file_table[i] = parent->file_table[i];
   11a80:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11a83:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11a86:	83 c2 10             	add    $0x10,%edx
   11a89:	8b 54 90 04          	mov    0x4(%eax,%edx,4),%edx
   11a8d:	8b 45 08             	mov    0x8(%ebp),%eax
   11a90:	8b 4d f4             	mov    -0xc(%ebp),%ecx
   11a93:	83 c1 10             	add    $0x10,%ecx
   11a96:	89 54 88 04          	mov    %edx,0x4(%eax,%ecx,4)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   11a9a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   11a9e:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   11aa2:	7e b8                	jle    11a5c <copy_opened_files+0x17>
        }
    }
}
   11aa4:	90                   	nop
   11aa5:	c9                   	leave  
   11aa6:	c3                   	ret    

00011aa7 <sys_fork>:


int sys_fork (void) {
   11aa7:	55                   	push   %ebp
   11aa8:	89 e5                	mov    %esp,%ebp
   11aaa:	83 ec 28             	sub    $0x28,%esp
    task_t * parent_task = task_current();
   11aad:	e8 57 fc ff ff       	call   11709 <task_current>
   11ab2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * child_task = alloc_task();
   11ab5:	e8 8e fe ff ff       	call   11948 <alloc_task>
   11aba:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (child_task == (task_t *)0) {
   11abd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11ac1:	0f 84 4f 01 00 00    	je     11c16 <sys_fork+0x16f>
        goto fork_failed;
    }

    syscall_frame_t * frame = (syscall_frame_t *)(parent_task->tss.esp0 - sizeof(syscall_frame_t));
   11ac7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11aca:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   11ad0:	83 e8 58             	sub    $0x58,%eax
   11ad3:	89 45 ec             	mov    %eax,-0x14(%ebp)

    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
                        frame->esp + sizeof(uint32_t)*SYSCALL_PARAM_COUNT);
   11ad6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ad9:	8b 40 50             	mov    0x50(%eax),%eax
   11adc:	8d 50 14             	lea    0x14(%eax),%edx
    int err = task_init(child_task,  parent_task->name, 0, frame->eip,
   11adf:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ae2:	8b 40 34             	mov    0x34(%eax),%eax
   11ae5:	89 c1                	mov    %eax,%ecx
   11ae7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11aea:	83 c0 04             	add    $0x4,%eax
   11aed:	83 ec 0c             	sub    $0xc,%esp
   11af0:	52                   	push   %edx
   11af1:	51                   	push   %ecx
   11af2:	6a 00                	push   $0x0
   11af4:	50                   	push   %eax
   11af5:	ff 75 f0             	pushl  -0x10(%ebp)
   11af8:	e8 fc f6 ff ff       	call   111f9 <task_init>
   11afd:	83 c4 20             	add    $0x20,%esp
   11b00:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   11b03:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   11b07:	0f 88 0c 01 00 00    	js     11c19 <sys_fork+0x172>
        goto fork_failed;
    }
    copy_opened_files(child_task);
   11b0d:	83 ec 0c             	sub    $0xc,%esp
   11b10:	ff 75 f0             	pushl  -0x10(%ebp)
   11b13:	e8 2d ff ff ff       	call   11a45 <copy_opened_files>
   11b18:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &child_task->tss;
   11b1b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11b1e:	05 44 02 00 00       	add    $0x244,%eax
   11b23:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    tss->eax = 0;                       
   11b26:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b29:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    tss->ebx = frame->ebx;
   11b30:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b33:	8b 40 24             	mov    0x24(%eax),%eax
   11b36:	89 c2                	mov    %eax,%edx
   11b38:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b3b:	89 50 34             	mov    %edx,0x34(%eax)
    tss->ecx = frame->ecx;
   11b3e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b41:	8b 40 2c             	mov    0x2c(%eax),%eax
   11b44:	89 c2                	mov    %eax,%edx
   11b46:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b49:	89 50 2c             	mov    %edx,0x2c(%eax)
    tss->edx = frame->edx;
   11b4c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b4f:	8b 40 28             	mov    0x28(%eax),%eax
   11b52:	89 c2                	mov    %eax,%edx
   11b54:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b57:	89 50 30             	mov    %edx,0x30(%eax)
    tss->esi = frame->esi;
   11b5a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b5d:	8b 40 18             	mov    0x18(%eax),%eax
   11b60:	89 c2                	mov    %eax,%edx
   11b62:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b65:	89 50 40             	mov    %edx,0x40(%eax)
    tss->edi = frame->edi;
   11b68:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b6b:	8b 40 14             	mov    0x14(%eax),%eax
   11b6e:	89 c2                	mov    %eax,%edx
   11b70:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b73:	89 50 44             	mov    %edx,0x44(%eax)
    tss->ebp = frame->ebp;
   11b76:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b79:	8b 40 1c             	mov    0x1c(%eax),%eax
   11b7c:	89 c2                	mov    %eax,%edx
   11b7e:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b81:	89 50 3c             	mov    %edx,0x3c(%eax)

    tss->cs = frame->cs;
   11b84:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b87:	8b 40 38             	mov    0x38(%eax),%eax
   11b8a:	89 c2                	mov    %eax,%edx
   11b8c:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b8f:	89 50 4c             	mov    %edx,0x4c(%eax)
    tss->ds = frame->ds;
   11b92:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11b95:	8b 40 10             	mov    0x10(%eax),%eax
   11b98:	89 c2                	mov    %eax,%edx
   11b9a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11b9d:	89 50 54             	mov    %edx,0x54(%eax)
    tss->es = frame->es;
   11ba0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11ba3:	8b 40 0c             	mov    0xc(%eax),%eax
   11ba6:	89 c2                	mov    %eax,%edx
   11ba8:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bab:	89 50 48             	mov    %edx,0x48(%eax)
    tss->fs = frame->fs;
   11bae:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bb1:	8b 40 08             	mov    0x8(%eax),%eax
   11bb4:	89 c2                	mov    %eax,%edx
   11bb6:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bb9:	89 50 58             	mov    %edx,0x58(%eax)
    tss->gs = frame->gs;
   11bbc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bbf:	8b 40 04             	mov    0x4(%eax),%eax
   11bc2:	89 c2                	mov    %eax,%edx
   11bc4:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bc7:	89 50 5c             	mov    %edx,0x5c(%eax)
    tss->eflags = frame->eflags;
   11bca:	8b 45 ec             	mov    -0x14(%ebp),%eax
   11bcd:	8b 00                	mov    (%eax),%eax
   11bcf:	89 c2                	mov    %eax,%edx
   11bd1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11bd4:	89 50 24             	mov    %edx,0x24(%eax)

    child_task->parent = parent_task;
   11bd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bda:	8b 55 f4             	mov    -0xc(%ebp),%edx
   11bdd:	89 50 28             	mov    %edx,0x28(%eax)

    if ((child_task->tss.cr3 = memory_copy_uvm(parent_task->tss.cr3)) < 0) {
   11be0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11be3:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   11be9:	83 ec 0c             	sub    $0xc,%esp
   11bec:	50                   	push   %eax
   11bed:	e8 51 ed ff ff       	call   10943 <memory_copy_uvm>
   11bf2:	83 c4 10             	add    $0x10,%esp
   11bf5:	89 c2                	mov    %eax,%edx
   11bf7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11bfa:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        goto fork_failed;
    }

    task_start(child_task);
   11c00:	83 ec 0c             	sub    $0xc,%esp
   11c03:	ff 75 f0             	pushl  -0x10(%ebp)
   11c06:	e8 3a f7 ff ff       	call   11345 <task_start>
   11c0b:	83 c4 10             	add    $0x10,%esp
    return child_task->pid;
   11c0e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11c11:	8b 40 24             	mov    0x24(%eax),%eax
   11c14:	eb 2b                	jmp    11c41 <sys_fork+0x19a>
        goto fork_failed;
   11c16:	90                   	nop
   11c17:	eb 01                	jmp    11c1a <sys_fork+0x173>
        goto fork_failed;
   11c19:	90                   	nop
fork_failed:
    if (child_task) {
   11c1a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11c1e:	74 1c                	je     11c3c <sys_fork+0x195>
        task_uninit (child_task);
   11c20:	83 ec 0c             	sub    $0xc,%esp
   11c23:	ff 75 f0             	pushl  -0x10(%ebp)
   11c26:	e8 47 f7 ff ff       	call   11372 <task_uninit>
   11c2b:	83 c4 10             	add    $0x10,%esp
        free_task(child_task);
   11c2e:	83 ec 0c             	sub    $0xc,%esp
   11c31:	ff 75 f0             	pushl  -0x10(%ebp)
   11c34:	e8 78 fd ff ff       	call   119b1 <free_task>
   11c39:	83 c4 10             	add    $0x10,%esp
    }
    return -1;
   11c3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   11c41:	c9                   	leave  
   11c42:	c3                   	ret    

00011c43 <load_phdr>:

static int load_phdr(int file, Elf32_Phdr * phdr, uint32_t page_dir) {
   11c43:	55                   	push   %ebp
   11c44:	89 e5                	mov    %esp,%ebp
   11c46:	83 ec 28             	sub    $0x28,%esp
    ASSERT((phdr->p_vaddr & (MEM_PAGE_SIZE - 1)) == 0);
   11c49:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c4c:	8b 40 08             	mov    0x8(%eax),%eax
   11c4f:	25 ff 0f 00 00       	and    $0xfff,%eax
   11c54:	85 c0                	test   %eax,%eax
   11c56:	74 1c                	je     11c74 <load_phdr+0x31>
   11c58:	68 1c 8f 01 00       	push   $0x18f1c
   11c5d:	68 30 90 01 00       	push   $0x19030
   11c62:	68 bb 01 00 00       	push   $0x1bb
   11c67:	68 9c 8e 01 00       	push   $0x18e9c
   11c6c:	e8 58 6b 00 00       	call   187c9 <panic>
   11c71:	83 c4 10             	add    $0x10,%esp

    int err = memory_alloc_for_page_dir(page_dir, phdr->p_vaddr, phdr->p_memsz, PTE_P | PTE_U | PTE_W);
   11c74:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c77:	8b 50 14             	mov    0x14(%eax),%edx
   11c7a:	8b 45 0c             	mov    0xc(%ebp),%eax
   11c7d:	8b 40 08             	mov    0x8(%eax),%eax
   11c80:	6a 07                	push   $0x7
   11c82:	52                   	push   %edx
   11c83:	50                   	push   %eax
   11c84:	ff 75 10             	pushl  0x10(%ebp)
   11c87:	e8 d5 ee ff ff       	call   10b61 <memory_alloc_for_page_dir>
   11c8c:	83 c4 10             	add    $0x10,%esp
   11c8f:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   11c92:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11c96:	79 1a                	jns    11cb2 <load_phdr+0x6f>
        log_printf("no memory");
   11c98:	83 ec 0c             	sub    $0xc,%esp
   11c9b:	68 47 8f 01 00       	push   $0x18f47
   11ca0:	e8 81 6d 00 00       	call   18a26 <log_printf>
   11ca5:	83 c4 10             	add    $0x10,%esp
        return -1;
   11ca8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11cad:	e9 b8 00 00 00       	jmp    11d6a <load_phdr+0x127>
    }

    if (sys_lseek(file, phdr->p_offset, 0) < 0) {
   11cb2:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cb5:	8b 40 04             	mov    0x4(%eax),%eax
   11cb8:	83 ec 04             	sub    $0x4,%esp
   11cbb:	6a 00                	push   $0x0
   11cbd:	50                   	push   %eax
   11cbe:	ff 75 08             	pushl  0x8(%ebp)
   11cc1:	e8 ab 5b 00 00       	call   17871 <sys_lseek>
   11cc6:	83 c4 10             	add    $0x10,%esp
   11cc9:	85 c0                	test   %eax,%eax
   11ccb:	79 1a                	jns    11ce7 <load_phdr+0xa4>
        log_printf("read file failed");
   11ccd:	83 ec 0c             	sub    $0xc,%esp
   11cd0:	68 51 8f 01 00       	push   $0x18f51
   11cd5:	e8 4c 6d 00 00       	call   18a26 <log_printf>
   11cda:	83 c4 10             	add    $0x10,%esp
        return -1;
   11cdd:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11ce2:	e9 83 00 00 00       	jmp    11d6a <load_phdr+0x127>
    }

    uint32_t vaddr = phdr->p_vaddr;
   11ce7:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cea:	8b 40 08             	mov    0x8(%eax),%eax
   11ced:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t size = phdr->p_filesz;
   11cf0:	8b 45 0c             	mov    0xc(%ebp),%eax
   11cf3:	8b 40 10             	mov    0x10(%eax),%eax
   11cf6:	89 45 f0             	mov    %eax,-0x10(%ebp)
    while (size > 0) {
   11cf9:	eb 64                	jmp    11d5f <load_phdr+0x11c>
        int curr_size = (size > MEM_PAGE_SIZE) ? MEM_PAGE_SIZE : size;
   11cfb:	b8 00 10 00 00       	mov    $0x1000,%eax
   11d00:	81 7d f0 00 10 00 00 	cmpl   $0x1000,-0x10(%ebp)
   11d07:	0f 46 45 f0          	cmovbe -0x10(%ebp),%eax
   11d0b:	89 45 e8             	mov    %eax,-0x18(%ebp)

        uint32_t paddr = memory_get_paddr(page_dir, vaddr);
   11d0e:	83 ec 08             	sub    $0x8,%esp
   11d11:	ff 75 f4             	pushl  -0xc(%ebp)
   11d14:	ff 75 10             	pushl  0x10(%ebp)
   11d17:	e8 7c ed ff ff       	call   10a98 <memory_get_paddr>
   11d1c:	83 c4 10             	add    $0x10,%esp
   11d1f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

        if (sys_read(file, (char *)paddr, curr_size) <  curr_size) {
   11d22:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   11d25:	83 ec 04             	sub    $0x4,%esp
   11d28:	ff 75 e8             	pushl  -0x18(%ebp)
   11d2b:	50                   	push   %eax
   11d2c:	ff 75 08             	pushl  0x8(%ebp)
   11d2f:	e8 b4 59 00 00       	call   176e8 <sys_read>
   11d34:	83 c4 10             	add    $0x10,%esp
   11d37:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   11d3a:	7e 17                	jle    11d53 <load_phdr+0x110>
            log_printf("read file failed");
   11d3c:	83 ec 0c             	sub    $0xc,%esp
   11d3f:	68 51 8f 01 00       	push   $0x18f51
   11d44:	e8 dd 6c 00 00       	call   18a26 <log_printf>
   11d49:	83 c4 10             	add    $0x10,%esp
            return -1;
   11d4c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   11d51:	eb 17                	jmp    11d6a <load_phdr+0x127>
        }

        size -= curr_size;
   11d53:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d56:	29 45 f0             	sub    %eax,-0x10(%ebp)
        vaddr += curr_size;
   11d59:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11d5c:	01 45 f4             	add    %eax,-0xc(%ebp)
    while (size > 0) {
   11d5f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   11d63:	75 96                	jne    11cfb <load_phdr+0xb8>
    }

    return 0;
   11d65:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11d6a:	c9                   	leave  
   11d6b:	c3                   	ret    

00011d6c <load_elf_file>:

static uint32_t load_elf_file (task_t * task, const char * name, uint32_t page_dir) {
   11d6c:	55                   	push   %ebp
   11d6d:	89 e5                	mov    %esp,%ebp
   11d6f:	83 ec 78             	sub    $0x78,%esp
    Elf32_Ehdr elf_hdr;
    Elf32_Phdr elf_phdr;

    int file = sys_open(name, 0);   
   11d72:	83 ec 08             	sub    $0x8,%esp
   11d75:	6a 00                	push   $0x0
   11d77:	ff 75 0c             	pushl  0xc(%ebp)
   11d7a:	e8 c5 56 00 00       	call   17444 <sys_open>
   11d7f:	83 c4 10             	add    $0x10,%esp
   11d82:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (file < 0) {
   11d85:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11d89:	79 18                	jns    11da3 <load_elf_file+0x37>
        log_printf("open file failed.%s", name);
   11d8b:	83 ec 08             	sub    $0x8,%esp
   11d8e:	ff 75 0c             	pushl  0xc(%ebp)
   11d91:	68 62 8f 01 00       	push   $0x18f62
   11d96:	e8 8b 6c 00 00       	call   18a26 <log_printf>
   11d9b:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11d9e:	e9 c1 01 00 00       	jmp    11f64 <load_elf_file+0x1f8>
    }

    int cnt = sys_read(file, (char *)&elf_hdr, sizeof(Elf32_Ehdr));
   11da3:	83 ec 04             	sub    $0x4,%esp
   11da6:	6a 34                	push   $0x34
   11da8:	8d 45 b0             	lea    -0x50(%ebp),%eax
   11dab:	50                   	push   %eax
   11dac:	ff 75 ec             	pushl  -0x14(%ebp)
   11daf:	e8 34 59 00 00       	call   176e8 <sys_read>
   11db4:	83 c4 10             	add    $0x10,%esp
   11db7:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (cnt < sizeof(Elf32_Ehdr)) {
   11dba:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11dbd:	83 f8 33             	cmp    $0x33,%eax
   11dc0:	77 18                	ja     11dda <load_elf_file+0x6e>
        log_printf("elf hdr too small. size=%d", cnt);
   11dc2:	83 ec 08             	sub    $0x8,%esp
   11dc5:	ff 75 e8             	pushl  -0x18(%ebp)
   11dc8:	68 76 8f 01 00       	push   $0x18f76
   11dcd:	e8 54 6c 00 00       	call   18a26 <log_printf>
   11dd2:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11dd5:	e9 8a 01 00 00       	jmp    11f64 <load_elf_file+0x1f8>
    }

    if ((elf_hdr.e_ident[0] != ELF_MAGIC) || (elf_hdr.e_ident[1] != 'E')
   11dda:	0f b6 45 b0          	movzbl -0x50(%ebp),%eax
   11dde:	3c 7f                	cmp    $0x7f,%al
   11de0:	75 18                	jne    11dfa <load_elf_file+0x8e>
   11de2:	0f b6 45 b1          	movzbl -0x4f(%ebp),%eax
   11de6:	3c 45                	cmp    $0x45,%al
   11de8:	75 10                	jne    11dfa <load_elf_file+0x8e>
        || (elf_hdr.e_ident[2] != 'L') || (elf_hdr.e_ident[3] != 'F')) {
   11dea:	0f b6 45 b2          	movzbl -0x4e(%ebp),%eax
   11dee:	3c 4c                	cmp    $0x4c,%al
   11df0:	75 08                	jne    11dfa <load_elf_file+0x8e>
   11df2:	0f b6 45 b3          	movzbl -0x4d(%ebp),%eax
   11df6:	3c 46                	cmp    $0x46,%al
   11df8:	74 15                	je     11e0f <load_elf_file+0xa3>
        log_printf("check elf indent failed.");
   11dfa:	83 ec 0c             	sub    $0xc,%esp
   11dfd:	68 91 8f 01 00       	push   $0x18f91
   11e02:	e8 1f 6c 00 00       	call   18a26 <log_printf>
   11e07:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e0a:	e9 55 01 00 00       	jmp    11f64 <load_elf_file+0x1f8>
    }

    if ((elf_hdr.e_type != ET_EXEC) || (elf_hdr.e_machine != ET_386) || (elf_hdr.e_entry == 0)) {
   11e0f:	0f b7 45 c0          	movzwl -0x40(%ebp),%eax
   11e13:	66 83 f8 02          	cmp    $0x2,%ax
   11e17:	75 11                	jne    11e2a <load_elf_file+0xbe>
   11e19:	0f b7 45 c2          	movzwl -0x3e(%ebp),%eax
   11e1d:	66 83 f8 03          	cmp    $0x3,%ax
   11e21:	75 07                	jne    11e2a <load_elf_file+0xbe>
   11e23:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11e26:	85 c0                	test   %eax,%eax
   11e28:	75 15                	jne    11e3f <load_elf_file+0xd3>
        log_printf("check elf type or entry failed.");
   11e2a:	83 ec 0c             	sub    $0xc,%esp
   11e2d:	68 ac 8f 01 00       	push   $0x18fac
   11e32:	e8 ef 6b 00 00       	call   18a26 <log_printf>
   11e37:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e3a:	e9 25 01 00 00       	jmp    11f64 <load_elf_file+0x1f8>
    }

    if ((elf_hdr.e_phentsize == 0) || (elf_hdr.e_phoff == 0)) {
   11e3f:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11e43:	66 85 c0             	test   %ax,%ax
   11e46:	74 07                	je     11e4f <load_elf_file+0xe3>
   11e48:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e4b:	85 c0                	test   %eax,%eax
   11e4d:	75 15                	jne    11e64 <load_elf_file+0xf8>
        log_printf("none programe header");
   11e4f:	83 ec 0c             	sub    $0xc,%esp
   11e52:	68 cc 8f 01 00       	push   $0x18fcc
   11e57:	e8 ca 6b 00 00       	call   18a26 <log_printf>
   11e5c:	83 c4 10             	add    $0x10,%esp
        goto load_failed;
   11e5f:	e9 00 01 00 00       	jmp    11f64 <load_elf_file+0x1f8>
    }

    uint32_t e_phoff = elf_hdr.e_phoff;
   11e64:	8b 45 cc             	mov    -0x34(%ebp),%eax
   11e67:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11e6a:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11e71:	e9 cb 00 00 00       	jmp    11f41 <load_elf_file+0x1d5>
        if (sys_lseek(file, e_phoff, 0) < 0) {
   11e76:	8b 45 f4             	mov    -0xc(%ebp),%eax
   11e79:	83 ec 04             	sub    $0x4,%esp
   11e7c:	6a 00                	push   $0x0
   11e7e:	50                   	push   %eax
   11e7f:	ff 75 ec             	pushl  -0x14(%ebp)
   11e82:	e8 ea 59 00 00       	call   17871 <sys_lseek>
   11e87:	83 c4 10             	add    $0x10,%esp
   11e8a:	85 c0                	test   %eax,%eax
   11e8c:	79 15                	jns    11ea3 <load_elf_file+0x137>
            log_printf("read file failed");
   11e8e:	83 ec 0c             	sub    $0xc,%esp
   11e91:	68 51 8f 01 00       	push   $0x18f51
   11e96:	e8 8b 6b 00 00       	call   18a26 <log_printf>
   11e9b:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11e9e:	e9 c1 00 00 00       	jmp    11f64 <load_elf_file+0x1f8>
        }

        cnt = sys_read(file, (char *)&elf_phdr, sizeof(Elf32_Phdr));
   11ea3:	83 ec 04             	sub    $0x4,%esp
   11ea6:	6a 20                	push   $0x20
   11ea8:	8d 45 90             	lea    -0x70(%ebp),%eax
   11eab:	50                   	push   %eax
   11eac:	ff 75 ec             	pushl  -0x14(%ebp)
   11eaf:	e8 34 58 00 00       	call   176e8 <sys_read>
   11eb4:	83 c4 10             	add    $0x10,%esp
   11eb7:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (cnt < sizeof(Elf32_Phdr)) {
   11eba:	8b 45 e8             	mov    -0x18(%ebp),%eax
   11ebd:	83 f8 1f             	cmp    $0x1f,%eax
   11ec0:	77 15                	ja     11ed7 <load_elf_file+0x16b>
            log_printf("read file failed");
   11ec2:	83 ec 0c             	sub    $0xc,%esp
   11ec5:	68 51 8f 01 00       	push   $0x18f51
   11eca:	e8 57 6b 00 00       	call   18a26 <log_printf>
   11ecf:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11ed2:	e9 8d 00 00 00       	jmp    11f64 <load_elf_file+0x1f8>
        }

        if ((elf_phdr.p_type != PT_LOAD) || (elf_phdr.p_vaddr < MEMORY_TASK_BASE)) {
   11ed7:	8b 45 90             	mov    -0x70(%ebp),%eax
   11eda:	83 f8 01             	cmp    $0x1,%eax
   11edd:	75 53                	jne    11f32 <load_elf_file+0x1c6>
   11edf:	8b 45 98             	mov    -0x68(%ebp),%eax
   11ee2:	85 c0                	test   %eax,%eax
   11ee4:	79 4c                	jns    11f32 <load_elf_file+0x1c6>
           continue;
        }

        int err = load_phdr(file, &elf_phdr, page_dir);
   11ee6:	83 ec 04             	sub    $0x4,%esp
   11ee9:	ff 75 10             	pushl  0x10(%ebp)
   11eec:	8d 45 90             	lea    -0x70(%ebp),%eax
   11eef:	50                   	push   %eax
   11ef0:	ff 75 ec             	pushl  -0x14(%ebp)
   11ef3:	e8 4b fd ff ff       	call   11c43 <load_phdr>
   11ef8:	83 c4 10             	add    $0x10,%esp
   11efb:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   11efe:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   11f02:	79 12                	jns    11f16 <load_elf_file+0x1aa>
            log_printf("load program hdr failed");
   11f04:	83 ec 0c             	sub    $0xc,%esp
   11f07:	68 e1 8f 01 00       	push   $0x18fe1
   11f0c:	e8 15 6b 00 00       	call   18a26 <log_printf>
   11f11:	83 c4 10             	add    $0x10,%esp
            goto load_failed;
   11f14:	eb 4e                	jmp    11f64 <load_elf_file+0x1f8>
        }

        task->heap_start = elf_phdr.p_vaddr + elf_phdr.p_memsz;
   11f16:	8b 55 98             	mov    -0x68(%ebp),%edx
   11f19:	8b 45 a4             	mov    -0x5c(%ebp),%eax
   11f1c:	01 c2                	add    %eax,%edx
   11f1e:	8b 45 08             	mov    0x8(%ebp),%eax
   11f21:	89 50 2c             	mov    %edx,0x2c(%eax)
        task->heap_end = task->heap_start;
   11f24:	8b 45 08             	mov    0x8(%ebp),%eax
   11f27:	8b 50 2c             	mov    0x2c(%eax),%edx
   11f2a:	8b 45 08             	mov    0x8(%ebp),%eax
   11f2d:	89 50 30             	mov    %edx,0x30(%eax)
   11f30:	eb 01                	jmp    11f33 <load_elf_file+0x1c7>
           continue;
   11f32:	90                   	nop
    for (int i = 0; i < elf_hdr.e_phnum; i++, e_phoff += elf_hdr.e_phentsize) {
   11f33:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   11f37:	0f b7 45 da          	movzwl -0x26(%ebp),%eax
   11f3b:	0f b7 c0             	movzwl %ax,%eax
   11f3e:	01 45 f4             	add    %eax,-0xc(%ebp)
   11f41:	0f b7 45 dc          	movzwl -0x24(%ebp),%eax
   11f45:	0f b7 c0             	movzwl %ax,%eax
   11f48:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   11f4b:	0f 8c 25 ff ff ff    	jl     11e76 <load_elf_file+0x10a>
   }

    sys_close(file);
   11f51:	83 ec 0c             	sub    $0xc,%esp
   11f54:	ff 75 ec             	pushl  -0x14(%ebp)
   11f57:	e8 aa 59 00 00       	call   17906 <sys_close>
   11f5c:	83 c4 10             	add    $0x10,%esp
    return elf_hdr.e_entry;
   11f5f:	8b 45 c8             	mov    -0x38(%ebp),%eax
   11f62:	eb 19                	jmp    11f7d <load_elf_file+0x211>

load_failed:
    if (file >= 0) {
   11f64:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11f68:	78 0e                	js     11f78 <load_elf_file+0x20c>
        sys_close(file);
   11f6a:	83 ec 0c             	sub    $0xc,%esp
   11f6d:	ff 75 ec             	pushl  -0x14(%ebp)
   11f70:	e8 91 59 00 00       	call   17906 <sys_close>
   11f75:	83 c4 10             	add    $0x10,%esp
    }

    return 0;
   11f78:	b8 00 00 00 00       	mov    $0x0,%eax
}
   11f7d:	c9                   	leave  
   11f7e:	c3                   	ret    

00011f7f <copy_args>:

static int copy_args (char * to, uint32_t page_dir, int argc, char **argv) {
   11f7f:	55                   	push   %ebp
   11f80:	89 e5                	mov    %esp,%ebp
   11f82:	83 ec 38             	sub    $0x38,%esp
    task_args_t task_args;
    task_args.argc = argc;
   11f85:	8b 45 10             	mov    0x10(%ebp),%eax
   11f88:	89 45 d8             	mov    %eax,-0x28(%ebp)
    task_args.argv = (char **)(to + sizeof(task_args_t));
   11f8b:	8b 45 08             	mov    0x8(%ebp),%eax
   11f8e:	83 c0 0c             	add    $0xc,%eax
   11f91:	89 45 dc             	mov    %eax,-0x24(%ebp)

    char * dest_arg = to + sizeof(task_args_t) + sizeof(char *) * (argc + 1);   
   11f94:	8b 45 10             	mov    0x10(%ebp),%eax
   11f97:	83 c0 04             	add    $0x4,%eax
   11f9a:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11fa1:	8b 45 08             	mov    0x8(%ebp),%eax
   11fa4:	01 d0                	add    %edx,%eax
   11fa6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    
    char ** dest_argv_tb = (char **)memory_get_paddr(page_dir, (uint32_t)(to + sizeof(task_args_t)));
   11fa9:	8b 45 08             	mov    0x8(%ebp),%eax
   11fac:	83 c0 0c             	add    $0xc,%eax
   11faf:	83 ec 08             	sub    $0x8,%esp
   11fb2:	50                   	push   %eax
   11fb3:	ff 75 0c             	pushl  0xc(%ebp)
   11fb6:	e8 dd ea ff ff       	call   10a98 <memory_get_paddr>
   11fbb:	83 c4 10             	add    $0x10,%esp
   11fbe:	89 45 ec             	mov    %eax,-0x14(%ebp)
    ASSERT(dest_argv_tb != 0);
   11fc1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   11fc5:	75 1c                	jne    11fe3 <copy_args+0x64>
   11fc7:	68 f9 8f 01 00       	push   $0x18ff9
   11fcc:	68 3c 90 01 00       	push   $0x1903c
   11fd1:	68 29 02 00 00       	push   $0x229
   11fd6:	68 9c 8e 01 00       	push   $0x18e9c
   11fdb:	e8 e9 67 00 00       	call   187c9 <panic>
   11fe0:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < argc; i++) {
   11fe3:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   11fea:	e9 82 00 00 00       	jmp    12071 <copy_args+0xf2>
        char * from = argv[i];
   11fef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   11ff2:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   11ff9:	8b 45 14             	mov    0x14(%ebp),%eax
   11ffc:	01 d0                	add    %edx,%eax
   11ffe:	8b 00                	mov    (%eax),%eax
   12000:	89 45 e8             	mov    %eax,-0x18(%ebp)
        int len = kernel_strlen(from) + 1;   
   12003:	83 ec 0c             	sub    $0xc,%esp
   12006:	ff 75 e8             	pushl  -0x18(%ebp)
   12009:	e8 66 63 00 00       	call   18374 <kernel_strlen>
   1200e:	83 c4 10             	add    $0x10,%esp
   12011:	83 c0 01             	add    $0x1,%eax
   12014:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = memory_copy_uvm_data((uint32_t)dest_arg, page_dir, (uint32_t)from, len);
   12017:	8b 4d e4             	mov    -0x1c(%ebp),%ecx
   1201a:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1201d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12020:	51                   	push   %ecx
   12021:	52                   	push   %edx
   12022:	ff 75 0c             	pushl  0xc(%ebp)
   12025:	50                   	push   %eax
   12026:	e8 b3 ea ff ff       	call   10ade <memory_copy_uvm_data>
   1202b:	83 c4 10             	add    $0x10,%esp
   1202e:	89 45 e0             	mov    %eax,-0x20(%ebp)
        ASSERT(err >= 0);
   12031:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12035:	79 1c                	jns    12053 <copy_args+0xd4>
   12037:	68 0b 90 01 00       	push   $0x1900b
   1203c:	68 3c 90 01 00       	push   $0x1903c
   12041:	68 2f 02 00 00       	push   $0x22f
   12046:	68 9c 8e 01 00       	push   $0x18e9c
   1204b:	e8 79 67 00 00       	call   187c9 <panic>
   12050:	83 c4 10             	add    $0x10,%esp

        dest_argv_tb[i] = dest_arg;
   12053:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12056:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1205d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12060:	01 c2                	add    %eax,%edx
   12062:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12065:	89 02                	mov    %eax,(%edx)

        dest_arg += len;
   12067:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1206a:	01 45 f4             	add    %eax,-0xc(%ebp)
    for (int i = 0; i < argc; i++) {
   1206d:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   12071:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12074:	3b 45 10             	cmp    0x10(%ebp),%eax
   12077:	0f 8c 72 ff ff ff    	jl     11fef <copy_args+0x70>
    }

    if (argc) {
   1207d:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   12081:	74 15                	je     12098 <copy_args+0x119>
        dest_argv_tb[argc] = '\0';
   12083:	8b 45 10             	mov    0x10(%ebp),%eax
   12086:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   1208d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12090:	01 d0                	add    %edx,%eax
   12092:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

    return memory_copy_uvm_data((uint32_t)to, page_dir, (uint32_t)&task_args, sizeof(task_args_t));
   12098:	8d 55 d4             	lea    -0x2c(%ebp),%edx
   1209b:	8b 45 08             	mov    0x8(%ebp),%eax
   1209e:	6a 0c                	push   $0xc
   120a0:	52                   	push   %edx
   120a1:	ff 75 0c             	pushl  0xc(%ebp)
   120a4:	50                   	push   %eax
   120a5:	e8 34 ea ff ff       	call   10ade <memory_copy_uvm_data>
   120aa:	83 c4 10             	add    $0x10,%esp
}
   120ad:	c9                   	leave  
   120ae:	c3                   	ret    

000120af <sys_execve>:

int sys_execve(char *name, char **argv, char **env) {
   120af:	55                   	push   %ebp
   120b0:	89 e5                	mov    %esp,%ebp
   120b2:	83 ec 28             	sub    $0x28,%esp
    task_t * task = task_current();
   120b5:	e8 4f f6 ff ff       	call   11709 <task_current>
   120ba:	89 45 f4             	mov    %eax,-0xc(%ebp)

    kernel_strncpy(task->name, get_file_name(name), TASK_NAME_SIZE);
   120bd:	83 ec 0c             	sub    $0xc,%esp
   120c0:	ff 75 08             	pushl  0x8(%ebp)
   120c3:	e8 af 61 00 00       	call   18277 <get_file_name>
   120c8:	83 c4 10             	add    $0x10,%esp
   120cb:	89 c2                	mov    %eax,%edx
   120cd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120d0:	83 c0 04             	add    $0x4,%eax
   120d3:	83 ec 04             	sub    $0x4,%esp
   120d6:	6a 20                	push   $0x20
   120d8:	52                   	push   %edx
   120d9:	50                   	push   %eax
   120da:	e8 25 62 00 00       	call   18304 <kernel_strncpy>
   120df:	83 c4 10             	add    $0x10,%esp

    uint32_t old_page_dir = task->tss.cr3;
   120e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   120e5:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   120eb:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t new_page_dir = memory_create_uvm();
   120ee:	e8 bc e6 ff ff       	call   107af <memory_create_uvm>
   120f3:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (!new_page_dir) {
   120f6:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   120fa:	0f 84 2d 01 00 00    	je     1222d <sys_execve+0x17e>
        goto exec_failed;
    }

    uint32_t entry = load_elf_file(task, name, new_page_dir);    
   12100:	83 ec 04             	sub    $0x4,%esp
   12103:	ff 75 ec             	pushl  -0x14(%ebp)
   12106:	ff 75 08             	pushl  0x8(%ebp)
   12109:	ff 75 f4             	pushl  -0xc(%ebp)
   1210c:	e8 5b fc ff ff       	call   11d6c <load_elf_file>
   12111:	83 c4 10             	add    $0x10,%esp
   12114:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (entry == 0) {
   12117:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1211b:	0f 84 0f 01 00 00    	je     12230 <sys_execve+0x181>
        goto exec_failed;
    }

    uint32_t stack_top = MEM_TASK_STACK_TOP - MEM_TASK_ARG_SIZE;    
   12121:	c7 45 e4 00 c0 ff df 	movl   $0xdfffc000,-0x1c(%ebp)
    int err = memory_alloc_for_page_dir(new_page_dir,
   12128:	6a 07                	push   $0x7
   1212a:	68 00 40 1f 00       	push   $0x1f4000
   1212f:	68 00 c0 e0 df       	push   $0xdfe0c000
   12134:	ff 75 ec             	pushl  -0x14(%ebp)
   12137:	e8 25 ea ff ff       	call   10b61 <memory_alloc_for_page_dir>
   1213c:	83 c4 10             	add    $0x10,%esp
   1213f:	89 45 e0             	mov    %eax,-0x20(%ebp)
                            MEM_TASK_STACK_TOP - MEM_TASK_STACK_SIZE,
                            MEM_TASK_STACK_SIZE, PTE_P | PTE_U | PTE_W);
    if (err < 0) {
   12142:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12146:	0f 88 e7 00 00 00    	js     12233 <sys_execve+0x184>
        goto exec_failed;
    }

    int argc = strings_count(argv);
   1214c:	83 ec 0c             	sub    $0xc,%esp
   1214f:	ff 75 0c             	pushl  0xc(%ebp)
   12152:	e8 f3 60 00 00       	call   1824a <strings_count>
   12157:	83 c4 10             	add    $0x10,%esp
   1215a:	89 45 dc             	mov    %eax,-0x24(%ebp)
    err = copy_args((char *)stack_top, new_page_dir, argc, argv);
   1215d:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   12160:	ff 75 0c             	pushl  0xc(%ebp)
   12163:	ff 75 dc             	pushl  -0x24(%ebp)
   12166:	ff 75 ec             	pushl  -0x14(%ebp)
   12169:	50                   	push   %eax
   1216a:	e8 10 fe ff ff       	call   11f7f <copy_args>
   1216f:	83 c4 10             	add    $0x10,%esp
   12172:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (err < 0) {
   12175:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   12179:	0f 88 b7 00 00 00    	js     12236 <sys_execve+0x187>
        goto exec_failed;
    }

    syscall_frame_t * frame = (syscall_frame_t *)(task->tss.esp0 - sizeof(syscall_frame_t));
   1217f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12182:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   12188:	83 e8 58             	sub    $0x58,%eax
   1218b:	89 45 d8             	mov    %eax,-0x28(%ebp)
    frame->eip = entry;
   1218e:	8b 55 e8             	mov    -0x18(%ebp),%edx
   12191:	8b 45 d8             	mov    -0x28(%ebp),%eax
   12194:	89 50 34             	mov    %edx,0x34(%eax)
    frame->eax = frame->ebx = frame->ecx = frame->edx = 0;
   12197:	8b 45 d8             	mov    -0x28(%ebp),%eax
   1219a:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
   121a1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121a4:	8b 50 28             	mov    0x28(%eax),%edx
   121a7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121aa:	89 50 2c             	mov    %edx,0x2c(%eax)
   121ad:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b0:	8b 50 2c             	mov    0x2c(%eax),%edx
   121b3:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121b6:	89 50 24             	mov    %edx,0x24(%eax)
   121b9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121bc:	8b 50 24             	mov    0x24(%eax),%edx
   121bf:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c2:	89 50 30             	mov    %edx,0x30(%eax)
    frame->esi = frame->edi = frame->ebp = 0;
   121c5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121c8:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
   121cf:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121d2:	8b 50 1c             	mov    0x1c(%eax),%edx
   121d5:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121d8:	89 50 14             	mov    %edx,0x14(%eax)
   121db:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121de:	8b 50 14             	mov    0x14(%eax),%edx
   121e1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121e4:	89 50 18             	mov    %edx,0x18(%eax)
    frame->eflags = EFLAGS_DEFAULT| EFLAGS_IF;  
   121e7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121ea:	c7 00 02 02 00 00    	movl   $0x202,(%eax)

    frame->esp = stack_top - sizeof(uint32_t)*SYSCALL_PARAM_COUNT;
   121f0:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   121f3:	83 e8 14             	sub    $0x14,%eax
   121f6:	89 c2                	mov    %eax,%edx
   121f8:	8b 45 d8             	mov    -0x28(%ebp),%eax
   121fb:	89 50 50             	mov    %edx,0x50(%eax)

    task->tss.cr3 = new_page_dir;
   121fe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12201:	8b 55 ec             	mov    -0x14(%ebp),%edx
   12204:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
    mmu_set_page_dir(new_page_dir);   
   1220a:	83 ec 0c             	sub    $0xc,%esp
   1220d:	ff 75 ec             	pushl  -0x14(%ebp)
   12210:	e8 06 ee ff ff       	call   1101b <mmu_set_page_dir>
   12215:	83 c4 10             	add    $0x10,%esp

    memory_destroy_uvm(old_page_dir);            
   12218:	83 ec 0c             	sub    $0xc,%esp
   1221b:	ff 75 f0             	pushl  -0x10(%ebp)
   1221e:	e8 11 e6 ff ff       	call   10834 <memory_destroy_uvm>
   12223:	83 c4 10             	add    $0x10,%esp

    return  0;
   12226:	b8 00 00 00 00       	mov    $0x0,%eax
   1222b:	eb 3d                	jmp    1226a <sys_execve+0x1bb>
        goto exec_failed;
   1222d:	90                   	nop
   1222e:	eb 07                	jmp    12237 <sys_execve+0x188>
        goto exec_failed;
   12230:	90                   	nop
   12231:	eb 04                	jmp    12237 <sys_execve+0x188>
        goto exec_failed;
   12233:	90                   	nop
   12234:	eb 01                	jmp    12237 <sys_execve+0x188>
        goto exec_failed;
   12236:	90                   	nop

exec_failed:   
    if (new_page_dir) {
   12237:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1223b:	74 28                	je     12265 <sys_execve+0x1b6>
        
        task->tss.cr3 = old_page_dir;
   1223d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12240:	8b 55 f0             	mov    -0x10(%ebp),%edx
   12243:	89 90 60 02 00 00    	mov    %edx,0x260(%eax)
        mmu_set_page_dir(old_page_dir);
   12249:	83 ec 0c             	sub    $0xc,%esp
   1224c:	ff 75 f0             	pushl  -0x10(%ebp)
   1224f:	e8 c7 ed ff ff       	call   1101b <mmu_set_page_dir>
   12254:	83 c4 10             	add    $0x10,%esp
        memory_destroy_uvm(new_page_dir);
   12257:	83 ec 0c             	sub    $0xc,%esp
   1225a:	ff 75 ec             	pushl  -0x14(%ebp)
   1225d:	e8 d2 e5 ff ff       	call   10834 <memory_destroy_uvm>
   12262:	83 c4 10             	add    $0x10,%esp
    }

    return -1;
   12265:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1226a:	c9                   	leave  
   1226b:	c3                   	ret    

0001226c <sys_getpid>:

int sys_getpid (void) {
   1226c:	55                   	push   %ebp
   1226d:	89 e5                	mov    %esp,%ebp
   1226f:	83 ec 10             	sub    $0x10,%esp
    task_t * curr_task = task_current();
   12272:	e8 92 f4 ff ff       	call   11709 <task_current>
   12277:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return curr_task->pid;
   1227a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1227d:	8b 40 24             	mov    0x24(%eax),%eax
}
   12280:	c9                   	leave  
   12281:	c3                   	ret    

00012282 <sys_wait>:



int sys_wait(int* status) {
   12282:	55                   	push   %ebp
   12283:	89 e5                	mov    %esp,%ebp
   12285:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   12288:	e8 7c f4 ff ff       	call   11709 <task_current>
   1228d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (;;) {
       
        mutex_lock(&task_table_mutex);
   12290:	83 ec 0c             	sub    $0xc,%esp
   12293:	68 c0 49 03 00       	push   $0x349c0
   12298:	e8 c2 5a 00 00       	call   17d5f <mutex_lock>
   1229d:	83 c4 10             	add    $0x10,%esp
        for (int i = 0; i < TASK_NR; i++) {
   122a0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   122a7:	e9 98 00 00 00       	jmp    12344 <sys_wait+0xc2>
            task_t * task = task_table + i;
   122ac:	8b 45 f4             	mov    -0xc(%ebp),%eax
   122af:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   122b5:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   122ba:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (task->parent != curr_task) {
   122bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122c0:	8b 40 28             	mov    0x28(%eax),%eax
   122c3:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   122c6:	75 77                	jne    1233f <sys_wait+0xbd>
                continue;
            }

            if (task->state == TASK_ZOMBIE) {
   122c8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122cb:	8b 00                	mov    (%eax),%eax
   122cd:	83 f8 05             	cmp    $0x5,%eax
   122d0:	75 6e                	jne    12340 <sys_wait+0xbe>
                int pid = task->pid;
   122d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122d5:	8b 40 24             	mov    0x24(%eax),%eax
   122d8:	89 45 e4             	mov    %eax,-0x1c(%ebp)

                *status = task->status;
   122db:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122de:	8b 50 34             	mov    0x34(%eax),%edx
   122e1:	8b 45 08             	mov    0x8(%ebp),%eax
   122e4:	89 10                	mov    %edx,(%eax)

                memory_destroy_uvm(task->tss.cr3);
   122e6:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122e9:	8b 80 60 02 00 00    	mov    0x260(%eax),%eax
   122ef:	83 ec 0c             	sub    $0xc,%esp
   122f2:	50                   	push   %eax
   122f3:	e8 3c e5 ff ff       	call   10834 <memory_destroy_uvm>
   122f8:	83 c4 10             	add    $0x10,%esp
                memory_free_page(task->tss.esp0 - MEM_PAGE_SIZE);
   122fb:	8b 45 e8             	mov    -0x18(%ebp),%eax
   122fe:	8b 80 48 02 00 00    	mov    0x248(%eax),%eax
   12304:	2d 00 10 00 00       	sub    $0x1000,%eax
   12309:	83 ec 0c             	sub    $0xc,%esp
   1230c:	50                   	push   %eax
   1230d:	e8 77 e9 ff ff       	call   10c89 <memory_free_page>
   12312:	83 c4 10             	add    $0x10,%esp
                kernel_memset(task, 0, sizeof(task_t));
   12315:	83 ec 04             	sub    $0x4,%esp
   12318:	68 c8 02 00 00       	push   $0x2c8
   1231d:	6a 00                	push   $0x0
   1231f:	ff 75 e8             	pushl  -0x18(%ebp)
   12322:	e8 55 61 00 00       	call   1847c <kernel_memset>
   12327:	83 c4 10             	add    $0x10,%esp

                mutex_unlock(&task_table_mutex);
   1232a:	83 ec 0c             	sub    $0xc,%esp
   1232d:	68 c0 49 03 00       	push   $0x349c0
   12332:	e8 bf 5a 00 00       	call   17df6 <mutex_unlock>
   12337:	83 c4 10             	add    $0x10,%esp
                return pid;
   1233a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1233d:	eb 56                	jmp    12395 <sys_wait+0x113>
                continue;
   1233f:	90                   	nop
        for (int i = 0; i < TASK_NR; i++) {
   12340:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12344:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12348:	0f 8e 5e ff ff ff    	jle    122ac <sys_wait+0x2a>
            }
        }
        mutex_unlock(&task_table_mutex);
   1234e:	83 ec 0c             	sub    $0xc,%esp
   12351:	68 c0 49 03 00       	push   $0x349c0
   12356:	e8 9b 5a 00 00       	call   17df6 <mutex_unlock>
   1235b:	83 c4 10             	add    $0x10,%esp

        irq_state_t state = irq_enter_protection();
   1235e:	e8 ab 0d 00 00       	call   1310e <irq_enter_protection>
   12363:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr_task);
   12366:	83 ec 0c             	sub    $0xc,%esp
   12369:	ff 75 f0             	pushl  -0x10(%ebp)
   1236c:	e8 ca f2 ff ff       	call   1163b <task_set_block>
   12371:	83 c4 10             	add    $0x10,%esp
        curr_task->state = TASK_WAITING;
   12374:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12377:	c7 00 04 00 00 00    	movl   $0x4,(%eax)
        task_dispatch();
   1237d:	e8 9e f4 ff ff       	call   11820 <task_dispatch>
        irq_leave_protection(state);
   12382:	83 ec 0c             	sub    $0xc,%esp
   12385:	ff 75 ec             	pushl  -0x14(%ebp)
   12388:	e8 99 0d 00 00       	call   13126 <irq_leave_protection>
   1238d:	83 c4 10             	add    $0x10,%esp
    for (;;) {
   12390:	e9 fb fe ff ff       	jmp    12290 <sys_wait+0xe>
    }
}
   12395:	c9                   	leave  
   12396:	c3                   	ret    

00012397 <sys_exit>:

void sys_exit(int status) {
   12397:	55                   	push   %ebp
   12398:	89 e5                	mov    %esp,%ebp
   1239a:	83 ec 28             	sub    $0x28,%esp
    task_t * curr_task = task_current();
   1239d:	e8 67 f3 ff ff       	call   11709 <task_current>
   123a2:	89 45 e8             	mov    %eax,-0x18(%ebp)

    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123a5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   123ac:	eb 39                	jmp    123e7 <sys_exit+0x50>
        file_t * file = curr_task->file_table[fd];
   123ae:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123b1:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123b4:	83 c2 10             	add    $0x10,%edx
   123b7:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax
   123bb:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (file) {
   123be:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   123c2:	74 1f                	je     123e3 <sys_exit+0x4c>
            sys_close(fd);
   123c4:	83 ec 0c             	sub    $0xc,%esp
   123c7:	ff 75 f4             	pushl  -0xc(%ebp)
   123ca:	e8 37 55 00 00       	call   17906 <sys_close>
   123cf:	83 c4 10             	add    $0x10,%esp
            curr_task->file_table[fd] = (file_t *)0;
   123d2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   123d5:	8b 55 f4             	mov    -0xc(%ebp),%edx
   123d8:	83 c2 10             	add    $0x10,%edx
   123db:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)
   123e2:	00 
    for (int fd = 0; fd < TASK_OFILE_NR; fd++) {
   123e3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   123e7:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   123eb:	7e c1                	jle    123ae <sys_exit+0x17>
        }
    }

    int move_child = 0;
   123ed:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    mutex_lock(&task_table_mutex);
   123f4:	83 ec 0c             	sub    $0xc,%esp
   123f7:	68 c0 49 03 00       	push   $0x349c0
   123fc:	e8 5e 59 00 00       	call   17d5f <mutex_lock>
   12401:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12404:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1240b:	eb 3b                	jmp    12448 <sys_exit+0xb1>
        task_t * task = task_table + i;
   1240d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   12410:	69 c0 c8 02 00 00    	imul   $0x2c8,%eax,%eax
   12416:	05 c0 e5 01 00       	add    $0x1e5c0,%eax
   1241b:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (task->parent == curr_task) {
   1241e:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12421:	8b 40 28             	mov    0x28(%eax),%eax
   12424:	39 45 e8             	cmp    %eax,-0x18(%ebp)
   12427:	75 1b                	jne    12444 <sys_exit+0xad>
            task->parent = &task_manager.first_task;
   12429:	8b 45 dc             	mov    -0x24(%ebp),%eax
   1242c:	c7 40 28 28 d0 01 00 	movl   $0x1d028,0x28(%eax)

            if (task->state == TASK_ZOMBIE) {
   12433:	8b 45 dc             	mov    -0x24(%ebp),%eax
   12436:	8b 00                	mov    (%eax),%eax
   12438:	83 f8 05             	cmp    $0x5,%eax
   1243b:	75 07                	jne    12444 <sys_exit+0xad>
                move_child = 1;
   1243d:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)
    for (int i = 0; i < TASK_OFILE_NR; i++) {
   12444:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   12448:	83 7d ec 7f          	cmpl   $0x7f,-0x14(%ebp)
   1244c:	7e bf                	jle    1240d <sys_exit+0x76>
            }
        }
    }
    mutex_unlock(&task_table_mutex);
   1244e:	83 ec 0c             	sub    $0xc,%esp
   12451:	68 c0 49 03 00       	push   $0x349c0
   12456:	e8 9b 59 00 00       	call   17df6 <mutex_unlock>
   1245b:	83 c4 10             	add    $0x10,%esp

    irq_state_t state = irq_enter_protection();
   1245e:	e8 ab 0c 00 00       	call   1310e <irq_enter_protection>
   12463:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    task_t * parent = curr_task->parent;
   12466:	8b 45 e8             	mov    -0x18(%ebp),%eax
   12469:	8b 40 28             	mov    0x28(%eax),%eax
   1246c:	89 45 e0             	mov    %eax,-0x20(%ebp)
    if (move_child && (parent != &task_manager.first_task)) { 
   1246f:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   12473:	74 23                	je     12498 <sys_exit+0x101>
   12475:	81 7d e0 28 d0 01 00 	cmpl   $0x1d028,-0x20(%ebp)
   1247c:	74 1a                	je     12498 <sys_exit+0x101>
        if (task_manager.first_task.state == TASK_WAITING) {
   1247e:	a1 28 d0 01 00       	mov    0x1d028,%eax
   12483:	83 f8 04             	cmp    $0x4,%eax
   12486:	75 10                	jne    12498 <sys_exit+0x101>
            task_set_ready(&task_manager.first_task);
   12488:	83 ec 0c             	sub    $0xc,%esp
   1248b:	68 28 d0 01 00       	push   $0x1d028
   12490:	e8 72 f1 ff ff       	call   11607 <task_set_ready>
   12495:	83 c4 10             	add    $0x10,%esp
        }
    }

    if (parent->state == TASK_WAITING) {
   12498:	8b 45 e0             	mov    -0x20(%ebp),%eax
   1249b:	8b 00                	mov    (%eax),%eax
   1249d:	83 f8 04             	cmp    $0x4,%eax
   124a0:	75 12                	jne    124b4 <sys_exit+0x11d>
        task_set_ready(curr_task->parent);
   124a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124a5:	8b 40 28             	mov    0x28(%eax),%eax
   124a8:	83 ec 0c             	sub    $0xc,%esp
   124ab:	50                   	push   %eax
   124ac:	e8 56 f1 ff ff       	call   11607 <task_set_ready>
   124b1:	83 c4 10             	add    $0x10,%esp
    }

    curr_task->status = status;
   124b4:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124b7:	8b 55 08             	mov    0x8(%ebp),%edx
   124ba:	89 50 34             	mov    %edx,0x34(%eax)
    curr_task->state = TASK_ZOMBIE;
   124bd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   124c0:	c7 00 05 00 00 00    	movl   $0x5,(%eax)
    task_set_block(curr_task);
   124c6:	83 ec 0c             	sub    $0xc,%esp
   124c9:	ff 75 e8             	pushl  -0x18(%ebp)
   124cc:	e8 6a f1 ff ff       	call   1163b <task_set_block>
   124d1:	83 c4 10             	add    $0x10,%esp
    task_dispatch();
   124d4:	e8 47 f3 ff ff       	call   11820 <task_dispatch>

    irq_leave_protection(state);
   124d9:	83 ec 0c             	sub    $0xc,%esp
   124dc:	ff 75 e4             	pushl  -0x1c(%ebp)
   124df:	e8 42 0c 00 00       	call   13126 <irq_leave_protection>
   124e4:	83 c4 10             	add    $0x10,%esp
}
   124e7:	90                   	nop
   124e8:	c9                   	leave  
   124e9:	c3                   	ret    

000124ea <lgdt>:
static inline void lgdt(uint32_t start, uint32_t size) {
   124ea:	55                   	push   %ebp
   124eb:	89 e5                	mov    %esp,%ebp
   124ed:	83 ec 10             	sub    $0x10,%esp
	gdt.start31_16 = start >> 16;
   124f0:	8b 45 08             	mov    0x8(%ebp),%eax
   124f3:	c1 e8 10             	shr    $0x10,%eax
   124f6:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	gdt.start15_0 = start & 0xFFFF;
   124fa:	8b 45 08             	mov    0x8(%ebp),%eax
   124fd:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	gdt.limit = size - 1;
   12501:	8b 45 0c             	mov    0xc(%ebp),%eax
   12504:	83 e8 01             	sub    $0x1,%eax
   12507:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
   1250b:	0f 01 55 fa          	lgdtl  -0x6(%ebp)
}
   1250f:	90                   	nop
   12510:	c9                   	leave  
   12511:	c3                   	ret    

00012512 <far_jump>:
static inline void far_jump(uint32_t selector, uint32_t offset) {
   12512:	55                   	push   %ebp
   12513:	89 e5                	mov    %esp,%ebp
   12515:	83 ec 10             	sub    $0x10,%esp
	uint32_t addr[] = {offset, selector };
   12518:	8b 45 0c             	mov    0xc(%ebp),%eax
   1251b:	89 45 f8             	mov    %eax,-0x8(%ebp)
   1251e:	8b 45 08             	mov    0x8(%ebp),%eax
   12521:	89 45 fc             	mov    %eax,-0x4(%ebp)
	__asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
   12524:	8d 45 f8             	lea    -0x8(%ebp),%eax
   12527:	ff 28                	ljmp   *(%eax)
}
   12529:	90                   	nop
   1252a:	c9                   	leave  
   1252b:	c3                   	ret    

0001252c <segment_desc_set>:

static segment_desc_t gdt_table[GDT_TABLE_SIZE];
static mutex_t mutex;


void segment_desc_set(int selector, uint32_t base, uint32_t limit, uint16_t attr) {
   1252c:	55                   	push   %ebp
   1252d:	89 e5                	mov    %esp,%ebp
   1252f:	83 ec 14             	sub    $0x14,%esp
   12532:	8b 45 14             	mov    0x14(%ebp),%eax
   12535:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
    segment_desc_t * desc = gdt_table + (selector >> 3);
   12539:	8b 45 08             	mov    0x8(%ebp),%eax
   1253c:	c1 f8 03             	sar    $0x3,%eax
   1253f:	c1 e0 03             	shl    $0x3,%eax
   12542:	05 e0 49 03 00       	add    $0x349e0,%eax
   12547:	89 45 fc             	mov    %eax,-0x4(%ebp)

	if (limit > 0xfffff) {
   1254a:	81 7d 10 ff ff 0f 00 	cmpl   $0xfffff,0x10(%ebp)
   12551:	76 0f                	jbe    12562 <segment_desc_set+0x36>
		attr |= 0x8000;
   12553:	66 81 4d ec 00 80    	orw    $0x8000,-0x14(%ebp)
		limit /= 0x1000;
   12559:	8b 45 10             	mov    0x10(%ebp),%eax
   1255c:	c1 e8 0c             	shr    $0xc,%eax
   1255f:	89 45 10             	mov    %eax,0x10(%ebp)
	}
	desc->limit15_0 = limit & 0xffff;
   12562:	8b 45 10             	mov    0x10(%ebp),%eax
   12565:	89 c2                	mov    %eax,%edx
   12567:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1256a:	66 89 10             	mov    %dx,(%eax)
	desc->base15_0 = base & 0xffff;
   1256d:	8b 45 0c             	mov    0xc(%ebp),%eax
   12570:	89 c2                	mov    %eax,%edx
   12572:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12575:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->base23_16 = (base >> 16) & 0xff;
   12579:	8b 45 0c             	mov    0xc(%ebp),%eax
   1257c:	c1 e8 10             	shr    $0x10,%eax
   1257f:	89 c2                	mov    %eax,%edx
   12581:	8b 45 fc             	mov    -0x4(%ebp),%eax
   12584:	88 50 04             	mov    %dl,0x4(%eax)
	desc->attr = attr | (((limit >> 16) & 0xf) << 8);
   12587:	8b 45 10             	mov    0x10(%ebp),%eax
   1258a:	c1 e8 10             	shr    $0x10,%eax
   1258d:	c1 e0 08             	shl    $0x8,%eax
   12590:	66 25 00 0f          	and    $0xf00,%ax
   12594:	66 0b 45 ec          	or     -0x14(%ebp),%ax
   12598:	89 c2                	mov    %eax,%edx
   1259a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1259d:	66 89 50 05          	mov    %dx,0x5(%eax)
	desc->base31_24 = (base >> 24) & 0xff;
   125a1:	8b 45 0c             	mov    0xc(%ebp),%eax
   125a4:	c1 e8 18             	shr    $0x18,%eax
   125a7:	89 c2                	mov    %eax,%edx
   125a9:	8b 45 fc             	mov    -0x4(%ebp),%eax
   125ac:	88 50 07             	mov    %dl,0x7(%eax)
}
   125af:	90                   	nop
   125b0:	c9                   	leave  
   125b1:	c3                   	ret    

000125b2 <gate_desc_set>:


void gate_desc_set(gate_desc_t * desc, uint16_t selector, uint32_t offset, uint16_t attr) {
   125b2:	55                   	push   %ebp
   125b3:	89 e5                	mov    %esp,%ebp
   125b5:	83 ec 08             	sub    $0x8,%esp
   125b8:	8b 55 0c             	mov    0xc(%ebp),%edx
   125bb:	8b 45 14             	mov    0x14(%ebp),%eax
   125be:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   125c2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	desc->offset15_0 = offset & 0xffff;
   125c6:	8b 45 10             	mov    0x10(%ebp),%eax
   125c9:	89 c2                	mov    %eax,%edx
   125cb:	8b 45 08             	mov    0x8(%ebp),%eax
   125ce:	66 89 10             	mov    %dx,(%eax)
	desc->selector = selector;
   125d1:	8b 45 08             	mov    0x8(%ebp),%eax
   125d4:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   125d8:	66 89 50 02          	mov    %dx,0x2(%eax)
	desc->attr = attr;
   125dc:	8b 45 08             	mov    0x8(%ebp),%eax
   125df:	0f b7 55 f8          	movzwl -0x8(%ebp),%edx
   125e3:	66 89 50 04          	mov    %dx,0x4(%eax)
	desc->offset31_16 = (offset >> 16) & 0xffff;
   125e7:	8b 45 10             	mov    0x10(%ebp),%eax
   125ea:	c1 e8 10             	shr    $0x10,%eax
   125ed:	89 c2                	mov    %eax,%edx
   125ef:	8b 45 08             	mov    0x8(%ebp),%eax
   125f2:	66 89 50 06          	mov    %dx,0x6(%eax)
}
   125f6:	90                   	nop
   125f7:	c9                   	leave  
   125f8:	c3                   	ret    

000125f9 <gdt_free_sel>:

void gdt_free_sel (int sel) {
   125f9:	55                   	push   %ebp
   125fa:	89 e5                	mov    %esp,%ebp
   125fc:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&mutex);
   125ff:	83 ec 0c             	sub    $0xc,%esp
   12602:	68 e0 51 03 00       	push   $0x351e0
   12607:	e8 53 57 00 00       	call   17d5f <mutex_lock>
   1260c:	83 c4 10             	add    $0x10,%esp
    gdt_table[sel / sizeof(segment_desc_t)].attr = 0;
   1260f:	8b 45 08             	mov    0x8(%ebp),%eax
   12612:	c1 e8 03             	shr    $0x3,%eax
   12615:	66 c7 04 c5 e5 49 03 	movw   $0x0,0x349e5(,%eax,8)
   1261c:	00 00 00 
    mutex_unlock(&mutex);
   1261f:	83 ec 0c             	sub    $0xc,%esp
   12622:	68 e0 51 03 00       	push   $0x351e0
   12627:	e8 ca 57 00 00       	call   17df6 <mutex_unlock>
   1262c:	83 c4 10             	add    $0x10,%esp
}
   1262f:	90                   	nop
   12630:	c9                   	leave  
   12631:	c3                   	ret    

00012632 <gdt_alloc_desc>:


int gdt_alloc_desc (void) {
   12632:	55                   	push   %ebp
   12633:	89 e5                	mov    %esp,%ebp
   12635:	83 ec 18             	sub    $0x18,%esp
    int i;

    mutex_lock(&mutex);
   12638:	83 ec 0c             	sub    $0xc,%esp
   1263b:	68 e0 51 03 00       	push   $0x351e0
   12640:	e8 1a 57 00 00       	call   17d5f <mutex_lock>
   12645:	83 c4 10             	add    $0x10,%esp
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   12648:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   1264f:	eb 29                	jmp    1267a <gdt_alloc_desc+0x48>
        segment_desc_t * desc = gdt_table + i;
   12651:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12654:	c1 e0 03             	shl    $0x3,%eax
   12657:	05 e0 49 03 00       	add    $0x349e0,%eax
   1265c:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (desc->attr == 0) {
   1265f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   12662:	0f b7 40 05          	movzwl 0x5(%eax),%eax
   12666:	66 85 c0             	test   %ax,%ax
   12669:	75 0b                	jne    12676 <gdt_alloc_desc+0x44>
            desc->attr = SEG_P_PRESENT;     
   1266b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1266e:	66 c7 40 05 80 00    	movw   $0x80,0x5(%eax)
            break;
   12674:	eb 0d                	jmp    12683 <gdt_alloc_desc+0x51>
    for (i = 1; i < GDT_TABLE_SIZE; i++) {
   12676:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1267a:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   12681:	7e ce                	jle    12651 <gdt_alloc_desc+0x1f>
        }
    }
    mutex_unlock(&mutex);
   12683:	83 ec 0c             	sub    $0xc,%esp
   12686:	68 e0 51 03 00       	push   $0x351e0
   1268b:	e8 66 57 00 00       	call   17df6 <mutex_unlock>
   12690:	83 c4 10             	add    $0x10,%esp

    return i >= GDT_TABLE_SIZE ? -1 : i * sizeof(segment_desc_t);;
   12693:	81 7d f4 ff 00 00 00 	cmpl   $0xff,-0xc(%ebp)
   1269a:	7f 08                	jg     126a4 <gdt_alloc_desc+0x72>
   1269c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1269f:	c1 e0 03             	shl    $0x3,%eax
   126a2:	eb 05                	jmp    126a9 <gdt_alloc_desc+0x77>
   126a4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   126a9:	c9                   	leave  
   126aa:	c3                   	ret    

000126ab <init_gdt>:


void init_gdt(void) {
   126ab:	55                   	push   %ebp
   126ac:	89 e5                	mov    %esp,%ebp
   126ae:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126b1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   126b8:	eb 19                	jmp    126d3 <init_gdt+0x28>
        segment_desc_set(i << 3, 0, 0, 0);
   126ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
   126bd:	c1 e0 03             	shl    $0x3,%eax
   126c0:	6a 00                	push   $0x0
   126c2:	6a 00                	push   $0x0
   126c4:	6a 00                	push   $0x0
   126c6:	50                   	push   %eax
   126c7:	e8 60 fe ff ff       	call   1252c <segment_desc_set>
   126cc:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < GDT_TABLE_SIZE; i++) {
   126cf:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   126d3:	81 7d fc ff 00 00 00 	cmpl   $0xff,-0x4(%ebp)
   126da:	7e de                	jle    126ba <init_gdt+0xf>
    }

    segment_desc_set(KERNEL_SELECTOR_DS, 0x00000000, 0xFFFFFFFF,
   126dc:	68 92 c0 00 00       	push   $0xc092
   126e1:	6a ff                	push   $0xffffffff
   126e3:	6a 00                	push   $0x0
   126e5:	6a 10                	push   $0x10
   126e7:	e8 40 fe ff ff       	call   1252c <segment_desc_set>
   126ec:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_DATA
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    segment_desc_set(KERNEL_SELECTOR_CS, 0x00000000, 0xFFFFFFFF,
   126ef:	68 9a c0 00 00       	push   $0xc09a
   126f4:	6a ff                	push   $0xffffffff
   126f6:	6a 00                	push   $0x0
   126f8:	6a 08                	push   $0x8
   126fa:	e8 2d fe ff ff       	call   1252c <segment_desc_set>
   126ff:	83 c4 10             	add    $0x10,%esp
                     SEG_P_PRESENT | SEG_DPL0 | SEG_S_NORMAL | SEG_TYPE_CODE
                     | SEG_TYPE_RW | SEG_D | SEG_G);

    gate_desc_set((gate_desc_t *)(gdt_table + (SELECTOR_SYSCALL >> 3)),
   12702:	ba f8 02 01 00       	mov    $0x102f8,%edx
   12707:	b8 f8 49 03 00       	mov    $0x349f8,%eax
   1270c:	68 05 ec 00 00       	push   $0xec05
   12711:	52                   	push   %edx
   12712:	6a 08                	push   $0x8
   12714:	50                   	push   %eax
   12715:	e8 98 fe ff ff       	call   125b2 <gate_desc_set>
   1271a:	83 c4 10             	add    $0x10,%esp
            KERNEL_SELECTOR_CS,
            (uint32_t)exception_handler_syscall,
            GATE_P_PRESENT | GATE_DPL3 | GATE_TYPE_SYSCALL | SYSCALL_PARAM_COUNT);

    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
   1271d:	b8 e0 49 03 00       	mov    $0x349e0,%eax
   12722:	68 00 08 00 00       	push   $0x800
   12727:	50                   	push   %eax
   12728:	e8 bd fd ff ff       	call   124ea <lgdt>
   1272d:	83 c4 08             	add    $0x8,%esp
}
   12730:	90                   	nop
   12731:	c9                   	leave  
   12732:	c3                   	ret    

00012733 <switch_to_tss>:


void switch_to_tss (uint32_t tss_selector) {
   12733:	55                   	push   %ebp
   12734:	89 e5                	mov    %esp,%ebp
    far_jump(tss_selector, 0);
   12736:	6a 00                	push   $0x0
   12738:	ff 75 08             	pushl  0x8(%ebp)
   1273b:	e8 d2 fd ff ff       	call   12512 <far_jump>
   12740:	83 c4 08             	add    $0x8,%esp
}
   12743:	90                   	nop
   12744:	c9                   	leave  
   12745:	c3                   	ret    

00012746 <cpu_init>:


void cpu_init (void) {
   12746:	55                   	push   %ebp
   12747:	89 e5                	mov    %esp,%ebp
   12749:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   1274c:	83 ec 0c             	sub    $0xc,%esp
   1274f:	68 e0 51 03 00       	push   $0x351e0
   12754:	e8 d8 55 00 00       	call   17d31 <mutex_init>
   12759:	83 c4 10             	add    $0x10,%esp

    init_gdt();
   1275c:	e8 4a ff ff ff       	call   126ab <init_gdt>
}
   12761:	90                   	nop
   12762:	c9                   	leave  
   12763:	c3                   	ret    

00012764 <inb>:
static inline uint8_t inb(uint16_t  port) {
   12764:	55                   	push   %ebp
   12765:	89 e5                	mov    %esp,%ebp
   12767:	83 ec 14             	sub    $0x14,%esp
   1276a:	8b 45 08             	mov    0x8(%ebp),%eax
   1276d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   12771:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   12775:	89 c2                	mov    %eax,%edx
   12777:	ec                   	in     (%dx),%al
   12778:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1277b:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   1277f:	c9                   	leave  
   12780:	c3                   	ret    

00012781 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   12781:	55                   	push   %ebp
   12782:	89 e5                	mov    %esp,%ebp
   12784:	83 ec 08             	sub    $0x8,%esp
   12787:	8b 55 08             	mov    0x8(%ebp),%edx
   1278a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1278d:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   12791:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   12794:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   12798:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1279c:	ee                   	out    %al,(%dx)
}
   1279d:	90                   	nop
   1279e:	c9                   	leave  
   1279f:	c3                   	ret    

000127a0 <cli>:
static inline void cli() {
   127a0:	55                   	push   %ebp
   127a1:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("cli");
   127a3:	fa                   	cli    
}
   127a4:	90                   	nop
   127a5:	5d                   	pop    %ebp
   127a6:	c3                   	ret    

000127a7 <sti>:
static inline void sti() {
   127a7:	55                   	push   %ebp
   127a8:	89 e5                	mov    %esp,%ebp
	__asm__ __volatile__("sti");
   127aa:	fb                   	sti    
}
   127ab:	90                   	nop
   127ac:	5d                   	pop    %ebp
   127ad:	c3                   	ret    

000127ae <read_cr2>:
static inline uint32_t read_cr2() {
   127ae:	55                   	push   %ebp
   127af:	89 e5                	mov    %esp,%ebp
   127b1:	83 ec 10             	sub    $0x10,%esp
	__asm__ __volatile__("mov %%cr2, %[v]":[v]"=r"(cr2));
   127b4:	0f 20 d0             	mov    %cr2,%eax
   127b7:	89 45 fc             	mov    %eax,-0x4(%ebp)
	return cr2;
   127ba:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127bd:	c9                   	leave  
   127be:	c3                   	ret    

000127bf <lidt>:
static inline void lidt(uint32_t start, uint32_t size) {
   127bf:	55                   	push   %ebp
   127c0:	89 e5                	mov    %esp,%ebp
   127c2:	83 ec 10             	sub    $0x10,%esp
	idt.start31_16 = start >> 16;
   127c5:	8b 45 08             	mov    0x8(%ebp),%eax
   127c8:	c1 e8 10             	shr    $0x10,%eax
   127cb:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	idt.start15_0 = start & 0xFFFF;
   127cf:	8b 45 08             	mov    0x8(%ebp),%eax
   127d2:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
	idt.limit = size - 1;
   127d6:	8b 45 0c             	mov    0xc(%ebp),%eax
   127d9:	83 e8 01             	sub    $0x1,%eax
   127dc:	66 89 45 fa          	mov    %ax,-0x6(%ebp)
	__asm__ __volatile__("lidt %0"::"m"(idt));
   127e0:	0f 01 5d fa          	lidtl  -0x6(%ebp)
}
   127e4:	90                   	nop
   127e5:	c9                   	leave  
   127e6:	c3                   	ret    

000127e7 <hlt>:
static inline void hlt(void) {
   127e7:	55                   	push   %ebp
   127e8:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   127ea:	f4                   	hlt    
}
   127eb:	90                   	nop
   127ec:	5d                   	pop    %ebp
   127ed:	c3                   	ret    

000127ee <read_eflags>:

static inline uint32_t read_eflags (void) {
   127ee:	55                   	push   %ebp
   127ef:	89 e5                	mov    %esp,%ebp
   127f1:	83 ec 10             	sub    $0x10,%esp
    uint32_t eflags;

    __asm__ __volatile__("pushfl\n\tpopl %%eax":"=a"(eflags));
   127f4:	9c                   	pushf  
   127f5:	58                   	pop    %eax
   127f6:	89 45 fc             	mov    %eax,-0x4(%ebp)
    return eflags;
   127f9:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   127fc:	c9                   	leave  
   127fd:	c3                   	ret    

000127fe <write_eflags>:

static inline void write_eflags (uint32_t eflags) {
   127fe:	55                   	push   %ebp
   127ff:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("pushl %%eax\n\tpopfl"::"a"(eflags));
   12801:	8b 45 08             	mov    0x8(%ebp),%eax
   12804:	50                   	push   %eax
   12805:	9d                   	popf   
}
   12806:	90                   	nop
   12807:	5d                   	pop    %ebp
   12808:	c3                   	ret    

00012809 <dump_core_regs>:

#define IDT_TABLE_NR			128				

static gate_desc_t idt_table[IDT_TABLE_NR];	

static void dump_core_regs (exception_frame_t * frame) {
   12809:	55                   	push   %ebp
   1280a:	89 e5                	mov    %esp,%ebp
   1280c:	57                   	push   %edi
   1280d:	56                   	push   %esi
   1280e:	53                   	push   %ebx
   1280f:	83 ec 2c             	sub    $0x2c,%esp
    uint32_t esp, ss;
    if (frame->cs & 0x7) {
   12812:	8b 45 08             	mov    0x8(%ebp),%eax
   12815:	8b 40 3c             	mov    0x3c(%eax),%eax
   12818:	83 e0 07             	and    $0x7,%eax
   1281b:	85 c0                	test   %eax,%eax
   1281d:	74 14                	je     12833 <dump_core_regs+0x2a>
        ss = frame->ds;
   1281f:	8b 45 08             	mov    0x8(%ebp),%eax
   12822:	8b 40 0c             	mov    0xc(%eax),%eax
   12825:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp;
   12828:	8b 45 08             	mov    0x8(%ebp),%eax
   1282b:	8b 40 1c             	mov    0x1c(%eax),%eax
   1282e:	89 45 e4             	mov    %eax,-0x1c(%ebp)
   12831:	eb 12                	jmp    12845 <dump_core_regs+0x3c>
    } else {
        ss = frame->ss3;
   12833:	8b 45 08             	mov    0x8(%ebp),%eax
   12836:	8b 40 48             	mov    0x48(%eax),%eax
   12839:	89 45 e0             	mov    %eax,-0x20(%ebp)
        esp = frame->esp3;
   1283c:	8b 45 08             	mov    0x8(%ebp),%eax
   1283f:	8b 40 44             	mov    0x44(%eax),%eax
   12842:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    }
    log_printf("IRQ: %d, error code: %d.", frame->num, frame->error_code);
   12845:	8b 45 08             	mov    0x8(%ebp),%eax
   12848:	8b 50 34             	mov    0x34(%eax),%edx
   1284b:	8b 45 08             	mov    0x8(%ebp),%eax
   1284e:	8b 40 30             	mov    0x30(%eax),%eax
   12851:	83 ec 04             	sub    $0x4,%esp
   12854:	52                   	push   %edx
   12855:	50                   	push   %eax
   12856:	68 48 90 01 00       	push   $0x19048
   1285b:	e8 c6 61 00 00       	call   18a26 <log_printf>
   12860:	83 c4 10             	add    $0x10,%esp
    log_printf("CS: %d\nDS: %d\nES: %d\nSS: %d\nFS:%d\nGS:%d",
   12863:	8b 45 08             	mov    0x8(%ebp),%eax
   12866:	8b 30                	mov    (%eax),%esi
   12868:	8b 45 08             	mov    0x8(%ebp),%eax
   1286b:	8b 58 04             	mov    0x4(%eax),%ebx
   1286e:	8b 45 08             	mov    0x8(%ebp),%eax
   12871:	8b 48 08             	mov    0x8(%eax),%ecx
   12874:	8b 45 08             	mov    0x8(%ebp),%eax
   12877:	8b 50 0c             	mov    0xc(%eax),%edx
   1287a:	8b 45 08             	mov    0x8(%ebp),%eax
   1287d:	8b 40 3c             	mov    0x3c(%eax),%eax
   12880:	83 ec 04             	sub    $0x4,%esp
   12883:	56                   	push   %esi
   12884:	53                   	push   %ebx
   12885:	ff 75 e0             	pushl  -0x20(%ebp)
   12888:	51                   	push   %ecx
   12889:	52                   	push   %edx
   1288a:	50                   	push   %eax
   1288b:	68 64 90 01 00       	push   $0x19064
   12890:	e8 91 61 00 00       	call   18a26 <log_printf>
   12895:	83 c4 20             	add    $0x20,%esp
               frame->cs, frame->ds, frame->es, ss, frame->fs, frame->gs
    );
     log_printf("EAX:0x%x\n"
   12898:	8b 45 08             	mov    0x8(%ebp),%eax
   1289b:	8b 40 18             	mov    0x18(%eax),%eax
   1289e:	89 45 d4             	mov    %eax,-0x2c(%ebp)
   128a1:	8b 45 08             	mov    0x8(%ebp),%eax
   128a4:	8b 78 14             	mov    0x14(%eax),%edi
   128a7:	8b 45 08             	mov    0x8(%ebp),%eax
   128aa:	8b 70 10             	mov    0x10(%eax),%esi
   128ad:	8b 45 08             	mov    0x8(%ebp),%eax
   128b0:	8b 58 24             	mov    0x24(%eax),%ebx
   128b3:	8b 45 08             	mov    0x8(%ebp),%eax
   128b6:	8b 48 28             	mov    0x28(%eax),%ecx
   128b9:	8b 45 08             	mov    0x8(%ebp),%eax
   128bc:	8b 50 20             	mov    0x20(%eax),%edx
   128bf:	8b 45 08             	mov    0x8(%ebp),%eax
   128c2:	8b 40 2c             	mov    0x2c(%eax),%eax
   128c5:	83 ec 0c             	sub    $0xc,%esp
   128c8:	ff 75 e4             	pushl  -0x1c(%ebp)
   128cb:	ff 75 d4             	pushl  -0x2c(%ebp)
   128ce:	57                   	push   %edi
   128cf:	56                   	push   %esi
   128d0:	53                   	push   %ebx
   128d1:	51                   	push   %ecx
   128d2:	52                   	push   %edx
   128d3:	50                   	push   %eax
   128d4:	68 8c 90 01 00       	push   $0x1908c
   128d9:	e8 48 61 00 00       	call   18a26 <log_printf>
   128de:	83 c4 30             	add    $0x30,%esp
                "ESI:0x%x\n"
                "EBP:0x%x\n"
                "ESP:0x%x\n",
               frame->eax, frame->ebx, frame->ecx, frame->edx,
               frame->edi, frame->esi, frame->ebp, esp);
    log_printf("EIP:0x%x\nEFLAGS:0x%x\n", frame->eip, frame->eflags);
   128e1:	8b 45 08             	mov    0x8(%ebp),%eax
   128e4:	8b 50 40             	mov    0x40(%eax),%edx
   128e7:	8b 45 08             	mov    0x8(%ebp),%eax
   128ea:	8b 40 38             	mov    0x38(%eax),%eax
   128ed:	83 ec 04             	sub    $0x4,%esp
   128f0:	52                   	push   %edx
   128f1:	50                   	push   %eax
   128f2:	68 d5 90 01 00       	push   $0x190d5
   128f7:	e8 2a 61 00 00       	call   18a26 <log_printf>
   128fc:	83 c4 10             	add    $0x10,%esp
}
   128ff:	90                   	nop
   12900:	8d 65 f4             	lea    -0xc(%ebp),%esp
   12903:	5b                   	pop    %ebx
   12904:	5e                   	pop    %esi
   12905:	5f                   	pop    %edi
   12906:	5d                   	pop    %ebp
   12907:	c3                   	ret    

00012908 <do_default_handler>:

static void do_default_handler (exception_frame_t * frame, const char * message) {
   12908:	55                   	push   %ebp
   12909:	89 e5                	mov    %esp,%ebp
   1290b:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   1290e:	83 ec 0c             	sub    $0xc,%esp
   12911:	68 ec 90 01 00       	push   $0x190ec
   12916:	e8 0b 61 00 00       	call   18a26 <log_printf>
   1291b:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: %s.", message);
   1291e:	83 ec 08             	sub    $0x8,%esp
   12921:	ff 75 0c             	pushl  0xc(%ebp)
   12924:	68 0d 91 01 00       	push   $0x1910d
   12929:	e8 f8 60 00 00       	call   18a26 <log_printf>
   1292e:	83 c4 10             	add    $0x10,%esp
    dump_core_regs(frame);
   12931:	83 ec 0c             	sub    $0xc,%esp
   12934:	ff 75 08             	pushl  0x8(%ebp)
   12937:	e8 cd fe ff ff       	call   12809 <dump_core_regs>
   1293c:	83 c4 10             	add    $0x10,%esp
    

    log_printf("--------------------------------");
   1293f:	83 ec 0c             	sub    $0xc,%esp
   12942:	68 ec 90 01 00       	push   $0x190ec
   12947:	e8 da 60 00 00       	call   18a26 <log_printf>
   1294c:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   1294f:	8b 45 08             	mov    0x8(%ebp),%eax
   12952:	8b 40 3c             	mov    0x3c(%eax),%eax
   12955:	83 e0 03             	and    $0x3,%eax
   12958:	85 c0                	test   %eax,%eax
   1295a:	74 14                	je     12970 <do_default_handler+0x68>
        sys_exit(frame->error_code);
   1295c:	8b 45 08             	mov    0x8(%ebp),%eax
   1295f:	8b 40 34             	mov    0x34(%eax),%eax
   12962:	83 ec 0c             	sub    $0xc,%esp
   12965:	50                   	push   %eax
   12966:	e8 2c fa ff ff       	call   12397 <sys_exit>
   1296b:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   1296e:	eb 07                	jmp    12977 <do_default_handler+0x6f>
            hlt();
   12970:	e8 72 fe ff ff       	call   127e7 <hlt>
   12975:	eb f9                	jmp    12970 <do_default_handler+0x68>
}
   12977:	c9                   	leave  
   12978:	c3                   	ret    

00012979 <do_handler_unknown>:

void do_handler_unknown (exception_frame_t * frame) {
   12979:	55                   	push   %ebp
   1297a:	89 e5                	mov    %esp,%ebp
   1297c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Unknown exception.");
   1297f:	83 ec 08             	sub    $0x8,%esp
   12982:	68 28 91 01 00       	push   $0x19128
   12987:	ff 75 08             	pushl  0x8(%ebp)
   1298a:	e8 79 ff ff ff       	call   12908 <do_default_handler>
   1298f:	83 c4 10             	add    $0x10,%esp
}
   12992:	90                   	nop
   12993:	c9                   	leave  
   12994:	c3                   	ret    

00012995 <do_handler_divider>:

void do_handler_divider(exception_frame_t * frame) {
   12995:	55                   	push   %ebp
   12996:	89 e5                	mov    %esp,%ebp
   12998:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Divider Error.");
   1299b:	83 ec 08             	sub    $0x8,%esp
   1299e:	68 3b 91 01 00       	push   $0x1913b
   129a3:	ff 75 08             	pushl  0x8(%ebp)
   129a6:	e8 5d ff ff ff       	call   12908 <do_default_handler>
   129ab:	83 c4 10             	add    $0x10,%esp
}
   129ae:	90                   	nop
   129af:	c9                   	leave  
   129b0:	c3                   	ret    

000129b1 <do_handler_Debug>:

void do_handler_Debug(exception_frame_t * frame) {
   129b1:	55                   	push   %ebp
   129b2:	89 e5                	mov    %esp,%ebp
   129b4:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Debug Exception");
   129b7:	83 ec 08             	sub    $0x8,%esp
   129ba:	68 4a 91 01 00       	push   $0x1914a
   129bf:	ff 75 08             	pushl  0x8(%ebp)
   129c2:	e8 41 ff ff ff       	call   12908 <do_default_handler>
   129c7:	83 c4 10             	add    $0x10,%esp
}
   129ca:	90                   	nop
   129cb:	c9                   	leave  
   129cc:	c3                   	ret    

000129cd <do_handler_NMI>:

void do_handler_NMI(exception_frame_t * frame) {
   129cd:	55                   	push   %ebp
   129ce:	89 e5                	mov    %esp,%ebp
   129d0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "NMI Interrupt.");
   129d3:	83 ec 08             	sub    $0x8,%esp
   129d6:	68 5a 91 01 00       	push   $0x1915a
   129db:	ff 75 08             	pushl  0x8(%ebp)
   129de:	e8 25 ff ff ff       	call   12908 <do_default_handler>
   129e3:	83 c4 10             	add    $0x10,%esp
}
   129e6:	90                   	nop
   129e7:	c9                   	leave  
   129e8:	c3                   	ret    

000129e9 <do_handler_breakpoint>:

void do_handler_breakpoint(exception_frame_t * frame) {
   129e9:	55                   	push   %ebp
   129ea:	89 e5                	mov    %esp,%ebp
   129ec:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Breakpoint.");
   129ef:	83 ec 08             	sub    $0x8,%esp
   129f2:	68 69 91 01 00       	push   $0x19169
   129f7:	ff 75 08             	pushl  0x8(%ebp)
   129fa:	e8 09 ff ff ff       	call   12908 <do_default_handler>
   129ff:	83 c4 10             	add    $0x10,%esp
}
   12a02:	90                   	nop
   12a03:	c9                   	leave  
   12a04:	c3                   	ret    

00012a05 <do_handler_overflow>:

void do_handler_overflow(exception_frame_t * frame) {
   12a05:	55                   	push   %ebp
   12a06:	89 e5                	mov    %esp,%ebp
   12a08:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Overflow.");
   12a0b:	83 ec 08             	sub    $0x8,%esp
   12a0e:	68 75 91 01 00       	push   $0x19175
   12a13:	ff 75 08             	pushl  0x8(%ebp)
   12a16:	e8 ed fe ff ff       	call   12908 <do_default_handler>
   12a1b:	83 c4 10             	add    $0x10,%esp
}
   12a1e:	90                   	nop
   12a1f:	c9                   	leave  
   12a20:	c3                   	ret    

00012a21 <do_handler_bound_range>:

void do_handler_bound_range(exception_frame_t * frame) {
   12a21:	55                   	push   %ebp
   12a22:	89 e5                	mov    %esp,%ebp
   12a24:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "BOUND Range Exceeded.");
   12a27:	83 ec 08             	sub    $0x8,%esp
   12a2a:	68 7f 91 01 00       	push   $0x1917f
   12a2f:	ff 75 08             	pushl  0x8(%ebp)
   12a32:	e8 d1 fe ff ff       	call   12908 <do_default_handler>
   12a37:	83 c4 10             	add    $0x10,%esp
}
   12a3a:	90                   	nop
   12a3b:	c9                   	leave  
   12a3c:	c3                   	ret    

00012a3d <do_handler_invalid_opcode>:

void do_handler_invalid_opcode(exception_frame_t * frame) {
   12a3d:	55                   	push   %ebp
   12a3e:	89 e5                	mov    %esp,%ebp
   12a40:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid Opcode.");
   12a43:	83 ec 08             	sub    $0x8,%esp
   12a46:	68 95 91 01 00       	push   $0x19195
   12a4b:	ff 75 08             	pushl  0x8(%ebp)
   12a4e:	e8 b5 fe ff ff       	call   12908 <do_default_handler>
   12a53:	83 c4 10             	add    $0x10,%esp
}
   12a56:	90                   	nop
   12a57:	c9                   	leave  
   12a58:	c3                   	ret    

00012a59 <do_handler_device_unavailable>:

void do_handler_device_unavailable(exception_frame_t * frame) {
   12a59:	55                   	push   %ebp
   12a5a:	89 e5                	mov    %esp,%ebp
   12a5c:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Device Not Available.");
   12a5f:	83 ec 08             	sub    $0x8,%esp
   12a62:	68 a5 91 01 00       	push   $0x191a5
   12a67:	ff 75 08             	pushl  0x8(%ebp)
   12a6a:	e8 99 fe ff ff       	call   12908 <do_default_handler>
   12a6f:	83 c4 10             	add    $0x10,%esp
}
   12a72:	90                   	nop
   12a73:	c9                   	leave  
   12a74:	c3                   	ret    

00012a75 <do_handler_double_fault>:

void do_handler_double_fault(exception_frame_t * frame) {
   12a75:	55                   	push   %ebp
   12a76:	89 e5                	mov    %esp,%ebp
   12a78:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Double Fault.");
   12a7b:	83 ec 08             	sub    $0x8,%esp
   12a7e:	68 bb 91 01 00       	push   $0x191bb
   12a83:	ff 75 08             	pushl  0x8(%ebp)
   12a86:	e8 7d fe ff ff       	call   12908 <do_default_handler>
   12a8b:	83 c4 10             	add    $0x10,%esp
}
   12a8e:	90                   	nop
   12a8f:	c9                   	leave  
   12a90:	c3                   	ret    

00012a91 <do_handler_invalid_tss>:

void do_handler_invalid_tss(exception_frame_t * frame) {
   12a91:	55                   	push   %ebp
   12a92:	89 e5                	mov    %esp,%ebp
   12a94:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Invalid TSS");
   12a97:	83 ec 08             	sub    $0x8,%esp
   12a9a:	68 c9 91 01 00       	push   $0x191c9
   12a9f:	ff 75 08             	pushl  0x8(%ebp)
   12aa2:	e8 61 fe ff ff       	call   12908 <do_default_handler>
   12aa7:	83 c4 10             	add    $0x10,%esp
}
   12aaa:	90                   	nop
   12aab:	c9                   	leave  
   12aac:	c3                   	ret    

00012aad <do_handler_segment_not_present>:

void do_handler_segment_not_present(exception_frame_t * frame) {
   12aad:	55                   	push   %ebp
   12aae:	89 e5                	mov    %esp,%ebp
   12ab0:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Segment Not Present.");
   12ab3:	83 ec 08             	sub    $0x8,%esp
   12ab6:	68 d5 91 01 00       	push   $0x191d5
   12abb:	ff 75 08             	pushl  0x8(%ebp)
   12abe:	e8 45 fe ff ff       	call   12908 <do_default_handler>
   12ac3:	83 c4 10             	add    $0x10,%esp
}
   12ac6:	90                   	nop
   12ac7:	c9                   	leave  
   12ac8:	c3                   	ret    

00012ac9 <do_handler_stack_segment_fault>:

void do_handler_stack_segment_fault(exception_frame_t * frame) {
   12ac9:	55                   	push   %ebp
   12aca:	89 e5                	mov    %esp,%ebp
   12acc:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Stack-Segment Fault.");
   12acf:	83 ec 08             	sub    $0x8,%esp
   12ad2:	68 ea 91 01 00       	push   $0x191ea
   12ad7:	ff 75 08             	pushl  0x8(%ebp)
   12ada:	e8 29 fe ff ff       	call   12908 <do_default_handler>
   12adf:	83 c4 10             	add    $0x10,%esp
}
   12ae2:	90                   	nop
   12ae3:	c9                   	leave  
   12ae4:	c3                   	ret    

00012ae5 <do_handler_general_protection>:

void do_handler_general_protection(exception_frame_t * frame) {
   12ae5:	55                   	push   %ebp
   12ae6:	89 e5                	mov    %esp,%ebp
   12ae8:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12aeb:	83 ec 0c             	sub    $0xc,%esp
   12aee:	68 ec 90 01 00       	push   $0x190ec
   12af3:	e8 2e 5f 00 00       	call   18a26 <log_printf>
   12af8:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: General Protection.");
   12afb:	83 ec 0c             	sub    $0xc,%esp
   12afe:	68 00 92 01 00       	push   $0x19200
   12b03:	e8 1e 5f 00 00       	call   18a26 <log_printf>
   12b08:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_EXT) {
   12b0b:	8b 45 08             	mov    0x8(%ebp),%eax
   12b0e:	8b 40 34             	mov    0x34(%eax),%eax
   12b11:	83 e0 01             	and    $0x1,%eax
   12b14:	85 c0                	test   %eax,%eax
   12b16:	74 12                	je     12b2a <do_handler_general_protection+0x45>
        log_printf("the exception occurred during delivery of an "
   12b18:	83 ec 0c             	sub    $0xc,%esp
   12b1b:	68 2c 92 01 00       	push   $0x1922c
   12b20:	e8 01 5f 00 00       	call   18a26 <log_printf>
   12b25:	83 c4 10             	add    $0x10,%esp
   12b28:	eb 10                	jmp    12b3a <do_handler_general_protection+0x55>
                "event external to the program, such as an interrupt"
                "or an earlier exception.");
    } else {
        log_printf("the exception occurred during delivery of a"
   12b2a:	83 ec 0c             	sub    $0xc,%esp
   12b2d:	68 a8 92 01 00       	push   $0x192a8
   12b32:	e8 ef 5e 00 00       	call   18a26 <log_printf>
   12b37:	83 c4 10             	add    $0x10,%esp
                    "software interrupt (INT n, INT3, or INTO).");
    }
    
    if (frame->error_code & ERR_IDT) {
   12b3a:	8b 45 08             	mov    0x8(%ebp),%eax
   12b3d:	8b 40 34             	mov    0x34(%eax),%eax
   12b40:	83 e0 02             	and    $0x2,%eax
   12b43:	85 c0                	test   %eax,%eax
   12b45:	74 12                	je     12b59 <do_handler_general_protection+0x74>
        log_printf("the index portion of the error code refers "
   12b47:	83 ec 0c             	sub    $0xc,%esp
   12b4a:	68 00 93 01 00       	push   $0x19300
   12b4f:	e8 d2 5e 00 00       	call   18a26 <log_printf>
   12b54:	83 c4 10             	add    $0x10,%esp
   12b57:	eb 10                	jmp    12b69 <do_handler_general_protection+0x84>
                    "to a gate descriptor in the IDT");
    } else {
        log_printf("the index refers to a descriptor in the GDT");
   12b59:	83 ec 0c             	sub    $0xc,%esp
   12b5c:	68 4c 93 01 00       	push   $0x1934c
   12b61:	e8 c0 5e 00 00       	call   18a26 <log_printf>
   12b66:	83 c4 10             	add    $0x10,%esp
    }
    
    log_printf("segment index: %d", frame->error_code & 0xFFF8);
   12b69:	8b 45 08             	mov    0x8(%ebp),%eax
   12b6c:	8b 40 34             	mov    0x34(%eax),%eax
   12b6f:	25 f8 ff 00 00       	and    $0xfff8,%eax
   12b74:	83 ec 08             	sub    $0x8,%esp
   12b77:	50                   	push   %eax
   12b78:	68 78 93 01 00       	push   $0x19378
   12b7d:	e8 a4 5e 00 00       	call   18a26 <log_printf>
   12b82:	83 c4 10             	add    $0x10,%esp

    dump_core_regs(frame);
   12b85:	83 ec 0c             	sub    $0xc,%esp
   12b88:	ff 75 08             	pushl  0x8(%ebp)
   12b8b:	e8 79 fc ff ff       	call   12809 <dump_core_regs>
   12b90:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12b93:	8b 45 08             	mov    0x8(%ebp),%eax
   12b96:	8b 40 3c             	mov    0x3c(%eax),%eax
   12b99:	83 e0 03             	and    $0x3,%eax
   12b9c:	85 c0                	test   %eax,%eax
   12b9e:	74 14                	je     12bb4 <do_handler_general_protection+0xcf>
        sys_exit(frame->error_code);
   12ba0:	8b 45 08             	mov    0x8(%ebp),%eax
   12ba3:	8b 40 34             	mov    0x34(%eax),%eax
   12ba6:	83 ec 0c             	sub    $0xc,%esp
   12ba9:	50                   	push   %eax
   12baa:	e8 e8 f7 ff ff       	call   12397 <sys_exit>
   12baf:	83 c4 10             	add    $0x10,%esp
    } else {
        for (;;) {
            hlt();
        }
    }
}
   12bb2:	eb 07                	jmp    12bbb <do_handler_general_protection+0xd6>
            hlt();
   12bb4:	e8 2e fc ff ff       	call   127e7 <hlt>
   12bb9:	eb f9                	jmp    12bb4 <do_handler_general_protection+0xcf>
}
   12bbb:	c9                   	leave  
   12bbc:	c3                   	ret    

00012bbd <do_handler_page_fault>:

void do_handler_page_fault(exception_frame_t * frame) {
   12bbd:	55                   	push   %ebp
   12bbe:	89 e5                	mov    %esp,%ebp
   12bc0:	83 ec 08             	sub    $0x8,%esp
    log_printf("--------------------------------");
   12bc3:	83 ec 0c             	sub    $0xc,%esp
   12bc6:	68 ec 90 01 00       	push   $0x190ec
   12bcb:	e8 56 5e 00 00       	call   18a26 <log_printf>
   12bd0:	83 c4 10             	add    $0x10,%esp
    log_printf("IRQ/Exception happend: Page fault.");
   12bd3:	83 ec 0c             	sub    $0xc,%esp
   12bd6:	68 8c 93 01 00       	push   $0x1938c
   12bdb:	e8 46 5e 00 00       	call   18a26 <log_printf>
   12be0:	83 c4 10             	add    $0x10,%esp
    if (frame->error_code & ERR_PAGE_P) {
   12be3:	8b 45 08             	mov    0x8(%ebp),%eax
   12be6:	8b 40 34             	mov    0x34(%eax),%eax
   12be9:	83 e0 01             	and    $0x1,%eax
   12bec:	85 c0                	test   %eax,%eax
   12bee:	74 18                	je     12c08 <do_handler_page_fault+0x4b>
        log_printf("\tpage-level protection violation: 0x%x.", read_cr2());
   12bf0:	e8 b9 fb ff ff       	call   127ae <read_cr2>
   12bf5:	83 ec 08             	sub    $0x8,%esp
   12bf8:	50                   	push   %eax
   12bf9:	68 b0 93 01 00       	push   $0x193b0
   12bfe:	e8 23 5e 00 00       	call   18a26 <log_printf>
   12c03:	83 c4 10             	add    $0x10,%esp
   12c06:	eb 16                	jmp    12c1e <do_handler_page_fault+0x61>
    } else {
         log_printf("\tPage doesn't present 0x%x", read_cr2());
   12c08:	e8 a1 fb ff ff       	call   127ae <read_cr2>
   12c0d:	83 ec 08             	sub    $0x8,%esp
   12c10:	50                   	push   %eax
   12c11:	68 d8 93 01 00       	push   $0x193d8
   12c16:	e8 0b 5e 00 00       	call   18a26 <log_printf>
   12c1b:	83 c4 10             	add    $0x10,%esp
   }
    
    if (frame->error_code & ERR_PAGE_WR) {
   12c1e:	8b 45 08             	mov    0x8(%ebp),%eax
   12c21:	8b 40 34             	mov    0x34(%eax),%eax
   12c24:	83 e0 02             	and    $0x2,%eax
   12c27:	85 c0                	test   %eax,%eax
   12c29:	74 12                	je     12c3d <do_handler_page_fault+0x80>
        log_printf("\tThe access causing the fault was a read.");
   12c2b:	83 ec 0c             	sub    $0xc,%esp
   12c2e:	68 f4 93 01 00       	push   $0x193f4
   12c33:	e8 ee 5d 00 00       	call   18a26 <log_printf>
   12c38:	83 c4 10             	add    $0x10,%esp
   12c3b:	eb 10                	jmp    12c4d <do_handler_page_fault+0x90>
    } else {
        log_printf("\tThe access causing the fault was a write.");
   12c3d:	83 ec 0c             	sub    $0xc,%esp
   12c40:	68 20 94 01 00       	push   $0x19420
   12c45:	e8 dc 5d 00 00       	call   18a26 <log_printf>
   12c4a:	83 c4 10             	add    $0x10,%esp
    }
    
    if (frame->error_code & ERR_PAGE_US) {
   12c4d:	8b 45 08             	mov    0x8(%ebp),%eax
   12c50:	8b 40 34             	mov    0x34(%eax),%eax
   12c53:	83 e0 02             	and    $0x2,%eax
   12c56:	85 c0                	test   %eax,%eax
   12c58:	74 12                	je     12c6c <do_handler_page_fault+0xaf>
        log_printf("\tA supervisor-mode access caused the fault.");
   12c5a:	83 ec 0c             	sub    $0xc,%esp
   12c5d:	68 4c 94 01 00       	push   $0x1944c
   12c62:	e8 bf 5d 00 00       	call   18a26 <log_printf>
   12c67:	83 c4 10             	add    $0x10,%esp
   12c6a:	eb 10                	jmp    12c7c <do_handler_page_fault+0xbf>
    } else {
        log_printf("\tA user-mode access caused the fault.");
   12c6c:	83 ec 0c             	sub    $0xc,%esp
   12c6f:	68 78 94 01 00       	push   $0x19478
   12c74:	e8 ad 5d 00 00       	call   18a26 <log_printf>
   12c79:	83 c4 10             	add    $0x10,%esp
    }

    dump_core_regs(frame);
   12c7c:	83 ec 0c             	sub    $0xc,%esp
   12c7f:	ff 75 08             	pushl  0x8(%ebp)
   12c82:	e8 82 fb ff ff       	call   12809 <dump_core_regs>
   12c87:	83 c4 10             	add    $0x10,%esp
    if (frame->cs & 0x3) {
   12c8a:	8b 45 08             	mov    0x8(%ebp),%eax
   12c8d:	8b 40 3c             	mov    0x3c(%eax),%eax
   12c90:	83 e0 03             	and    $0x3,%eax
   12c93:	85 c0                	test   %eax,%eax
   12c95:	74 14                	je     12cab <do_handler_page_fault+0xee>
        sys_exit(frame->error_code);
   12c97:	8b 45 08             	mov    0x8(%ebp),%eax
   12c9a:	8b 40 34             	mov    0x34(%eax),%eax
   12c9d:	83 ec 0c             	sub    $0xc,%esp
   12ca0:	50                   	push   %eax
   12ca1:	e8 f1 f6 ff ff       	call   12397 <sys_exit>
   12ca6:	83 c4 10             	add    $0x10,%esp
        for (;;) {
            hlt();
        }
    }

}
   12ca9:	eb 07                	jmp    12cb2 <do_handler_page_fault+0xf5>
            hlt();
   12cab:	e8 37 fb ff ff       	call   127e7 <hlt>
   12cb0:	eb f9                	jmp    12cab <do_handler_page_fault+0xee>
}
   12cb2:	c9                   	leave  
   12cb3:	c3                   	ret    

00012cb4 <do_handler_fpu_error>:

void do_handler_fpu_error(exception_frame_t * frame) {
   12cb4:	55                   	push   %ebp
   12cb5:	89 e5                	mov    %esp,%ebp
   12cb7:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "X87 FPU Floating Point Error.");
   12cba:	83 ec 08             	sub    $0x8,%esp
   12cbd:	68 9e 94 01 00       	push   $0x1949e
   12cc2:	ff 75 08             	pushl  0x8(%ebp)
   12cc5:	e8 3e fc ff ff       	call   12908 <do_default_handler>
   12cca:	83 c4 10             	add    $0x10,%esp
}
   12ccd:	90                   	nop
   12cce:	c9                   	leave  
   12ccf:	c3                   	ret    

00012cd0 <do_handler_alignment_check>:

void do_handler_alignment_check(exception_frame_t * frame) {
   12cd0:	55                   	push   %ebp
   12cd1:	89 e5                	mov    %esp,%ebp
   12cd3:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Alignment Check.");
   12cd6:	83 ec 08             	sub    $0x8,%esp
   12cd9:	68 bc 94 01 00       	push   $0x194bc
   12cde:	ff 75 08             	pushl  0x8(%ebp)
   12ce1:	e8 22 fc ff ff       	call   12908 <do_default_handler>
   12ce6:	83 c4 10             	add    $0x10,%esp
}
   12ce9:	90                   	nop
   12cea:	c9                   	leave  
   12ceb:	c3                   	ret    

00012cec <do_handler_machine_check>:

void do_handler_machine_check(exception_frame_t * frame) {
   12cec:	55                   	push   %ebp
   12ced:	89 e5                	mov    %esp,%ebp
   12cef:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Machine Check.");
   12cf2:	83 ec 08             	sub    $0x8,%esp
   12cf5:	68 cd 94 01 00       	push   $0x194cd
   12cfa:	ff 75 08             	pushl  0x8(%ebp)
   12cfd:	e8 06 fc ff ff       	call   12908 <do_default_handler>
   12d02:	83 c4 10             	add    $0x10,%esp
}
   12d05:	90                   	nop
   12d06:	c9                   	leave  
   12d07:	c3                   	ret    

00012d08 <do_handler_smd_exception>:

void do_handler_smd_exception(exception_frame_t * frame) {
   12d08:	55                   	push   %ebp
   12d09:	89 e5                	mov    %esp,%ebp
   12d0b:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "SIMD Floating Point Exception.");
   12d0e:	83 ec 08             	sub    $0x8,%esp
   12d11:	68 dc 94 01 00       	push   $0x194dc
   12d16:	ff 75 08             	pushl  0x8(%ebp)
   12d19:	e8 ea fb ff ff       	call   12908 <do_default_handler>
   12d1e:	83 c4 10             	add    $0x10,%esp
}
   12d21:	90                   	nop
   12d22:	c9                   	leave  
   12d23:	c3                   	ret    

00012d24 <do_handler_virtual_exception>:

void do_handler_virtual_exception(exception_frame_t * frame) {
   12d24:	55                   	push   %ebp
   12d25:	89 e5                	mov    %esp,%ebp
   12d27:	83 ec 08             	sub    $0x8,%esp
	do_default_handler(frame, "Virtualization Exception.");
   12d2a:	83 ec 08             	sub    $0x8,%esp
   12d2d:	68 fb 94 01 00       	push   $0x194fb
   12d32:	ff 75 08             	pushl  0x8(%ebp)
   12d35:	e8 ce fb ff ff       	call   12908 <do_default_handler>
   12d3a:	83 c4 10             	add    $0x10,%esp
}
   12d3d:	90                   	nop
   12d3e:	c9                   	leave  
   12d3f:	c3                   	ret    

00012d40 <init_pic>:

static void init_pic(void) {
   12d40:	55                   	push   %ebp
   12d41:	89 e5                	mov    %esp,%ebp
    outb(PIC0_ICW1, PIC_ICW1_ALWAYS_1 | PIC_ICW1_ICW4);
   12d43:	6a 11                	push   $0x11
   12d45:	6a 20                	push   $0x20
   12d47:	e8 35 fa ff ff       	call   12781 <outb>
   12d4c:	83 c4 08             	add    $0x8,%esp

    
    outb(PIC0_ICW2, IRQ_PIC_START);
   12d4f:	6a 20                	push   $0x20
   12d51:	6a 21                	push   $0x21
   12d53:	e8 29 fa ff ff       	call   12781 <outb>
   12d58:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_ICW3, 1 << 2);
   12d5b:	6a 04                	push   $0x4
   12d5d:	6a 21                	push   $0x21
   12d5f:	e8 1d fa ff ff       	call   12781 <outb>
   12d64:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_ICW4, PIC_ICW4_8086);
   12d67:	6a 01                	push   $0x1
   12d69:	6a 21                	push   $0x21
   12d6b:	e8 11 fa ff ff       	call   12781 <outb>
   12d70:	83 c4 08             	add    $0x8,%esp

    outb(PIC1_ICW1, PIC_ICW1_ICW4 | PIC_ICW1_ALWAYS_1);
   12d73:	6a 11                	push   $0x11
   12d75:	68 a0 00 00 00       	push   $0xa0
   12d7a:	e8 02 fa ff ff       	call   12781 <outb>
   12d7f:	83 c4 08             	add    $0x8,%esp

    outb(PIC1_ICW2, IRQ_PIC_START + 8);
   12d82:	6a 28                	push   $0x28
   12d84:	68 a1 00 00 00       	push   $0xa1
   12d89:	e8 f3 f9 ff ff       	call   12781 <outb>
   12d8e:	83 c4 08             	add    $0x8,%esp

    outb(PIC1_ICW3, 2);
   12d91:	6a 02                	push   $0x2
   12d93:	68 a1 00 00 00       	push   $0xa1
   12d98:	e8 e4 f9 ff ff       	call   12781 <outb>
   12d9d:	83 c4 08             	add    $0x8,%esp

    outb(PIC1_ICW4, PIC_ICW4_8086);
   12da0:	6a 01                	push   $0x1
   12da2:	68 a1 00 00 00       	push   $0xa1
   12da7:	e8 d5 f9 ff ff       	call   12781 <outb>
   12dac:	83 c4 08             	add    $0x8,%esp

    outb(PIC0_IMR, 0xFF & ~(1 << 2));
   12daf:	68 fb 00 00 00       	push   $0xfb
   12db4:	6a 21                	push   $0x21
   12db6:	e8 c6 f9 ff ff       	call   12781 <outb>
   12dbb:	83 c4 08             	add    $0x8,%esp
    outb(PIC1_IMR, 0xFF);
   12dbe:	68 ff 00 00 00       	push   $0xff
   12dc3:	68 a1 00 00 00       	push   $0xa1
   12dc8:	e8 b4 f9 ff ff       	call   12781 <outb>
   12dcd:	83 c4 08             	add    $0x8,%esp
}
   12dd0:	90                   	nop
   12dd1:	c9                   	leave  
   12dd2:	c3                   	ret    

00012dd3 <pic_send_eoi>:

void pic_send_eoi(int irq_num) {
   12dd3:	55                   	push   %ebp
   12dd4:	89 e5                	mov    %esp,%ebp
    irq_num -= IRQ_PIC_START;
   12dd6:	83 6d 08 20          	subl   $0x20,0x8(%ebp)

    if (irq_num >= 8) {
   12dda:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12dde:	7e 0f                	jle    12def <pic_send_eoi+0x1c>
        outb(PIC1_OCW2, PIC_OCW2_EOI);
   12de0:	6a 20                	push   $0x20
   12de2:	68 a0 00 00 00       	push   $0xa0
   12de7:	e8 95 f9 ff ff       	call   12781 <outb>
   12dec:	83 c4 08             	add    $0x8,%esp
    }

    outb(PIC0_OCW2, PIC_OCW2_EOI);
   12def:	6a 20                	push   $0x20
   12df1:	6a 20                	push   $0x20
   12df3:	e8 89 f9 ff ff       	call   12781 <outb>
   12df8:	83 c4 08             	add    $0x8,%esp
}
   12dfb:	90                   	nop
   12dfc:	c9                   	leave  
   12dfd:	c3                   	ret    

00012dfe <irq_init>:


void irq_init(void) {
   12dfe:	55                   	push   %ebp
   12dff:	89 e5                	mov    %esp,%ebp
   12e01:	83 ec 18             	sub    $0x18,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e04:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   12e0b:	eb 25                	jmp    12e32 <irq_init+0x34>
    	gate_desc_set(idt_table + i, KERNEL_SELECTOR_CS, (uint32_t) exception_handler_unknown,
   12e0d:	ba 28 00 01 00       	mov    $0x10028,%edx
   12e12:	8b 45 f4             	mov    -0xc(%ebp),%eax
   12e15:	c1 e0 03             	shl    $0x3,%eax
   12e18:	05 00 52 03 00       	add    $0x35200,%eax
   12e1d:	68 00 8e 00 00       	push   $0x8e00
   12e22:	52                   	push   %edx
   12e23:	6a 08                	push   $0x8
   12e25:	50                   	push   %eax
   12e26:	e8 87 f7 ff ff       	call   125b2 <gate_desc_set>
   12e2b:	83 c4 10             	add    $0x10,%esp
	for (uint32_t i = 0; i < IDT_TABLE_NR; i++) {
   12e2e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   12e32:	83 7d f4 7f          	cmpl   $0x7f,-0xc(%ebp)
   12e36:	76 d5                	jbe    12e0d <irq_init+0xf>
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	}

    irq_install(IRQ0_DE, exception_handler_divider);
   12e38:	83 ec 08             	sub    $0x8,%esp
   12e3b:	68 47 00 01 00       	push   $0x10047
   12e40:	6a 00                	push   $0x0
   12e42:	e8 65 01 00 00       	call   12fac <irq_install>
   12e47:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ1_DB, exception_handler_Debug);
   12e4a:	83 ec 08             	sub    $0x8,%esp
   12e4d:	68 66 00 01 00       	push   $0x10066
   12e52:	6a 01                	push   $0x1
   12e54:	e8 53 01 00 00       	call   12fac <irq_install>
   12e59:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ2_NMI, exception_handler_NMI);
   12e5c:	83 ec 08             	sub    $0x8,%esp
   12e5f:	68 85 00 01 00       	push   $0x10085
   12e64:	6a 02                	push   $0x2
   12e66:	e8 41 01 00 00       	call   12fac <irq_install>
   12e6b:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ3_BP, exception_handler_breakpoint);
   12e6e:	83 ec 08             	sub    $0x8,%esp
   12e71:	68 a4 00 01 00       	push   $0x100a4
   12e76:	6a 03                	push   $0x3
   12e78:	e8 2f 01 00 00       	call   12fac <irq_install>
   12e7d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ4_OF, exception_handler_overflow);
   12e80:	83 ec 08             	sub    $0x8,%esp
   12e83:	68 c3 00 01 00       	push   $0x100c3
   12e88:	6a 04                	push   $0x4
   12e8a:	e8 1d 01 00 00       	call   12fac <irq_install>
   12e8f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ5_BR, exception_handler_bound_range);
   12e92:	83 ec 08             	sub    $0x8,%esp
   12e95:	68 e2 00 01 00       	push   $0x100e2
   12e9a:	6a 05                	push   $0x5
   12e9c:	e8 0b 01 00 00       	call   12fac <irq_install>
   12ea1:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ6_UD, exception_handler_invalid_opcode);
   12ea4:	83 ec 08             	sub    $0x8,%esp
   12ea7:	68 01 01 01 00       	push   $0x10101
   12eac:	6a 06                	push   $0x6
   12eae:	e8 f9 00 00 00       	call   12fac <irq_install>
   12eb3:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ7_NM, exception_handler_device_unavailable);
   12eb6:	83 ec 08             	sub    $0x8,%esp
   12eb9:	68 20 01 01 00       	push   $0x10120
   12ebe:	6a 07                	push   $0x7
   12ec0:	e8 e7 00 00 00       	call   12fac <irq_install>
   12ec5:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ8_DF, exception_handler_double_fault);
   12ec8:	83 ec 08             	sub    $0x8,%esp
   12ecb:	68 3f 01 01 00       	push   $0x1013f
   12ed0:	6a 08                	push   $0x8
   12ed2:	e8 d5 00 00 00       	call   12fac <irq_install>
   12ed7:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ10_TS, exception_handler_invalid_tss);
   12eda:	83 ec 08             	sub    $0x8,%esp
   12edd:	68 5c 01 01 00       	push   $0x1015c
   12ee2:	6a 0a                	push   $0xa
   12ee4:	e8 c3 00 00 00       	call   12fac <irq_install>
   12ee9:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ11_NP, exception_handler_segment_not_present);
   12eec:	83 ec 08             	sub    $0x8,%esp
   12eef:	68 79 01 01 00       	push   $0x10179
   12ef4:	6a 0b                	push   $0xb
   12ef6:	e8 b1 00 00 00       	call   12fac <irq_install>
   12efb:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ12_SS, exception_handler_stack_segment_fault);
   12efe:	83 ec 08             	sub    $0x8,%esp
   12f01:	68 96 01 01 00       	push   $0x10196
   12f06:	6a 0c                	push   $0xc
   12f08:	e8 9f 00 00 00       	call   12fac <irq_install>
   12f0d:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ13_GP, exception_handler_general_protection);
   12f10:	83 ec 08             	sub    $0x8,%esp
   12f13:	68 b3 01 01 00       	push   $0x101b3
   12f18:	6a 0d                	push   $0xd
   12f1a:	e8 8d 00 00 00       	call   12fac <irq_install>
   12f1f:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ14_PF, exception_handler_page_fault);
   12f22:	83 ec 08             	sub    $0x8,%esp
   12f25:	68 d0 01 01 00       	push   $0x101d0
   12f2a:	6a 0e                	push   $0xe
   12f2c:	e8 7b 00 00 00       	call   12fac <irq_install>
   12f31:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ16_MF, exception_handler_fpu_error);
   12f34:	83 ec 08             	sub    $0x8,%esp
   12f37:	68 ed 01 01 00       	push   $0x101ed
   12f3c:	6a 10                	push   $0x10
   12f3e:	e8 69 00 00 00       	call   12fac <irq_install>
   12f43:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ17_AC, exception_handler_alignment_check);
   12f46:	83 ec 08             	sub    $0x8,%esp
   12f49:	68 0c 02 01 00       	push   $0x1020c
   12f4e:	6a 11                	push   $0x11
   12f50:	e8 57 00 00 00       	call   12fac <irq_install>
   12f55:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ18_MC, exception_handler_machine_check);
   12f58:	83 ec 08             	sub    $0x8,%esp
   12f5b:	68 29 02 01 00       	push   $0x10229
   12f60:	6a 12                	push   $0x12
   12f62:	e8 45 00 00 00       	call   12fac <irq_install>
   12f67:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ19_XM, exception_handler_smd_exception);
   12f6a:	83 ec 08             	sub    $0x8,%esp
   12f6d:	68 48 02 01 00       	push   $0x10248
   12f72:	6a 13                	push   $0x13
   12f74:	e8 33 00 00 00       	call   12fac <irq_install>
   12f79:	83 c4 10             	add    $0x10,%esp
	irq_install(IRQ20_VE, exception_handler_virtual_exception);
   12f7c:	83 ec 08             	sub    $0x8,%esp
   12f7f:	68 67 02 01 00       	push   $0x10267
   12f84:	6a 14                	push   $0x14
   12f86:	e8 21 00 00 00       	call   12fac <irq_install>
   12f8b:	83 c4 10             	add    $0x10,%esp


	lidt((uint32_t)idt_table, sizeof(idt_table));
   12f8e:	b8 00 52 03 00       	mov    $0x35200,%eax
   12f93:	83 ec 08             	sub    $0x8,%esp
   12f96:	68 00 04 00 00       	push   $0x400
   12f9b:	50                   	push   %eax
   12f9c:	e8 1e f8 ff ff       	call   127bf <lidt>
   12fa1:	83 c4 10             	add    $0x10,%esp

	init_pic();
   12fa4:	e8 97 fd ff ff       	call   12d40 <init_pic>
}
   12fa9:	90                   	nop
   12faa:	c9                   	leave  
   12fab:	c3                   	ret    

00012fac <irq_install>:


int irq_install(int irq_num, irq_handler_t handler) {
   12fac:	55                   	push   %ebp
   12fad:	89 e5                	mov    %esp,%ebp
   12faf:	83 ec 08             	sub    $0x8,%esp
	if (irq_num >= IDT_TABLE_NR) {
   12fb2:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   12fb6:	7e 07                	jle    12fbf <irq_install+0x13>
		return -1;
   12fb8:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   12fbd:	eb 25                	jmp    12fe4 <irq_install+0x38>
	}

    gate_desc_set(idt_table + irq_num, KERNEL_SELECTOR_CS, (uint32_t) handler,
   12fbf:	8b 45 0c             	mov    0xc(%ebp),%eax
   12fc2:	8b 55 08             	mov    0x8(%ebp),%edx
   12fc5:	c1 e2 03             	shl    $0x3,%edx
   12fc8:	81 c2 00 52 03 00    	add    $0x35200,%edx
   12fce:	68 00 8e 00 00       	push   $0x8e00
   12fd3:	50                   	push   %eax
   12fd4:	6a 08                	push   $0x8
   12fd6:	52                   	push   %edx
   12fd7:	e8 d6 f5 ff ff       	call   125b2 <gate_desc_set>
   12fdc:	83 c4 10             	add    $0x10,%esp
                  GATE_P_PRESENT | GATE_DPL0 | GATE_TYPE_IDT);
	return 0;
   12fdf:	b8 00 00 00 00       	mov    $0x0,%eax
}
   12fe4:	c9                   	leave  
   12fe5:	c3                   	ret    

00012fe6 <irq_enable>:

void irq_enable(int irq_num) {
   12fe6:	55                   	push   %ebp
   12fe7:	89 e5                	mov    %esp,%ebp
   12fe9:	53                   	push   %ebx
   12fea:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   12fed:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   12ff1:	7e 78                	jle    1306b <irq_enable+0x85>
        return;
    }

    irq_num -= IRQ_PIC_START;
   12ff3:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   12ff7:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   12ffb:	7f 32                	jg     1302f <irq_enable+0x49>
        uint8_t mask = inb(PIC0_IMR) & ~(1 << irq_num);
   12ffd:	6a 21                	push   $0x21
   12fff:	e8 60 f7 ff ff       	call   12764 <inb>
   13004:	83 c4 04             	add    $0x4,%esp
   13007:	89 c2                	mov    %eax,%edx
   13009:	8b 45 08             	mov    0x8(%ebp),%eax
   1300c:	bb 01 00 00 00       	mov    $0x1,%ebx
   13011:	89 c1                	mov    %eax,%ecx
   13013:	d3 e3                	shl    %cl,%ebx
   13015:	89 d8                	mov    %ebx,%eax
   13017:	f7 d0                	not    %eax
   13019:	21 d0                	and    %edx,%eax
   1301b:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   1301e:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   13022:	50                   	push   %eax
   13023:	6a 21                	push   $0x21
   13025:	e8 57 f7 ff ff       	call   12781 <outb>
   1302a:	83 c4 08             	add    $0x8,%esp
   1302d:	eb 3d                	jmp    1306c <irq_enable+0x86>
    } else {
        irq_num -= 8;
   1302f:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) & ~(1 << irq_num);
   13033:	68 a1 00 00 00       	push   $0xa1
   13038:	e8 27 f7 ff ff       	call   12764 <inb>
   1303d:	83 c4 04             	add    $0x4,%esp
   13040:	89 c2                	mov    %eax,%edx
   13042:	8b 45 08             	mov    0x8(%ebp),%eax
   13045:	bb 01 00 00 00       	mov    $0x1,%ebx
   1304a:	89 c1                	mov    %eax,%ecx
   1304c:	d3 e3                	shl    %cl,%ebx
   1304e:	89 d8                	mov    %ebx,%eax
   13050:	f7 d0                	not    %eax
   13052:	21 d0                	and    %edx,%eax
   13054:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   13057:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   1305b:	50                   	push   %eax
   1305c:	68 a1 00 00 00       	push   $0xa1
   13061:	e8 1b f7 ff ff       	call   12781 <outb>
   13066:	83 c4 08             	add    $0x8,%esp
   13069:	eb 01                	jmp    1306c <irq_enable+0x86>
        return;
   1306b:	90                   	nop
    }
}
   1306c:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1306f:	c9                   	leave  
   13070:	c3                   	ret    

00013071 <irq_disable>:

void irq_disable(int irq_num) {
   13071:	55                   	push   %ebp
   13072:	89 e5                	mov    %esp,%ebp
   13074:	53                   	push   %ebx
   13075:	83 ec 10             	sub    $0x10,%esp
    if (irq_num < IRQ_PIC_START) {
   13078:	83 7d 08 1f          	cmpl   $0x1f,0x8(%ebp)
   1307c:	7e 74                	jle    130f2 <irq_disable+0x81>
        return;
    }

    irq_num -= IRQ_PIC_START;
   1307e:	83 6d 08 20          	subl   $0x20,0x8(%ebp)
    if (irq_num < 8) {
   13082:	83 7d 08 07          	cmpl   $0x7,0x8(%ebp)
   13086:	7f 30                	jg     130b8 <irq_disable+0x47>
        uint8_t mask = inb(PIC0_IMR) | (1 << irq_num);
   13088:	6a 21                	push   $0x21
   1308a:	e8 d5 f6 ff ff       	call   12764 <inb>
   1308f:	83 c4 04             	add    $0x4,%esp
   13092:	89 c3                	mov    %eax,%ebx
   13094:	8b 45 08             	mov    0x8(%ebp),%eax
   13097:	ba 01 00 00 00       	mov    $0x1,%edx
   1309c:	89 c1                	mov    %eax,%ecx
   1309e:	d3 e2                	shl    %cl,%edx
   130a0:	89 d0                	mov    %edx,%eax
   130a2:	09 d8                	or     %ebx,%eax
   130a4:	88 45 fa             	mov    %al,-0x6(%ebp)
        outb(PIC0_IMR, mask);
   130a7:	0f b6 45 fa          	movzbl -0x6(%ebp),%eax
   130ab:	50                   	push   %eax
   130ac:	6a 21                	push   $0x21
   130ae:	e8 ce f6 ff ff       	call   12781 <outb>
   130b3:	83 c4 08             	add    $0x8,%esp
   130b6:	eb 3b                	jmp    130f3 <irq_disable+0x82>
    } else {
        irq_num -= 8;
   130b8:	83 6d 08 08          	subl   $0x8,0x8(%ebp)
        uint8_t mask = inb(PIC1_IMR) | (1 << irq_num);
   130bc:	68 a1 00 00 00       	push   $0xa1
   130c1:	e8 9e f6 ff ff       	call   12764 <inb>
   130c6:	83 c4 04             	add    $0x4,%esp
   130c9:	89 c3                	mov    %eax,%ebx
   130cb:	8b 45 08             	mov    0x8(%ebp),%eax
   130ce:	ba 01 00 00 00       	mov    $0x1,%edx
   130d3:	89 c1                	mov    %eax,%ecx
   130d5:	d3 e2                	shl    %cl,%edx
   130d7:	89 d0                	mov    %edx,%eax
   130d9:	09 d8                	or     %ebx,%eax
   130db:	88 45 fb             	mov    %al,-0x5(%ebp)
        outb(PIC1_IMR, mask);
   130de:	0f b6 45 fb          	movzbl -0x5(%ebp),%eax
   130e2:	50                   	push   %eax
   130e3:	68 a1 00 00 00       	push   $0xa1
   130e8:	e8 94 f6 ff ff       	call   12781 <outb>
   130ed:	83 c4 08             	add    $0x8,%esp
   130f0:	eb 01                	jmp    130f3 <irq_disable+0x82>
        return;
   130f2:	90                   	nop
    }
}
   130f3:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   130f6:	c9                   	leave  
   130f7:	c3                   	ret    

000130f8 <irq_disable_global>:

void irq_disable_global(void) {
   130f8:	55                   	push   %ebp
   130f9:	89 e5                	mov    %esp,%ebp
    cli();
   130fb:	e8 a0 f6 ff ff       	call   127a0 <cli>
}
   13100:	90                   	nop
   13101:	5d                   	pop    %ebp
   13102:	c3                   	ret    

00013103 <irq_enable_global>:

void irq_enable_global(void) {
   13103:	55                   	push   %ebp
   13104:	89 e5                	mov    %esp,%ebp
    sti();
   13106:	e8 9c f6 ff ff       	call   127a7 <sti>
}
   1310b:	90                   	nop
   1310c:	5d                   	pop    %ebp
   1310d:	c3                   	ret    

0001310e <irq_enter_protection>:

irq_state_t irq_enter_protection (void) {
   1310e:	55                   	push   %ebp
   1310f:	89 e5                	mov    %esp,%ebp
   13111:	83 ec 10             	sub    $0x10,%esp
    irq_state_t state = read_eflags();
   13114:	e8 d5 f6 ff ff       	call   127ee <read_eflags>
   13119:	89 45 fc             	mov    %eax,-0x4(%ebp)
    irq_disable_global();
   1311c:	e8 d7 ff ff ff       	call   130f8 <irq_disable_global>
    return state;
   13121:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13124:	c9                   	leave  
   13125:	c3                   	ret    

00013126 <irq_leave_protection>:


void irq_leave_protection (irq_state_t state) {
   13126:	55                   	push   %ebp
   13127:	89 e5                	mov    %esp,%ebp
    write_eflags(state);
   13129:	ff 75 08             	pushl  0x8(%ebp)
   1312c:	e8 cd f6 ff ff       	call   127fe <write_eflags>
   13131:	83 c4 04             	add    $0x4,%esp
}
   13134:	90                   	nop
   13135:	c9                   	leave  
   13136:	c3                   	ret    

00013137 <inb>:
static inline uint8_t inb(uint16_t  port) {
   13137:	55                   	push   %ebp
   13138:	89 e5                	mov    %esp,%ebp
   1313a:	83 ec 14             	sub    $0x14,%esp
   1313d:	8b 45 08             	mov    0x8(%ebp),%eax
   13140:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   13144:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   13148:	89 c2                	mov    %eax,%edx
   1314a:	ec                   	in     (%dx),%al
   1314b:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1314e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   13152:	c9                   	leave  
   13153:	c3                   	ret    

00013154 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   13154:	55                   	push   %ebp
   13155:	89 e5                	mov    %esp,%ebp
   13157:	83 ec 08             	sub    $0x8,%esp
   1315a:	8b 55 08             	mov    0x8(%ebp),%edx
   1315d:	8b 45 0c             	mov    0xc(%ebp),%eax
   13160:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   13164:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   13167:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1316b:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1316f:	ee                   	out    %al,(%dx)
}
   13170:	90                   	nop
   13171:	c9                   	leave  
   13172:	c3                   	ret    

00013173 <read_cursor_pos>:
#define CONSOLE_NR          8        

static console_t console_buf[CONSOLE_NR];


static int read_cursor_pos (void) {
   13173:	55                   	push   %ebp
   13174:	89 e5                	mov    %esp,%ebp
   13176:	83 ec 18             	sub    $0x18,%esp
    int pos;

    irq_state_t state = irq_enter_protection();
   13179:	e8 90 ff ff ff       	call   1310e <irq_enter_protection>
   1317e:	89 45 f4             	mov    %eax,-0xc(%ebp)
 	outb(0x3D4, 0x0F);		
   13181:	83 ec 08             	sub    $0x8,%esp
   13184:	6a 0f                	push   $0xf
   13186:	68 d4 03 00 00       	push   $0x3d4
   1318b:	e8 c4 ff ff ff       	call   13154 <outb>
   13190:	83 c4 10             	add    $0x10,%esp
	pos = inb(0x3D5);
   13193:	83 ec 0c             	sub    $0xc,%esp
   13196:	68 d5 03 00 00       	push   $0x3d5
   1319b:	e8 97 ff ff ff       	call   13137 <inb>
   131a0:	83 c4 10             	add    $0x10,%esp
   131a3:	0f b6 c0             	movzbl %al,%eax
   131a6:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0E);		
   131a9:	83 ec 08             	sub    $0x8,%esp
   131ac:	6a 0e                	push   $0xe
   131ae:	68 d4 03 00 00       	push   $0x3d4
   131b3:	e8 9c ff ff ff       	call   13154 <outb>
   131b8:	83 c4 10             	add    $0x10,%esp
	pos |= inb(0x3D5) << 8;   
   131bb:	83 ec 0c             	sub    $0xc,%esp
   131be:	68 d5 03 00 00       	push   $0x3d5
   131c3:	e8 6f ff ff ff       	call   13137 <inb>
   131c8:	83 c4 10             	add    $0x10,%esp
   131cb:	0f b6 c0             	movzbl %al,%eax
   131ce:	c1 e0 08             	shl    $0x8,%eax
   131d1:	09 45 f0             	or     %eax,-0x10(%ebp)
    irq_leave_protection(state);
   131d4:	83 ec 0c             	sub    $0xc,%esp
   131d7:	ff 75 f4             	pushl  -0xc(%ebp)
   131da:	e8 47 ff ff ff       	call   13126 <irq_leave_protection>
   131df:	83 c4 10             	add    $0x10,%esp
    return pos;
   131e2:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   131e5:	c9                   	leave  
   131e6:	c3                   	ret    

000131e7 <update_cursor_pos>:


static void update_cursor_pos (console_t * console) {
   131e7:	55                   	push   %ebp
   131e8:	89 e5                	mov    %esp,%ebp
   131ea:	83 ec 18             	sub    $0x18,%esp
	uint16_t pos = (console - console_buf) * (console->display_cols * console->display_rows);
   131ed:	8b 45 08             	mov    0x8(%ebp),%eax
   131f0:	ba 00 56 03 00       	mov    $0x35600,%edx
   131f5:	29 d0                	sub    %edx,%eax
   131f7:	c1 f8 03             	sar    $0x3,%eax
   131fa:	69 c0 c5 4e ec c4    	imul   $0xc4ec4ec5,%eax,%eax
   13200:	89 c2                	mov    %eax,%edx
   13202:	8b 45 08             	mov    0x8(%ebp),%eax
   13205:	8b 40 14             	mov    0x14(%eax),%eax
   13208:	89 c1                	mov    %eax,%ecx
   1320a:	8b 45 08             	mov    0x8(%ebp),%eax
   1320d:	8b 40 10             	mov    0x10(%eax),%eax
   13210:	0f af c1             	imul   %ecx,%eax
   13213:	0f af c2             	imul   %edx,%eax
   13216:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    pos += console->cursor_row *  console->display_cols + console->cursor_col;
   1321a:	8b 45 08             	mov    0x8(%ebp),%eax
   1321d:	8b 40 08             	mov    0x8(%eax),%eax
   13220:	89 c2                	mov    %eax,%edx
   13222:	8b 45 08             	mov    0x8(%ebp),%eax
   13225:	8b 40 14             	mov    0x14(%eax),%eax
   13228:	0f af d0             	imul   %eax,%edx
   1322b:	8b 45 08             	mov    0x8(%ebp),%eax
   1322e:	8b 40 0c             	mov    0xc(%eax),%eax
   13231:	01 d0                	add    %edx,%eax
   13233:	66 01 45 f6          	add    %ax,-0xa(%ebp)

    irq_state_t state = irq_enter_protection();
   13237:	e8 d2 fe ff ff       	call   1310e <irq_enter_protection>
   1323c:	89 45 f0             	mov    %eax,-0x10(%ebp)
	outb(0x3D4, 0x0F);		
   1323f:	83 ec 08             	sub    $0x8,%esp
   13242:	6a 0f                	push   $0xf
   13244:	68 d4 03 00 00       	push   $0x3d4
   13249:	e8 06 ff ff ff       	call   13154 <outb>
   1324e:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   13251:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   13255:	0f b6 c0             	movzbl %al,%eax
   13258:	83 ec 08             	sub    $0x8,%esp
   1325b:	50                   	push   %eax
   1325c:	68 d5 03 00 00       	push   $0x3d5
   13261:	e8 ee fe ff ff       	call   13154 <outb>
   13266:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0x0E);		
   13269:	83 ec 08             	sub    $0x8,%esp
   1326c:	6a 0e                	push   $0xe
   1326e:	68 d4 03 00 00       	push   $0x3d4
   13273:	e8 dc fe ff ff       	call   13154 <outb>
   13278:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   1327b:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   1327f:	66 c1 e8 08          	shr    $0x8,%ax
   13283:	0f b6 c0             	movzbl %al,%eax
   13286:	83 ec 08             	sub    $0x8,%esp
   13289:	50                   	push   %eax
   1328a:	68 d5 03 00 00       	push   $0x3d5
   1328f:	e8 c0 fe ff ff       	call   13154 <outb>
   13294:	83 c4 10             	add    $0x10,%esp
    irq_leave_protection(state);
   13297:	83 ec 0c             	sub    $0xc,%esp
   1329a:	ff 75 f0             	pushl  -0x10(%ebp)
   1329d:	e8 84 fe ff ff       	call   13126 <irq_leave_protection>
   132a2:	83 c4 10             	add    $0x10,%esp
}
   132a5:	90                   	nop
   132a6:	c9                   	leave  
   132a7:	c3                   	ret    

000132a8 <console_set_cursor>:

void console_set_cursor(int idx, int visiable) {
   132a8:	55                   	push   %ebp
   132a9:	89 e5                	mov    %esp,%ebp
   132ab:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   132ae:	8b 45 08             	mov    0x8(%ebp),%eax
   132b1:	6b c0 68             	imul   $0x68,%eax,%eax
   132b4:	05 00 56 03 00       	add    $0x35600,%eax
   132b9:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   132bc:	e8 4d fe ff ff       	call   1310e <irq_enter_protection>
   132c1:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (visiable) {
   132c4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   132c8:	74 79                	je     13343 <console_set_cursor+0x9b>
        outb(0x3D4, 0x0A);
   132ca:	83 ec 08             	sub    $0x8,%esp
   132cd:	6a 0a                	push   $0xa
   132cf:	68 d4 03 00 00       	push   $0x3d4
   132d4:	e8 7b fe ff ff       	call   13154 <outb>
   132d9:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xC0) | 0);
   132dc:	83 ec 0c             	sub    $0xc,%esp
   132df:	68 d5 03 00 00       	push   $0x3d5
   132e4:	e8 4e fe ff ff       	call   13137 <inb>
   132e9:	83 c4 10             	add    $0x10,%esp
   132ec:	0f b6 c0             	movzbl %al,%eax
   132ef:	25 c0 00 00 00       	and    $0xc0,%eax
   132f4:	83 ec 08             	sub    $0x8,%esp
   132f7:	50                   	push   %eax
   132f8:	68 d5 03 00 00       	push   $0x3d5
   132fd:	e8 52 fe ff ff       	call   13154 <outb>
   13302:	83 c4 10             	add    $0x10,%esp
        outb(0x3D4, 0x0B);
   13305:	83 ec 08             	sub    $0x8,%esp
   13308:	6a 0b                	push   $0xb
   1330a:	68 d4 03 00 00       	push   $0x3d4
   1330f:	e8 40 fe ff ff       	call   13154 <outb>
   13314:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, (inb(0x3D5) & 0xE0) | 15);
   13317:	83 ec 0c             	sub    $0xc,%esp
   1331a:	68 d5 03 00 00       	push   $0x3d5
   1331f:	e8 13 fe ff ff       	call   13137 <inb>
   13324:	83 c4 10             	add    $0x10,%esp
   13327:	83 e0 e0             	and    $0xffffffe0,%eax
   1332a:	83 c8 0f             	or     $0xf,%eax
   1332d:	0f b6 c0             	movzbl %al,%eax
   13330:	83 ec 08             	sub    $0x8,%esp
   13333:	50                   	push   %eax
   13334:	68 d5 03 00 00       	push   $0x3d5
   13339:	e8 16 fe ff ff       	call   13154 <outb>
   1333e:	83 c4 10             	add    $0x10,%esp
   13341:	eb 24                	jmp    13367 <console_set_cursor+0xbf>
    } else {
        outb(0x3D4, 0x0A);
   13343:	83 ec 08             	sub    $0x8,%esp
   13346:	6a 0a                	push   $0xa
   13348:	68 d4 03 00 00       	push   $0x3d4
   1334d:	e8 02 fe ff ff       	call   13154 <outb>
   13352:	83 c4 10             	add    $0x10,%esp
        outb(0x3D5, 0x20);
   13355:	83 ec 08             	sub    $0x8,%esp
   13358:	6a 20                	push   $0x20
   1335a:	68 d5 03 00 00       	push   $0x3d5
   1335f:	e8 f0 fd ff ff       	call   13154 <outb>
   13364:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   13367:	83 ec 0c             	sub    $0xc,%esp
   1336a:	ff 75 f0             	pushl  -0x10(%ebp)
   1336d:	e8 b4 fd ff ff       	call   13126 <irq_leave_protection>
   13372:	83 c4 10             	add    $0x10,%esp
}
   13375:	90                   	nop
   13376:	c9                   	leave  
   13377:	c3                   	ret    

00013378 <console_select>:


void console_select(int idx) {
   13378:	55                   	push   %ebp
   13379:	89 e5                	mov    %esp,%ebp
   1337b:	83 ec 18             	sub    $0x18,%esp
    console_t * console = console_buf + idx;
   1337e:	8b 45 08             	mov    0x8(%ebp),%eax
   13381:	6b c0 68             	imul   $0x68,%eax,%eax
   13384:	05 00 56 03 00       	add    $0x35600,%eax
   13389:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (console->disp_base == 0) {
   1338c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1338f:	8b 00                	mov    (%eax),%eax
   13391:	85 c0                	test   %eax,%eax
   13393:	75 0e                	jne    133a3 <console_select+0x2b>
       
        console_init(idx);
   13395:	83 ec 0c             	sub    $0xc,%esp
   13398:	ff 75 08             	pushl  0x8(%ebp)
   1339b:	e8 9e 04 00 00       	call   1383e <console_init>
   133a0:	83 c4 10             	add    $0x10,%esp
    }

	uint16_t pos = idx * console->display_cols * console->display_rows;
   133a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133a6:	8b 40 14             	mov    0x14(%eax),%eax
   133a9:	89 c2                	mov    %eax,%edx
   133ab:	8b 45 08             	mov    0x8(%ebp),%eax
   133ae:	0f af d0             	imul   %eax,%edx
   133b1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   133b4:	8b 40 10             	mov    0x10(%eax),%eax
   133b7:	0f af c2             	imul   %edx,%eax
   133ba:	66 89 45 f2          	mov    %ax,-0xe(%ebp)

	outb(0x3D4, 0xC);		
   133be:	83 ec 08             	sub    $0x8,%esp
   133c1:	6a 0c                	push   $0xc
   133c3:	68 d4 03 00 00       	push   $0x3d4
   133c8:	e8 87 fd ff ff       	call   13154 <outb>
   133cd:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) ((pos >> 8) & 0xFF));
   133d0:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   133d4:	66 c1 e8 08          	shr    $0x8,%ax
   133d8:	0f b6 c0             	movzbl %al,%eax
   133db:	83 ec 08             	sub    $0x8,%esp
   133de:	50                   	push   %eax
   133df:	68 d5 03 00 00       	push   $0x3d5
   133e4:	e8 6b fd ff ff       	call   13154 <outb>
   133e9:	83 c4 10             	add    $0x10,%esp
	outb(0x3D4, 0xD);		
   133ec:	83 ec 08             	sub    $0x8,%esp
   133ef:	6a 0d                	push   $0xd
   133f1:	68 d4 03 00 00       	push   $0x3d4
   133f6:	e8 59 fd ff ff       	call   13154 <outb>
   133fb:	83 c4 10             	add    $0x10,%esp
	outb(0x3D5, (uint8_t) (pos & 0xFF));
   133fe:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   13402:	0f b6 c0             	movzbl %al,%eax
   13405:	83 ec 08             	sub    $0x8,%esp
   13408:	50                   	push   %eax
   13409:	68 d5 03 00 00       	push   $0x3d5
   1340e:	e8 41 fd ff ff       	call   13154 <outb>
   13413:	83 c4 10             	add    $0x10,%esp

    update_cursor_pos(console);
   13416:	83 ec 0c             	sub    $0xc,%esp
   13419:	ff 75 f4             	pushl  -0xc(%ebp)
   1341c:	e8 c6 fd ff ff       	call   131e7 <update_cursor_pos>
   13421:	83 c4 10             	add    $0x10,%esp
}
   13424:	90                   	nop
   13425:	c9                   	leave  
   13426:	c3                   	ret    

00013427 <erase_rows>:

static void erase_rows (console_t * console, int start, int end) {
   13427:	55                   	push   %ebp
   13428:	89 e5                	mov    %esp,%ebp
   1342a:	83 ec 10             	sub    $0x10,%esp
    volatile disp_char_t * disp_start = console->disp_base + console->display_cols * start;
   1342d:	8b 45 08             	mov    0x8(%ebp),%eax
   13430:	8b 10                	mov    (%eax),%edx
   13432:	8b 45 08             	mov    0x8(%ebp),%eax
   13435:	8b 40 14             	mov    0x14(%eax),%eax
   13438:	0f af 45 0c          	imul   0xc(%ebp),%eax
   1343c:	01 c0                	add    %eax,%eax
   1343e:	01 d0                	add    %edx,%eax
   13440:	89 45 fc             	mov    %eax,-0x4(%ebp)
    volatile disp_char_t * disp_end = console->disp_base + console->display_cols * (end + 1);
   13443:	8b 45 08             	mov    0x8(%ebp),%eax
   13446:	8b 10                	mov    (%eax),%edx
   13448:	8b 45 08             	mov    0x8(%ebp),%eax
   1344b:	8b 40 14             	mov    0x14(%eax),%eax
   1344e:	8b 4d 10             	mov    0x10(%ebp),%ecx
   13451:	83 c1 01             	add    $0x1,%ecx
   13454:	0f af c1             	imul   %ecx,%eax
   13457:	01 c0                	add    %eax,%eax
   13459:	01 d0                	add    %edx,%eax
   1345b:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while (disp_start < disp_end) {
   1345e:	eb 4d                	jmp    134ad <erase_rows+0x86>
        disp_start->c = ' ';
   13460:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13463:	c6 00 20             	movb   $0x20,(%eax)
        disp_start->foreground = console->foreground;
   13466:	8b 45 08             	mov    0x8(%ebp),%eax
   13469:	8b 40 20             	mov    0x20(%eax),%eax
   1346c:	c1 e0 04             	shl    $0x4,%eax
   1346f:	c0 f8 04             	sar    $0x4,%al
   13472:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13475:	83 e0 0f             	and    $0xf,%eax
   13478:	89 c1                	mov    %eax,%ecx
   1347a:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   1347e:	83 e0 f0             	and    $0xfffffff0,%eax
   13481:	09 c8                	or     %ecx,%eax
   13483:	88 42 01             	mov    %al,0x1(%edx)
        disp_start->background = console->background;
   13486:	8b 45 08             	mov    0x8(%ebp),%eax
   13489:	8b 40 24             	mov    0x24(%eax),%eax
   1348c:	c1 e0 05             	shl    $0x5,%eax
   1348f:	c0 f8 05             	sar    $0x5,%al
   13492:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13495:	83 e0 07             	and    $0x7,%eax
   13498:	c1 e0 04             	shl    $0x4,%eax
   1349b:	89 c1                	mov    %eax,%ecx
   1349d:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   134a1:	83 e0 8f             	and    $0xffffff8f,%eax
   134a4:	09 c8                	or     %ecx,%eax
   134a6:	88 42 01             	mov    %al,0x1(%edx)

        disp_start++;
   134a9:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
    while (disp_start < disp_end) {
   134ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   134b0:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   134b3:	72 ab                	jb     13460 <erase_rows+0x39>
    }
}
   134b5:	90                   	nop
   134b6:	c9                   	leave  
   134b7:	c3                   	ret    

000134b8 <scroll_up>:


static void scroll_up(console_t * console, int lines) {
   134b8:	55                   	push   %ebp
   134b9:	89 e5                	mov    %esp,%ebp
   134bb:	83 ec 18             	sub    $0x18,%esp
    disp_char_t * dest = console->disp_base;
   134be:	8b 45 08             	mov    0x8(%ebp),%eax
   134c1:	8b 00                	mov    (%eax),%eax
   134c3:	89 45 f4             	mov    %eax,-0xc(%ebp)
    disp_char_t * src = console->disp_base + console->display_cols * lines;
   134c6:	8b 45 08             	mov    0x8(%ebp),%eax
   134c9:	8b 10                	mov    (%eax),%edx
   134cb:	8b 45 08             	mov    0x8(%ebp),%eax
   134ce:	8b 40 14             	mov    0x14(%eax),%eax
   134d1:	0f af 45 0c          	imul   0xc(%ebp),%eax
   134d5:	01 c0                	add    %eax,%eax
   134d7:	01 d0                	add    %edx,%eax
   134d9:	89 45 f0             	mov    %eax,-0x10(%ebp)
    uint32_t size = (console->display_rows - lines) * console->display_cols * sizeof(disp_char_t);
   134dc:	8b 45 08             	mov    0x8(%ebp),%eax
   134df:	8b 40 10             	mov    0x10(%eax),%eax
   134e2:	2b 45 0c             	sub    0xc(%ebp),%eax
   134e5:	89 c2                	mov    %eax,%edx
   134e7:	8b 45 08             	mov    0x8(%ebp),%eax
   134ea:	8b 40 14             	mov    0x14(%eax),%eax
   134ed:	0f af c2             	imul   %edx,%eax
   134f0:	01 c0                	add    %eax,%eax
   134f2:	89 45 ec             	mov    %eax,-0x14(%ebp)
    kernel_memcpy(dest, src, size);
   134f5:	8b 45 ec             	mov    -0x14(%ebp),%eax
   134f8:	83 ec 04             	sub    $0x4,%esp
   134fb:	50                   	push   %eax
   134fc:	ff 75 f0             	pushl  -0x10(%ebp)
   134ff:	ff 75 f4             	pushl  -0xc(%ebp)
   13502:	e8 26 4f 00 00       	call   1842d <kernel_memcpy>
   13507:	83 c4 10             	add    $0x10,%esp

    erase_rows(console, console->display_rows - lines, console->display_rows - 1);
   1350a:	8b 45 08             	mov    0x8(%ebp),%eax
   1350d:	8b 40 10             	mov    0x10(%eax),%eax
   13510:	8d 50 ff             	lea    -0x1(%eax),%edx
   13513:	8b 45 08             	mov    0x8(%ebp),%eax
   13516:	8b 40 10             	mov    0x10(%eax),%eax
   13519:	2b 45 0c             	sub    0xc(%ebp),%eax
   1351c:	83 ec 04             	sub    $0x4,%esp
   1351f:	52                   	push   %edx
   13520:	50                   	push   %eax
   13521:	ff 75 08             	pushl  0x8(%ebp)
   13524:	e8 fe fe ff ff       	call   13427 <erase_rows>
   13529:	83 c4 10             	add    $0x10,%esp

    console->cursor_row -= lines;
   1352c:	8b 45 08             	mov    0x8(%ebp),%eax
   1352f:	8b 40 08             	mov    0x8(%eax),%eax
   13532:	2b 45 0c             	sub    0xc(%ebp),%eax
   13535:	89 c2                	mov    %eax,%edx
   13537:	8b 45 08             	mov    0x8(%ebp),%eax
   1353a:	89 50 08             	mov    %edx,0x8(%eax)
}
   1353d:	90                   	nop
   1353e:	c9                   	leave  
   1353f:	c3                   	ret    

00013540 <move_to_col0>:

static void move_to_col0 (console_t * console) {
   13540:	55                   	push   %ebp
   13541:	89 e5                	mov    %esp,%ebp
	console->cursor_col = 0;
   13543:	8b 45 08             	mov    0x8(%ebp),%eax
   13546:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
}
   1354d:	90                   	nop
   1354e:	5d                   	pop    %ebp
   1354f:	c3                   	ret    

00013550 <move_next_line>:


static void move_next_line (console_t * console) {
   13550:	55                   	push   %ebp
   13551:	89 e5                	mov    %esp,%ebp
   13553:	83 ec 08             	sub    $0x8,%esp
	console->cursor_row++;
   13556:	8b 45 08             	mov    0x8(%ebp),%eax
   13559:	8b 40 08             	mov    0x8(%eax),%eax
   1355c:	8d 50 01             	lea    0x1(%eax),%edx
   1355f:	8b 45 08             	mov    0x8(%ebp),%eax
   13562:	89 50 08             	mov    %edx,0x8(%eax)

	if (console->cursor_row >= console->display_rows) {
   13565:	8b 45 08             	mov    0x8(%ebp),%eax
   13568:	8b 50 08             	mov    0x8(%eax),%edx
   1356b:	8b 45 08             	mov    0x8(%ebp),%eax
   1356e:	8b 40 10             	mov    0x10(%eax),%eax
   13571:	39 c2                	cmp    %eax,%edx
   13573:	7c 10                	jl     13585 <move_next_line+0x35>
		scroll_up(console, 1);
   13575:	83 ec 08             	sub    $0x8,%esp
   13578:	6a 01                	push   $0x1
   1357a:	ff 75 08             	pushl  0x8(%ebp)
   1357d:	e8 36 ff ff ff       	call   134b8 <scroll_up>
   13582:	83 c4 10             	add    $0x10,%esp
	}
}
   13585:	90                   	nop
   13586:	c9                   	leave  
   13587:	c3                   	ret    

00013588 <move_forward>:


static void move_forward (console_t * console, int n) {
   13588:	55                   	push   %ebp
   13589:	89 e5                	mov    %esp,%ebp
   1358b:	83 ec 18             	sub    $0x18,%esp
	for (int i = 0; i < n; i++) {
   1358e:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   13595:	eb 5c                	jmp    135f3 <move_forward+0x6b>
		if (++console->cursor_col >= console->display_cols) {
   13597:	8b 45 08             	mov    0x8(%ebp),%eax
   1359a:	8b 40 0c             	mov    0xc(%eax),%eax
   1359d:	8d 50 01             	lea    0x1(%eax),%edx
   135a0:	8b 45 08             	mov    0x8(%ebp),%eax
   135a3:	89 50 0c             	mov    %edx,0xc(%eax)
   135a6:	8b 45 08             	mov    0x8(%ebp),%eax
   135a9:	8b 50 0c             	mov    0xc(%eax),%edx
   135ac:	8b 45 08             	mov    0x8(%ebp),%eax
   135af:	8b 40 14             	mov    0x14(%eax),%eax
   135b2:	39 c2                	cmp    %eax,%edx
   135b4:	7c 39                	jl     135ef <move_forward+0x67>
			console->cursor_col = 0;
   135b6:	8b 45 08             	mov    0x8(%ebp),%eax
   135b9:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
            console->cursor_row++;
   135c0:	8b 45 08             	mov    0x8(%ebp),%eax
   135c3:	8b 40 08             	mov    0x8(%eax),%eax
   135c6:	8d 50 01             	lea    0x1(%eax),%edx
   135c9:	8b 45 08             	mov    0x8(%ebp),%eax
   135cc:	89 50 08             	mov    %edx,0x8(%eax)
            if (console->cursor_row >= console->display_rows) {
   135cf:	8b 45 08             	mov    0x8(%ebp),%eax
   135d2:	8b 50 08             	mov    0x8(%eax),%edx
   135d5:	8b 45 08             	mov    0x8(%ebp),%eax
   135d8:	8b 40 10             	mov    0x10(%eax),%eax
   135db:	39 c2                	cmp    %eax,%edx
   135dd:	7c 10                	jl     135ef <move_forward+0x67>
                scroll_up(console, 1);
   135df:	83 ec 08             	sub    $0x8,%esp
   135e2:	6a 01                	push   $0x1
   135e4:	ff 75 08             	pushl  0x8(%ebp)
   135e7:	e8 cc fe ff ff       	call   134b8 <scroll_up>
   135ec:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < n; i++) {
   135ef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   135f3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   135f6:	3b 45 0c             	cmp    0xc(%ebp),%eax
   135f9:	7c 9c                	jl     13597 <move_forward+0xf>
            }
        }
	}
}
   135fb:	90                   	nop
   135fc:	c9                   	leave  
   135fd:	c3                   	ret    

000135fe <show_char>:

static void show_char(console_t * console, char c) {
   135fe:	55                   	push   %ebp
   135ff:	89 e5                	mov    %esp,%ebp
   13601:	83 ec 28             	sub    $0x28,%esp
   13604:	8b 45 0c             	mov    0xc(%ebp),%eax
   13607:	88 45 e4             	mov    %al,-0x1c(%ebp)
    int offset = console->cursor_col + console->cursor_row * console->display_cols;
   1360a:	8b 45 08             	mov    0x8(%ebp),%eax
   1360d:	8b 50 0c             	mov    0xc(%eax),%edx
   13610:	8b 45 08             	mov    0x8(%ebp),%eax
   13613:	8b 48 08             	mov    0x8(%eax),%ecx
   13616:	8b 45 08             	mov    0x8(%ebp),%eax
   13619:	8b 40 14             	mov    0x14(%eax),%eax
   1361c:	0f af c1             	imul   %ecx,%eax
   1361f:	01 d0                	add    %edx,%eax
   13621:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * p = console->disp_base + offset;
   13624:	8b 45 08             	mov    0x8(%ebp),%eax
   13627:	8b 00                	mov    (%eax),%eax
   13629:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1362c:	01 d2                	add    %edx,%edx
   1362e:	01 d0                	add    %edx,%eax
   13630:	89 45 f0             	mov    %eax,-0x10(%ebp)
    p->c = c;
   13633:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13636:	0f b6 55 e4          	movzbl -0x1c(%ebp),%edx
   1363a:	88 10                	mov    %dl,(%eax)
    p->foreground = console->foreground;
   1363c:	8b 45 08             	mov    0x8(%ebp),%eax
   1363f:	8b 40 20             	mov    0x20(%eax),%eax
   13642:	c1 e0 04             	shl    $0x4,%eax
   13645:	c0 f8 04             	sar    $0x4,%al
   13648:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1364b:	83 e0 0f             	and    $0xf,%eax
   1364e:	89 c1                	mov    %eax,%ecx
   13650:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13654:	83 e0 f0             	and    $0xfffffff0,%eax
   13657:	09 c8                	or     %ecx,%eax
   13659:	88 42 01             	mov    %al,0x1(%edx)
    p->background = console->background;
   1365c:	8b 45 08             	mov    0x8(%ebp),%eax
   1365f:	8b 40 24             	mov    0x24(%eax),%eax
   13662:	c1 e0 05             	shl    $0x5,%eax
   13665:	c0 f8 05             	sar    $0x5,%al
   13668:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1366b:	83 e0 07             	and    $0x7,%eax
   1366e:	c1 e0 04             	shl    $0x4,%eax
   13671:	89 c1                	mov    %eax,%ecx
   13673:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13677:	83 e0 8f             	and    $0xffffff8f,%eax
   1367a:	09 c8                	or     %ecx,%eax
   1367c:	88 42 01             	mov    %al,0x1(%edx)
    move_forward(console, 1);
   1367f:	83 ec 08             	sub    $0x8,%esp
   13682:	6a 01                	push   $0x1
   13684:	ff 75 08             	pushl  0x8(%ebp)
   13687:	e8 fc fe ff ff       	call   13588 <move_forward>
   1368c:	83 c4 10             	add    $0x10,%esp
}
   1368f:	90                   	nop
   13690:	c9                   	leave  
   13691:	c3                   	ret    

00013692 <move_backword>:


static int move_backword (console_t * console, int n) {
   13692:	55                   	push   %ebp
   13693:	89 e5                	mov    %esp,%ebp
   13695:	83 ec 10             	sub    $0x10,%esp
    int status = -1;
   13698:	c7 45 fc ff ff ff ff 	movl   $0xffffffff,-0x4(%ebp)

    for (int i = 0; i < n; i++) {
   1369f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   136a6:	eb 55                	jmp    136fd <move_backword+0x6b>
        if (console->cursor_col > 0) {
   136a8:	8b 45 08             	mov    0x8(%ebp),%eax
   136ab:	8b 40 0c             	mov    0xc(%eax),%eax
   136ae:	85 c0                	test   %eax,%eax
   136b0:	7e 18                	jle    136ca <move_backword+0x38>
            console->cursor_col--;
   136b2:	8b 45 08             	mov    0x8(%ebp),%eax
   136b5:	8b 40 0c             	mov    0xc(%eax),%eax
   136b8:	8d 50 ff             	lea    -0x1(%eax),%edx
   136bb:	8b 45 08             	mov    0x8(%ebp),%eax
   136be:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136c1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   136c8:	eb 2f                	jmp    136f9 <move_backword+0x67>
        } else if (console->cursor_row > 0) {
   136ca:	8b 45 08             	mov    0x8(%ebp),%eax
   136cd:	8b 40 08             	mov    0x8(%eax),%eax
   136d0:	85 c0                	test   %eax,%eax
   136d2:	7e 25                	jle    136f9 <move_backword+0x67>
            console->cursor_row--;
   136d4:	8b 45 08             	mov    0x8(%ebp),%eax
   136d7:	8b 40 08             	mov    0x8(%eax),%eax
   136da:	8d 50 ff             	lea    -0x1(%eax),%edx
   136dd:	8b 45 08             	mov    0x8(%ebp),%eax
   136e0:	89 50 08             	mov    %edx,0x8(%eax)
            console->cursor_col = console->display_cols - 1;
   136e3:	8b 45 08             	mov    0x8(%ebp),%eax
   136e6:	8b 40 14             	mov    0x14(%eax),%eax
   136e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   136ec:	8b 45 08             	mov    0x8(%ebp),%eax
   136ef:	89 50 0c             	mov    %edx,0xc(%eax)
            status = 0;
   136f2:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    for (int i = 0; i < n; i++) {
   136f9:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   136fd:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13700:	3b 45 0c             	cmp    0xc(%ebp),%eax
   13703:	7c a3                	jl     136a8 <move_backword+0x16>
        }
    }

    return status;
   13705:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   13708:	c9                   	leave  
   13709:	c3                   	ret    

0001370a <clear_display>:

static void clear_display (console_t * console) {
   1370a:	55                   	push   %ebp
   1370b:	89 e5                	mov    %esp,%ebp
   1370d:	83 ec 10             	sub    $0x10,%esp
    int size = console->display_cols * console->display_rows;
   13710:	8b 45 08             	mov    0x8(%ebp),%eax
   13713:	8b 50 14             	mov    0x14(%eax),%edx
   13716:	8b 45 08             	mov    0x8(%ebp),%eax
   13719:	8b 40 10             	mov    0x10(%eax),%eax
   1371c:	0f af c2             	imul   %edx,%eax
   1371f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    disp_char_t * start = console->disp_base;
   13722:	8b 45 08             	mov    0x8(%ebp),%eax
   13725:	8b 00                	mov    (%eax),%eax
   13727:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size; i++, start++) {
   1372a:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   13731:	eb 51                	jmp    13784 <clear_display+0x7a>
        start->c = ' ';
   13733:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13736:	c6 00 20             	movb   $0x20,(%eax)
        start->background = console->background;
   13739:	8b 45 08             	mov    0x8(%ebp),%eax
   1373c:	8b 40 24             	mov    0x24(%eax),%eax
   1373f:	c1 e0 05             	shl    $0x5,%eax
   13742:	c0 f8 05             	sar    $0x5,%al
   13745:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13748:	83 e0 07             	and    $0x7,%eax
   1374b:	c1 e0 04             	shl    $0x4,%eax
   1374e:	89 c1                	mov    %eax,%ecx
   13750:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13754:	83 e0 8f             	and    $0xffffff8f,%eax
   13757:	09 c8                	or     %ecx,%eax
   13759:	88 42 01             	mov    %al,0x1(%edx)
        start->foreground = console->foreground;
   1375c:	8b 45 08             	mov    0x8(%ebp),%eax
   1375f:	8b 40 20             	mov    0x20(%eax),%eax
   13762:	c1 e0 04             	shl    $0x4,%eax
   13765:	c0 f8 04             	sar    $0x4,%al
   13768:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1376b:	83 e0 0f             	and    $0xf,%eax
   1376e:	89 c1                	mov    %eax,%ecx
   13770:	0f b6 42 01          	movzbl 0x1(%edx),%eax
   13774:	83 e0 f0             	and    $0xfffffff0,%eax
   13777:	09 c8                	or     %ecx,%eax
   13779:	88 42 01             	mov    %al,0x1(%edx)
    for (int i = 0; i < size; i++, start++) {
   1377c:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   13780:	83 45 fc 02          	addl   $0x2,-0x4(%ebp)
   13784:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13787:	3b 45 f4             	cmp    -0xc(%ebp),%eax
   1378a:	7c a7                	jl     13733 <clear_display+0x29>
    }
}
   1378c:	90                   	nop
   1378d:	c9                   	leave  
   1378e:	c3                   	ret    

0001378f <move_next_tab>:


static void move_next_tab(console_t * console) {
   1378f:	55                   	push   %ebp
   13790:	89 e5                	mov    %esp,%ebp
   13792:	83 ec 18             	sub    $0x18,%esp
    int col = console->cursor_col;
   13795:	8b 45 08             	mov    0x8(%ebp),%eax
   13798:	8b 40 0c             	mov    0xc(%eax),%eax
   1379b:	89 45 f4             	mov    %eax,-0xc(%ebp)

    col = (col + 7) / 8 * 8;		
   1379e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   137a1:	83 c0 07             	add    $0x7,%eax
   137a4:	8d 50 07             	lea    0x7(%eax),%edx
   137a7:	85 c0                	test   %eax,%eax
   137a9:	0f 48 c2             	cmovs  %edx,%eax
   137ac:	c1 f8 03             	sar    $0x3,%eax
   137af:	c1 e0 03             	shl    $0x3,%eax
   137b2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (col >= console->display_cols) {
   137b5:	8b 45 08             	mov    0x8(%ebp),%eax
   137b8:	8b 40 14             	mov    0x14(%eax),%eax
   137bb:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   137be:	7c 36                	jl     137f6 <move_next_tab+0x67>
        col = 0;
   137c0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
        console->cursor_row++;
   137c7:	8b 45 08             	mov    0x8(%ebp),%eax
   137ca:	8b 40 08             	mov    0x8(%eax),%eax
   137cd:	8d 50 01             	lea    0x1(%eax),%edx
   137d0:	8b 45 08             	mov    0x8(%ebp),%eax
   137d3:	89 50 08             	mov    %edx,0x8(%eax)
        if (console->cursor_row >= console->display_rows) {
   137d6:	8b 45 08             	mov    0x8(%ebp),%eax
   137d9:	8b 50 08             	mov    0x8(%eax),%edx
   137dc:	8b 45 08             	mov    0x8(%ebp),%eax
   137df:	8b 40 10             	mov    0x10(%eax),%eax
   137e2:	39 c2                	cmp    %eax,%edx
   137e4:	7c 10                	jl     137f6 <move_next_tab+0x67>
            scroll_up(console, 1);
   137e6:	83 ec 08             	sub    $0x8,%esp
   137e9:	6a 01                	push   $0x1
   137eb:	ff 75 08             	pushl  0x8(%ebp)
   137ee:	e8 c5 fc ff ff       	call   134b8 <scroll_up>
   137f3:	83 c4 10             	add    $0x10,%esp
        }
    }
    console->cursor_col = col;
   137f6:	8b 45 08             	mov    0x8(%ebp),%eax
   137f9:	8b 55 f4             	mov    -0xc(%ebp),%edx
   137fc:	89 50 0c             	mov    %edx,0xc(%eax)
}
   137ff:	90                   	nop
   13800:	c9                   	leave  
   13801:	c3                   	ret    

00013802 <save_cursor>:


void save_cursor(console_t * console) {
   13802:	55                   	push   %ebp
   13803:	89 e5                	mov    %esp,%ebp
    console->old_cursor_col = console->cursor_col;
   13805:	8b 45 08             	mov    0x8(%ebp),%eax
   13808:	8b 50 0c             	mov    0xc(%eax),%edx
   1380b:	8b 45 08             	mov    0x8(%ebp),%eax
   1380e:	89 50 18             	mov    %edx,0x18(%eax)
    console->old_cursor_row = console->cursor_row;
   13811:	8b 45 08             	mov    0x8(%ebp),%eax
   13814:	8b 50 08             	mov    0x8(%eax),%edx
   13817:	8b 45 08             	mov    0x8(%ebp),%eax
   1381a:	89 50 1c             	mov    %edx,0x1c(%eax)
}
   1381d:	90                   	nop
   1381e:	5d                   	pop    %ebp
   1381f:	c3                   	ret    

00013820 <restore_cursor>:

void restore_cursor(console_t * console) {
   13820:	55                   	push   %ebp
   13821:	89 e5                	mov    %esp,%ebp
    console->cursor_col = console->old_cursor_col;
   13823:	8b 45 08             	mov    0x8(%ebp),%eax
   13826:	8b 50 18             	mov    0x18(%eax),%edx
   13829:	8b 45 08             	mov    0x8(%ebp),%eax
   1382c:	89 50 0c             	mov    %edx,0xc(%eax)
    console->cursor_row = console->old_cursor_row;
   1382f:	8b 45 08             	mov    0x8(%ebp),%eax
   13832:	8b 50 1c             	mov    0x1c(%eax),%edx
   13835:	8b 45 08             	mov    0x8(%ebp),%eax
   13838:	89 50 08             	mov    %edx,0x8(%eax)
}
   1383b:	90                   	nop
   1383c:	5d                   	pop    %ebp
   1383d:	c3                   	ret    

0001383e <console_init>:


int console_init (int idx) {
   1383e:	55                   	push   %ebp
   1383f:	89 e5                	mov    %esp,%ebp
   13841:	83 ec 18             	sub    $0x18,%esp
    console_t *console = console_buf + idx;
   13844:	8b 45 08             	mov    0x8(%ebp),%eax
   13847:	6b c0 68             	imul   $0x68,%eax,%eax
   1384a:	05 00 56 03 00       	add    $0x35600,%eax
   1384f:	89 45 f4             	mov    %eax,-0xc(%ebp)

    console->display_cols = CONSOLE_COL_MAX;
   13852:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13855:	c7 40 14 50 00 00 00 	movl   $0x50,0x14(%eax)
    console->display_rows = CONSOLE_ROW_MAX;
   1385c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1385f:	c7 40 10 19 00 00 00 	movl   $0x19,0x10(%eax)
    console->disp_base = (disp_char_t *) CONSOLE_DISP_ADDR + idx * console->display_cols * console->display_rows;
   13866:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13869:	8b 40 14             	mov    0x14(%eax),%eax
   1386c:	0f af 45 08          	imul   0x8(%ebp),%eax
   13870:	89 c2                	mov    %eax,%edx
   13872:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13875:	8b 40 10             	mov    0x10(%eax),%eax
   13878:	0f af c2             	imul   %edx,%eax
   1387b:	01 c0                	add    %eax,%eax
   1387d:	8d 90 00 80 0b 00    	lea    0xb8000(%eax),%edx
   13883:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13886:	89 10                	mov    %edx,(%eax)

    console->foreground = COLOR_White;
   13888:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1388b:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
    console->background = COLOR_Black;
   13892:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13895:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
    if (idx == 0) {
   1389c:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   138a0:	75 30                	jne    138d2 <console_init+0x94>
        int cursor_pos = read_cursor_pos();
   138a2:	e8 cc f8 ff ff       	call   13173 <read_cursor_pos>
   138a7:	89 45 f0             	mov    %eax,-0x10(%ebp)
        console->cursor_row = cursor_pos / console->display_cols;
   138aa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138ad:	8b 48 14             	mov    0x14(%eax),%ecx
   138b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138b3:	99                   	cltd   
   138b4:	f7 f9                	idiv   %ecx
   138b6:	89 c2                	mov    %eax,%edx
   138b8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138bb:	89 50 08             	mov    %edx,0x8(%eax)
        console->cursor_col = cursor_pos % console->display_cols;
   138be:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138c1:	8b 48 14             	mov    0x14(%eax),%ecx
   138c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   138c7:	99                   	cltd   
   138c8:	f7 f9                	idiv   %ecx
   138ca:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138cd:	89 50 0c             	mov    %edx,0xc(%eax)
   138d0:	eb 22                	jmp    138f4 <console_init+0xb6>
    } else {
        console->cursor_row = 0;
   138d2:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138d5:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
        console->cursor_col = 0;
   138dc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138df:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
        clear_display(console);
   138e6:	83 ec 0c             	sub    $0xc,%esp
   138e9:	ff 75 f4             	pushl  -0xc(%ebp)
   138ec:	e8 19 fe ff ff       	call   1370a <clear_display>
   138f1:	83 c4 10             	add    $0x10,%esp
    }

    console->old_cursor_row = console->cursor_row;
   138f4:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138f7:	8b 50 08             	mov    0x8(%eax),%edx
   138fa:	8b 45 f4             	mov    -0xc(%ebp),%eax
   138fd:	89 50 1c             	mov    %edx,0x1c(%eax)
    console->old_cursor_col = console->cursor_col;
   13900:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13903:	8b 50 0c             	mov    0xc(%eax),%edx
   13906:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13909:	89 50 18             	mov    %edx,0x18(%eax)

    mutex_init(&console->mutex);
   1390c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1390f:	83 c0 54             	add    $0x54,%eax
   13912:	83 ec 0c             	sub    $0xc,%esp
   13915:	50                   	push   %eax
   13916:	e8 16 44 00 00       	call   17d31 <mutex_init>
   1391b:	83 c4 10             	add    $0x10,%esp
	return 0;
   1391e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13923:	c9                   	leave  
   13924:	c3                   	ret    

00013925 <erase_backword>:



static void erase_backword (console_t * console) {
   13925:	55                   	push   %ebp
   13926:	89 e5                	mov    %esp,%ebp
   13928:	83 ec 08             	sub    $0x8,%esp
    if (move_backword(console, 1) == 0) {
   1392b:	6a 01                	push   $0x1
   1392d:	ff 75 08             	pushl  0x8(%ebp)
   13930:	e8 5d fd ff ff       	call   13692 <move_backword>
   13935:	83 c4 08             	add    $0x8,%esp
   13938:	85 c0                	test   %eax,%eax
   1393a:	75 20                	jne    1395c <erase_backword+0x37>
        show_char(console, ' ');
   1393c:	83 ec 08             	sub    $0x8,%esp
   1393f:	6a 20                	push   $0x20
   13941:	ff 75 08             	pushl  0x8(%ebp)
   13944:	e8 b5 fc ff ff       	call   135fe <show_char>
   13949:	83 c4 10             	add    $0x10,%esp
        move_backword(console, 1);
   1394c:	83 ec 08             	sub    $0x8,%esp
   1394f:	6a 01                	push   $0x1
   13951:	ff 75 08             	pushl  0x8(%ebp)
   13954:	e8 39 fd ff ff       	call   13692 <move_backword>
   13959:	83 c4 10             	add    $0x10,%esp
    }
}
   1395c:	90                   	nop
   1395d:	c9                   	leave  
   1395e:	c3                   	ret    

0001395f <write_normal>:


static void write_normal (console_t * console, char c) {
   1395f:	55                   	push   %ebp
   13960:	89 e5                	mov    %esp,%ebp
   13962:	83 ec 18             	sub    $0x18,%esp
   13965:	8b 45 0c             	mov    0xc(%ebp),%eax
   13968:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c) {
   1396b:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   1396f:	83 f8 0a             	cmp    $0xa,%eax
   13972:	74 70                	je     139e4 <write_normal+0x85>
   13974:	83 f8 0a             	cmp    $0xa,%eax
   13977:	7f 0c                	jg     13985 <write_normal+0x26>
   13979:	83 f8 08             	cmp    $0x8,%eax
   1397c:	74 34                	je     139b2 <write_normal+0x53>
   1397e:	83 f8 09             	cmp    $0x9,%eax
   13981:	74 41                	je     139c4 <write_normal+0x65>
   13983:	eb 6f                	jmp    139f4 <write_normal+0x95>
   13985:	83 f8 1b             	cmp    $0x1b,%eax
   13988:	74 0c                	je     13996 <write_normal+0x37>
   1398a:	83 f8 7f             	cmp    $0x7f,%eax
   1398d:	74 13                	je     139a2 <write_normal+0x43>
   1398f:	83 f8 0d             	cmp    $0xd,%eax
   13992:	74 40                	je     139d4 <write_normal+0x75>
   13994:	eb 5e                	jmp    139f4 <write_normal+0x95>
        case ASCII_ESC:
            console->write_state = CONSOLE_WRITE_ESC;
   13996:	8b 45 08             	mov    0x8(%ebp),%eax
   13999:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
            break;
   139a0:	eb 72                	jmp    13a14 <write_normal+0xb5>
        case 0x7F:
            erase_backword(console);
   139a2:	83 ec 0c             	sub    $0xc,%esp
   139a5:	ff 75 08             	pushl  0x8(%ebp)
   139a8:	e8 78 ff ff ff       	call   13925 <erase_backword>
   139ad:	83 c4 10             	add    $0x10,%esp
            break;
   139b0:	eb 62                	jmp    13a14 <write_normal+0xb5>
        case '\b':		
            move_backword(console, 1);
   139b2:	83 ec 08             	sub    $0x8,%esp
   139b5:	6a 01                	push   $0x1
   139b7:	ff 75 08             	pushl  0x8(%ebp)
   139ba:	e8 d3 fc ff ff       	call   13692 <move_backword>
   139bf:	83 c4 10             	add    $0x10,%esp
            break;
   139c2:	eb 50                	jmp    13a14 <write_normal+0xb5>
        case '\t':		
            move_next_tab(console);
   139c4:	83 ec 0c             	sub    $0xc,%esp
   139c7:	ff 75 08             	pushl  0x8(%ebp)
   139ca:	e8 c0 fd ff ff       	call   1378f <move_next_tab>
   139cf:	83 c4 10             	add    $0x10,%esp
            break;
   139d2:	eb 40                	jmp    13a14 <write_normal+0xb5>
        case '\r':
            move_to_col0(console);
   139d4:	83 ec 0c             	sub    $0xc,%esp
   139d7:	ff 75 08             	pushl  0x8(%ebp)
   139da:	e8 61 fb ff ff       	call   13540 <move_to_col0>
   139df:	83 c4 10             	add    $0x10,%esp
            break;
   139e2:	eb 30                	jmp    13a14 <write_normal+0xb5>
        case '\n':  
            //move_to_col0(console);
            move_next_line(console);
   139e4:	83 ec 0c             	sub    $0xc,%esp
   139e7:	ff 75 08             	pushl  0x8(%ebp)
   139ea:	e8 61 fb ff ff       	call   13550 <move_next_line>
   139ef:	83 c4 10             	add    $0x10,%esp
            break;
   139f2:	eb 20                	jmp    13a14 <write_normal+0xb5>
            
        default: {
            if ((c >= ' ') && (c <= '~')) {
   139f4:	80 7d f4 1f          	cmpb   $0x1f,-0xc(%ebp)
   139f8:	7e 19                	jle    13a13 <write_normal+0xb4>
   139fa:	80 7d f4 7f          	cmpb   $0x7f,-0xc(%ebp)
   139fe:	74 13                	je     13a13 <write_normal+0xb4>
                show_char(console, c);
   13a00:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a04:	83 ec 08             	sub    $0x8,%esp
   13a07:	50                   	push   %eax
   13a08:	ff 75 08             	pushl  0x8(%ebp)
   13a0b:	e8 ee fb ff ff       	call   135fe <show_char>
   13a10:	83 c4 10             	add    $0x10,%esp
            }
            break;
   13a13:	90                   	nop
        }
    }
}
   13a14:	90                   	nop
   13a15:	c9                   	leave  
   13a16:	c3                   	ret    

00013a17 <clear_esc_param>:


static void clear_esc_param (console_t * console) {
   13a17:	55                   	push   %ebp
   13a18:	89 e5                	mov    %esp,%ebp
   13a1a:	83 ec 08             	sub    $0x8,%esp
	kernel_memset(console->esc_param, 0, sizeof(console->esc_param));
   13a1d:	8b 45 08             	mov    0x8(%ebp),%eax
   13a20:	83 c0 28             	add    $0x28,%eax
   13a23:	83 ec 04             	sub    $0x4,%esp
   13a26:	6a 28                	push   $0x28
   13a28:	6a 00                	push   $0x0
   13a2a:	50                   	push   %eax
   13a2b:	e8 4c 4a 00 00       	call   1847c <kernel_memset>
   13a30:	83 c4 10             	add    $0x10,%esp
	console->curr_param_index = 0;
   13a33:	8b 45 08             	mov    0x8(%ebp),%eax
   13a36:	c7 40 50 00 00 00 00 	movl   $0x0,0x50(%eax)
}
   13a3d:	90                   	nop
   13a3e:	c9                   	leave  
   13a3f:	c3                   	ret    

00013a40 <write_esc>:


static void write_esc (console_t * console, char c) {
   13a40:	55                   	push   %ebp
   13a41:	89 e5                	mov    %esp,%ebp
   13a43:	83 ec 18             	sub    $0x18,%esp
   13a46:	8b 45 0c             	mov    0xc(%ebp),%eax
   13a49:	88 45 f4             	mov    %al,-0xc(%ebp)
    switch (c) {
   13a4c:	0f be 45 f4          	movsbl -0xc(%ebp),%eax
   13a50:	83 f8 38             	cmp    $0x38,%eax
   13a53:	74 21                	je     13a76 <write_esc+0x36>
   13a55:	83 f8 5b             	cmp    $0x5b,%eax
   13a58:	74 33                	je     13a8d <write_esc+0x4d>
   13a5a:	83 f8 37             	cmp    $0x37,%eax
   13a5d:	75 48                	jne    13aa7 <write_esc+0x67>
        case '7':		
            save_cursor(console);
   13a5f:	ff 75 08             	pushl  0x8(%ebp)
   13a62:	e8 9b fd ff ff       	call   13802 <save_cursor>
   13a67:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13a6a:	8b 45 08             	mov    0x8(%ebp),%eax
   13a6d:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13a74:	eb 3c                	jmp    13ab2 <write_esc+0x72>
        case '8':		
            restore_cursor(console);
   13a76:	ff 75 08             	pushl  0x8(%ebp)
   13a79:	e8 a2 fd ff ff       	call   13820 <restore_cursor>
   13a7e:	83 c4 04             	add    $0x4,%esp
            console->write_state = CONSOLE_WRITE_NORMAL;
   13a81:	8b 45 08             	mov    0x8(%ebp),%eax
   13a84:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13a8b:	eb 25                	jmp    13ab2 <write_esc+0x72>
        case '[':
            clear_esc_param(console);
   13a8d:	83 ec 0c             	sub    $0xc,%esp
   13a90:	ff 75 08             	pushl  0x8(%ebp)
   13a93:	e8 7f ff ff ff       	call   13a17 <clear_esc_param>
   13a98:	83 c4 10             	add    $0x10,%esp
            console->write_state = CONSOLE_WRITE_SQUARE;
   13a9b:	8b 45 08             	mov    0x8(%ebp),%eax
   13a9e:	c7 40 04 02 00 00 00 	movl   $0x2,0x4(%eax)
            break;
   13aa5:	eb 0b                	jmp    13ab2 <write_esc+0x72>
        default:
            console->write_state = CONSOLE_WRITE_NORMAL;
   13aa7:	8b 45 08             	mov    0x8(%ebp),%eax
   13aaa:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
            break;
   13ab1:	90                   	nop
    }
}
   13ab2:	90                   	nop
   13ab3:	c9                   	leave  
   13ab4:	c3                   	ret    

00013ab5 <set_font_style>:


static void set_font_style (console_t * console) {
   13ab5:	55                   	push   %ebp
   13ab6:	89 e5                	mov    %esp,%ebp
   13ab8:	83 ec 10             	sub    $0x10,%esp
	static const cclor_t color_table[] = {
			COLOR_Black, COLOR_Red, COLOR_Green, COLOR_Yellow, 
			COLOR_Blue, COLOR_Magenta, COLOR_Cyan, COLOR_White, 
	};

	for (int i = 0; i < console->curr_param_index; i++) {
   13abb:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
   13ac2:	eb 78                	jmp    13b3c <set_font_style+0x87>
		int param = console->esc_param[i];
   13ac4:	8b 45 08             	mov    0x8(%ebp),%eax
   13ac7:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13aca:	83 c2 08             	add    $0x8,%edx
   13acd:	8b 44 90 08          	mov    0x8(%eax,%edx,4),%eax
   13ad1:	89 45 f8             	mov    %eax,-0x8(%ebp)
		if ((param >= 30) && (param <= 37)) {  
   13ad4:	83 7d f8 1d          	cmpl   $0x1d,-0x8(%ebp)
   13ad8:	7e 1b                	jle    13af5 <set_font_style+0x40>
   13ada:	83 7d f8 25          	cmpl   $0x25,-0x8(%ebp)
   13ade:	7f 15                	jg     13af5 <set_font_style+0x40>
			console->foreground = color_table[param - 30];
   13ae0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13ae3:	83 e8 1e             	sub    $0x1e,%eax
   13ae6:	8b 14 85 e0 95 01 00 	mov    0x195e0(,%eax,4),%edx
   13aed:	8b 45 08             	mov    0x8(%ebp),%eax
   13af0:	89 50 20             	mov    %edx,0x20(%eax)
   13af3:	eb 43                	jmp    13b38 <set_font_style+0x83>
		} else if ((param >= 40) && (param <= 47)) {
   13af5:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13af9:	7e 1b                	jle    13b16 <set_font_style+0x61>
   13afb:	83 7d f8 2f          	cmpl   $0x2f,-0x8(%ebp)
   13aff:	7f 15                	jg     13b16 <set_font_style+0x61>
			console->background = color_table[param - 40];
   13b01:	8b 45 f8             	mov    -0x8(%ebp),%eax
   13b04:	83 e8 28             	sub    $0x28,%eax
   13b07:	8b 14 85 e0 95 01 00 	mov    0x195e0(,%eax,4),%edx
   13b0e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b11:	89 50 24             	mov    %edx,0x24(%eax)
   13b14:	eb 22                	jmp    13b38 <set_font_style+0x83>
		} else if (param == 39) { 
   13b16:	83 7d f8 27          	cmpl   $0x27,-0x8(%ebp)
   13b1a:	75 0c                	jne    13b28 <set_font_style+0x73>
			console->foreground = COLOR_White;
   13b1c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b1f:	c7 40 20 0f 00 00 00 	movl   $0xf,0x20(%eax)
   13b26:	eb 10                	jmp    13b38 <set_font_style+0x83>
		} else if (param == 49) { 
   13b28:	83 7d f8 31          	cmpl   $0x31,-0x8(%ebp)
   13b2c:	75 0a                	jne    13b38 <set_font_style+0x83>
			console->background = COLOR_Black;
   13b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   13b31:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
	for (int i = 0; i < console->curr_param_index; i++) {
   13b38:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
   13b3c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b3f:	8b 40 50             	mov    0x50(%eax),%eax
   13b42:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13b45:	0f 8c 79 ff ff ff    	jl     13ac4 <set_font_style+0xf>
		}
	}
}
   13b4b:	90                   	nop
   13b4c:	c9                   	leave  
   13b4d:	c3                   	ret    

00013b4e <move_left>:


static void move_left (console_t * console, int n) {
   13b4e:	55                   	push   %ebp
   13b4f:	89 e5                	mov    %esp,%ebp
   13b51:	83 ec 10             	sub    $0x10,%esp
    if (n == 0) {
   13b54:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b58:	75 07                	jne    13b61 <move_left+0x13>
        n = 1;
   13b5a:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col - n;
   13b61:	8b 45 08             	mov    0x8(%ebp),%eax
   13b64:	8b 40 0c             	mov    0xc(%eax),%eax
   13b67:	2b 45 0c             	sub    0xc(%ebp),%eax
   13b6a:	89 45 fc             	mov    %eax,-0x4(%ebp)
    console->cursor_col = (col >= 0) ? col : 0;
   13b6d:	b8 00 00 00 00       	mov    $0x0,%eax
   13b72:	83 7d fc 00          	cmpl   $0x0,-0x4(%ebp)
   13b76:	0f 49 45 fc          	cmovns -0x4(%ebp),%eax
   13b7a:	89 c2                	mov    %eax,%edx
   13b7c:	8b 45 08             	mov    0x8(%ebp),%eax
   13b7f:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13b82:	90                   	nop
   13b83:	c9                   	leave  
   13b84:	c3                   	ret    

00013b85 <move_right>:


static void move_right (console_t * console, int n) {
   13b85:	55                   	push   %ebp
   13b86:	89 e5                	mov    %esp,%ebp
   13b88:	83 ec 10             	sub    $0x10,%esp
    if (n == 0) {
   13b8b:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   13b8f:	75 07                	jne    13b98 <move_right+0x13>
        n = 1;
   13b91:	c7 45 0c 01 00 00 00 	movl   $0x1,0xc(%ebp)
    }

    int col = console->cursor_col + n;
   13b98:	8b 45 08             	mov    0x8(%ebp),%eax
   13b9b:	8b 50 0c             	mov    0xc(%eax),%edx
   13b9e:	8b 45 0c             	mov    0xc(%ebp),%eax
   13ba1:	01 d0                	add    %edx,%eax
   13ba3:	89 45 fc             	mov    %eax,-0x4(%ebp)
    if (col >= console->display_cols) {
   13ba6:	8b 45 08             	mov    0x8(%ebp),%eax
   13ba9:	8b 40 14             	mov    0x14(%eax),%eax
   13bac:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   13baf:	7c 11                	jl     13bc2 <move_right+0x3d>
        console->cursor_col = console->display_cols - 1;
   13bb1:	8b 45 08             	mov    0x8(%ebp),%eax
   13bb4:	8b 40 14             	mov    0x14(%eax),%eax
   13bb7:	8d 50 ff             	lea    -0x1(%eax),%edx
   13bba:	8b 45 08             	mov    0x8(%ebp),%eax
   13bbd:	89 50 0c             	mov    %edx,0xc(%eax)
    } else {
        console->cursor_col = col;
    }
}
   13bc0:	eb 09                	jmp    13bcb <move_right+0x46>
        console->cursor_col = col;
   13bc2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bc5:	8b 55 fc             	mov    -0x4(%ebp),%edx
   13bc8:	89 50 0c             	mov    %edx,0xc(%eax)
}
   13bcb:	90                   	nop
   13bcc:	c9                   	leave  
   13bcd:	c3                   	ret    

00013bce <move_cursor>:


static void move_cursor(console_t * console) {
   13bce:	55                   	push   %ebp
   13bcf:	89 e5                	mov    %esp,%ebp
	if (console->curr_param_index >= 1) {
   13bd1:	8b 45 08             	mov    0x8(%ebp),%eax
   13bd4:	8b 40 50             	mov    0x50(%eax),%eax
   13bd7:	85 c0                	test   %eax,%eax
   13bd9:	7e 0c                	jle    13be7 <move_cursor+0x19>
		console->cursor_row = console->esc_param[0];
   13bdb:	8b 45 08             	mov    0x8(%ebp),%eax
   13bde:	8b 50 28             	mov    0x28(%eax),%edx
   13be1:	8b 45 08             	mov    0x8(%ebp),%eax
   13be4:	89 50 08             	mov    %edx,0x8(%eax)
	}

	if (console->curr_param_index >= 2) {
   13be7:	8b 45 08             	mov    0x8(%ebp),%eax
   13bea:	8b 40 50             	mov    0x50(%eax),%eax
   13bed:	83 f8 01             	cmp    $0x1,%eax
   13bf0:	7e 0c                	jle    13bfe <move_cursor+0x30>
		console->cursor_col = console->esc_param[1];
   13bf2:	8b 45 08             	mov    0x8(%ebp),%eax
   13bf5:	8b 50 2c             	mov    0x2c(%eax),%edx
   13bf8:	8b 45 08             	mov    0x8(%ebp),%eax
   13bfb:	89 50 0c             	mov    %edx,0xc(%eax)
	}
}
   13bfe:	90                   	nop
   13bff:	5d                   	pop    %ebp
   13c00:	c3                   	ret    

00013c01 <erase_in_display>:


static void erase_in_display(console_t * console) {
   13c01:	55                   	push   %ebp
   13c02:	89 e5                	mov    %esp,%ebp
   13c04:	83 ec 10             	sub    $0x10,%esp
	if (console->curr_param_index <= 0) {
   13c07:	8b 45 08             	mov    0x8(%ebp),%eax
   13c0a:	8b 40 50             	mov    0x50(%eax),%eax
   13c0d:	85 c0                	test   %eax,%eax
   13c0f:	7e 3e                	jle    13c4f <erase_in_display+0x4e>
		return;
	}

	int param = console->esc_param[0];
   13c11:	8b 45 08             	mov    0x8(%ebp),%eax
   13c14:	8b 40 28             	mov    0x28(%eax),%eax
   13c17:	89 45 fc             	mov    %eax,-0x4(%ebp)
	if (param == 2) {
   13c1a:	83 7d fc 02          	cmpl   $0x2,-0x4(%ebp)
   13c1e:	75 30                	jne    13c50 <erase_in_display+0x4f>
		erase_rows(console, 0, console->display_rows - 1);
   13c20:	8b 45 08             	mov    0x8(%ebp),%eax
   13c23:	8b 40 10             	mov    0x10(%eax),%eax
   13c26:	83 e8 01             	sub    $0x1,%eax
   13c29:	50                   	push   %eax
   13c2a:	6a 00                	push   $0x0
   13c2c:	ff 75 08             	pushl  0x8(%ebp)
   13c2f:	e8 f3 f7 ff ff       	call   13427 <erase_rows>
   13c34:	83 c4 0c             	add    $0xc,%esp
        console->cursor_col = console->cursor_row = 0;
   13c37:	8b 45 08             	mov    0x8(%ebp),%eax
   13c3a:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
   13c41:	8b 45 08             	mov    0x8(%ebp),%eax
   13c44:	8b 50 08             	mov    0x8(%eax),%edx
   13c47:	8b 45 08             	mov    0x8(%ebp),%eax
   13c4a:	89 50 0c             	mov    %edx,0xc(%eax)
   13c4d:	eb 01                	jmp    13c50 <erase_in_display+0x4f>
		return;
   13c4f:	90                   	nop
	}
}
   13c50:	c9                   	leave  
   13c51:	c3                   	ret    

00013c52 <write_esc_square>:


static void write_esc_square (console_t * console, char c) {
   13c52:	55                   	push   %ebp
   13c53:	89 e5                	mov    %esp,%ebp
   13c55:	83 ec 14             	sub    $0x14,%esp
   13c58:	8b 45 0c             	mov    0xc(%ebp),%eax
   13c5b:	88 45 ec             	mov    %al,-0x14(%ebp)
    if ((c >= '0') && (c <= '9')) {
   13c5e:	80 7d ec 2f          	cmpb   $0x2f,-0x14(%ebp)
   13c62:	7e 44                	jle    13ca8 <write_esc_square+0x56>
   13c64:	80 7d ec 39          	cmpb   $0x39,-0x14(%ebp)
   13c68:	7f 3e                	jg     13ca8 <write_esc_square+0x56>
        int * param = &console->esc_param[console->curr_param_index];
   13c6a:	8b 45 08             	mov    0x8(%ebp),%eax
   13c6d:	8b 40 50             	mov    0x50(%eax),%eax
   13c70:	83 c0 08             	add    $0x8,%eax
   13c73:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   13c7a:	8b 45 08             	mov    0x8(%ebp),%eax
   13c7d:	01 d0                	add    %edx,%eax
   13c7f:	83 c0 08             	add    $0x8,%eax
   13c82:	89 45 fc             	mov    %eax,-0x4(%ebp)
        *param = *param * 10 + c - '0';
   13c85:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13c88:	8b 10                	mov    (%eax),%edx
   13c8a:	89 d0                	mov    %edx,%eax
   13c8c:	c1 e0 02             	shl    $0x2,%eax
   13c8f:	01 d0                	add    %edx,%eax
   13c91:	01 c0                	add    %eax,%eax
   13c93:	89 c2                	mov    %eax,%edx
   13c95:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13c99:	01 d0                	add    %edx,%eax
   13c9b:	8d 50 d0             	lea    -0x30(%eax),%edx
   13c9e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   13ca1:	89 10                	mov    %edx,(%eax)
    if ((c >= '0') && (c <= '9')) {
   13ca3:	e9 9e 00 00 00       	jmp    13d46 <write_esc_square+0xf4>
    } else if ((c == ';') && console->curr_param_index < ESC_PARAM_MAX) {
   13ca8:	80 7d ec 3b          	cmpb   $0x3b,-0x14(%ebp)
   13cac:	75 1c                	jne    13cca <write_esc_square+0x78>
   13cae:	8b 45 08             	mov    0x8(%ebp),%eax
   13cb1:	8b 40 50             	mov    0x50(%eax),%eax
   13cb4:	83 f8 09             	cmp    $0x9,%eax
   13cb7:	7f 11                	jg     13cca <write_esc_square+0x78>
        console->curr_param_index++;
   13cb9:	8b 45 08             	mov    0x8(%ebp),%eax
   13cbc:	8b 40 50             	mov    0x50(%eax),%eax
   13cbf:	8d 50 01             	lea    0x1(%eax),%edx
   13cc2:	8b 45 08             	mov    0x8(%ebp),%eax
   13cc5:	89 50 50             	mov    %edx,0x50(%eax)
   13cc8:	eb 7c                	jmp    13d46 <write_esc_square+0xf4>
    } else {
        console->curr_param_index++;
   13cca:	8b 45 08             	mov    0x8(%ebp),%eax
   13ccd:	8b 40 50             	mov    0x50(%eax),%eax
   13cd0:	8d 50 01             	lea    0x1(%eax),%edx
   13cd3:	8b 45 08             	mov    0x8(%ebp),%eax
   13cd6:	89 50 50             	mov    %edx,0x50(%eax)

        switch (c) {
   13cd9:	0f be 45 ec          	movsbl -0x14(%ebp),%eax
   13cdd:	83 e8 43             	sub    $0x43,%eax
   13ce0:	83 f8 2a             	cmp    $0x2a,%eax
   13ce3:	77 57                	ja     13d3c <write_esc_square+0xea>
   13ce5:	8b 04 85 20 95 01 00 	mov    0x19520(,%eax,4),%eax
   13cec:	ff e0                	jmp    *%eax
        case 'm': 
            set_font_style(console);
   13cee:	ff 75 08             	pushl  0x8(%ebp)
   13cf1:	e8 bf fd ff ff       	call   13ab5 <set_font_style>
   13cf6:	83 c4 04             	add    $0x4,%esp
            break;
   13cf9:	eb 41                	jmp    13d3c <write_esc_square+0xea>
        case 'D':	
            move_left(console, console->esc_param[0]);
   13cfb:	8b 45 08             	mov    0x8(%ebp),%eax
   13cfe:	8b 40 28             	mov    0x28(%eax),%eax
   13d01:	50                   	push   %eax
   13d02:	ff 75 08             	pushl  0x8(%ebp)
   13d05:	e8 44 fe ff ff       	call   13b4e <move_left>
   13d0a:	83 c4 08             	add    $0x8,%esp
            break;
   13d0d:	eb 2d                	jmp    13d3c <write_esc_square+0xea>
        case 'C':
            move_right(console, console->esc_param[0]);
   13d0f:	8b 45 08             	mov    0x8(%ebp),%eax
   13d12:	8b 40 28             	mov    0x28(%eax),%eax
   13d15:	50                   	push   %eax
   13d16:	ff 75 08             	pushl  0x8(%ebp)
   13d19:	e8 67 fe ff ff       	call   13b85 <move_right>
   13d1e:	83 c4 08             	add    $0x8,%esp
            break;
   13d21:	eb 19                	jmp    13d3c <write_esc_square+0xea>
        case 'H':
        case 'f':
            move_cursor(console);
   13d23:	ff 75 08             	pushl  0x8(%ebp)
   13d26:	e8 a3 fe ff ff       	call   13bce <move_cursor>
   13d2b:	83 c4 04             	add    $0x4,%esp
            break;
   13d2e:	eb 0c                	jmp    13d3c <write_esc_square+0xea>
        case 'J':
            erase_in_display(console);
   13d30:	ff 75 08             	pushl  0x8(%ebp)
   13d33:	e8 c9 fe ff ff       	call   13c01 <erase_in_display>
   13d38:	83 c4 04             	add    $0x4,%esp
            break;
   13d3b:	90                   	nop
        }
        console->write_state = CONSOLE_WRITE_NORMAL;
   13d3c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d3f:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    }
}
   13d46:	90                   	nop
   13d47:	c9                   	leave  
   13d48:	c3                   	ret    

00013d49 <console_write>:


int console_write (tty_t * tty) {
   13d49:	55                   	push   %ebp
   13d4a:	89 e5                	mov    %esp,%ebp
   13d4c:	83 ec 18             	sub    $0x18,%esp
	console_t * console = console_buf + tty->console_idx;
   13d4f:	8b 45 08             	mov    0x8(%ebp),%eax
   13d52:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   13d58:	6b c0 68             	imul   $0x68,%eax,%eax
   13d5b:	05 00 56 03 00       	add    $0x35600,%eax
   13d60:	89 45 f0             	mov    %eax,-0x10(%ebp)

    mutex_lock(&console->mutex);
   13d63:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13d66:	83 c0 54             	add    $0x54,%eax
   13d69:	83 ec 0c             	sub    $0xc,%esp
   13d6c:	50                   	push   %eax
   13d6d:	e8 ed 3f 00 00       	call   17d5f <mutex_lock>
   13d72:	83 c4 10             	add    $0x10,%esp

    int len = 0;
   13d75:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    do {
        char c;

        int err = tty_fifo_get(&tty->ofifo, &c);
   13d7c:	8b 45 08             	mov    0x8(%ebp),%eax
   13d7f:	8d 90 00 02 00 00    	lea    0x200(%eax),%edx
   13d85:	83 ec 08             	sub    $0x8,%esp
   13d88:	8d 45 eb             	lea    -0x15(%ebp),%eax
   13d8b:	50                   	push   %eax
   13d8c:	52                   	push   %edx
   13d8d:	e8 17 14 00 00       	call   151a9 <tty_fifo_get>
   13d92:	83 c4 10             	add    $0x10,%esp
   13d95:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err < 0) {
   13d98:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13d9c:	79 25                	jns    13dc3 <console_write+0x7a>
                break;
        }
        len++;
    }while (1);

    mutex_unlock(&console->mutex);
   13d9e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13da1:	83 c0 54             	add    $0x54,%eax
   13da4:	83 ec 0c             	sub    $0xc,%esp
   13da7:	50                   	push   %eax
   13da8:	e8 49 40 00 00       	call   17df6 <mutex_unlock>
   13dad:	83 c4 10             	add    $0x10,%esp

    update_cursor_pos(console);
   13db0:	83 ec 0c             	sub    $0xc,%esp
   13db3:	ff 75 f0             	pushl  -0x10(%ebp)
   13db6:	e8 2c f4 ff ff       	call   131e7 <update_cursor_pos>
   13dbb:	83 c4 10             	add    $0x10,%esp
    return len;
   13dbe:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13dc1:	eb 7b                	jmp    13e3e <console_write+0xf5>
        sem_notify(&tty->osem);
   13dc3:	8b 45 08             	mov    0x8(%ebp),%eax
   13dc6:	05 14 02 00 00       	add    $0x214,%eax
   13dcb:	83 ec 0c             	sub    $0xc,%esp
   13dce:	50                   	push   %eax
   13dcf:	e8 7d 41 00 00       	call   17f51 <sem_notify>
   13dd4:	83 c4 10             	add    $0x10,%esp
        switch (console->write_state) {
   13dd7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13dda:	8b 40 04             	mov    0x4(%eax),%eax
   13ddd:	83 f8 01             	cmp    $0x1,%eax
   13de0:	74 24                	je     13e06 <console_write+0xbd>
   13de2:	83 f8 01             	cmp    $0x1,%eax
   13de5:	72 07                	jb     13dee <console_write+0xa5>
   13de7:	83 f8 02             	cmp    $0x2,%eax
   13dea:	74 32                	je     13e1e <console_write+0xd5>
   13dec:	eb 47                	jmp    13e35 <console_write+0xec>
                write_normal(console, c);
   13dee:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13df2:	0f be c0             	movsbl %al,%eax
   13df5:	83 ec 08             	sub    $0x8,%esp
   13df8:	50                   	push   %eax
   13df9:	ff 75 f0             	pushl  -0x10(%ebp)
   13dfc:	e8 5e fb ff ff       	call   1395f <write_normal>
   13e01:	83 c4 10             	add    $0x10,%esp
                break;
   13e04:	eb 2f                	jmp    13e35 <console_write+0xec>
                write_esc(console, c);
   13e06:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e0a:	0f be c0             	movsbl %al,%eax
   13e0d:	83 ec 08             	sub    $0x8,%esp
   13e10:	50                   	push   %eax
   13e11:	ff 75 f0             	pushl  -0x10(%ebp)
   13e14:	e8 27 fc ff ff       	call   13a40 <write_esc>
   13e19:	83 c4 10             	add    $0x10,%esp
                break;
   13e1c:	eb 17                	jmp    13e35 <console_write+0xec>
                write_esc_square(console, c);
   13e1e:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   13e22:	0f be c0             	movsbl %al,%eax
   13e25:	83 ec 08             	sub    $0x8,%esp
   13e28:	50                   	push   %eax
   13e29:	ff 75 f0             	pushl  -0x10(%ebp)
   13e2c:	e8 21 fe ff ff       	call   13c52 <write_esc_square>
   13e31:	83 c4 10             	add    $0x10,%esp
                break;
   13e34:	90                   	nop
        len++;
   13e35:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
    do {
   13e39:	e9 3e ff ff ff       	jmp    13d7c <console_write+0x33>
}
   13e3e:	c9                   	leave  
   13e3f:	c3                   	ret    

00013e40 <console_close>:


void console_close (int dev) {
   13e40:	55                   	push   %ebp
   13e41:	89 e5                	mov    %esp,%ebp
}
   13e43:	90                   	nop
   13e44:	5d                   	pop    %ebp
   13e45:	c3                   	ret    

00013e46 <is_devid_bad>:
    &dev_disk_desc,
};

static device_t dev_tbl[DEV_TABLE_SIZE];

static int is_devid_bad (int dev_id) {
   13e46:	55                   	push   %ebp
   13e47:	89 e5                	mov    %esp,%ebp
    if ((dev_id < 0) || (dev_id >=  sizeof(dev_tbl) / sizeof(dev_tbl[0]))) {
   13e49:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   13e4d:	78 08                	js     13e57 <is_devid_bad+0x11>
   13e4f:	8b 45 08             	mov    0x8(%ebp),%eax
   13e52:	83 f8 7f             	cmp    $0x7f,%eax
   13e55:	76 07                	jbe    13e5e <is_devid_bad+0x18>
        return 1;
   13e57:	b8 01 00 00 00       	mov    $0x1,%eax
   13e5c:	eb 24                	jmp    13e82 <is_devid_bad+0x3c>
    }

    if (dev_tbl[dev_id].desc == (dev_desc_t *)0) {
   13e5e:	8b 55 08             	mov    0x8(%ebp),%edx
   13e61:	89 d0                	mov    %edx,%eax
   13e63:	c1 e0 02             	shl    $0x2,%eax
   13e66:	01 d0                	add    %edx,%eax
   13e68:	c1 e0 02             	shl    $0x2,%eax
   13e6b:	05 40 59 03 00       	add    $0x35940,%eax
   13e70:	8b 00                	mov    (%eax),%eax
   13e72:	85 c0                	test   %eax,%eax
   13e74:	75 07                	jne    13e7d <is_devid_bad+0x37>
        return 1;
   13e76:	b8 01 00 00 00       	mov    $0x1,%eax
   13e7b:	eb 05                	jmp    13e82 <is_devid_bad+0x3c>
    }

    return 0;
   13e7d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   13e82:	5d                   	pop    %ebp
   13e83:	c3                   	ret    

00013e84 <dev_open>:

int dev_open (int major, int minor, void * data) {
   13e84:	55                   	push   %ebp
   13e85:	89 e5                	mov    %esp,%ebp
   13e87:	83 ec 28             	sub    $0x28,%esp
    irq_state_t state = irq_enter_protection();
   13e8a:	e8 7f f2 ff ff       	call   1310e <irq_enter_protection>
   13e8f:	89 45 e4             	mov    %eax,-0x1c(%ebp)

    device_t * free_dev = (device_t *)0;
   13e92:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13e99:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   13ea0:	eb 68                	jmp    13f0a <dev_open+0x86>
        device_t * dev = dev_tbl + i;
   13ea2:	8b 55 f0             	mov    -0x10(%ebp),%edx
   13ea5:	89 d0                	mov    %edx,%eax
   13ea7:	c1 e0 02             	shl    $0x2,%eax
   13eaa:	01 d0                	add    %edx,%eax
   13eac:	c1 e0 02             	shl    $0x2,%eax
   13eaf:	05 40 59 03 00       	add    $0x35940,%eax
   13eb4:	89 45 d8             	mov    %eax,-0x28(%ebp)
        if (dev->open_count == 0) {
   13eb7:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13eba:	8b 40 10             	mov    0x10(%eax),%eax
   13ebd:	85 c0                	test   %eax,%eax
   13ebf:	75 08                	jne    13ec9 <dev_open+0x45>
            free_dev = dev;
   13ec1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ec4:	89 45 f4             	mov    %eax,-0xc(%ebp)
   13ec7:	eb 3d                	jmp    13f06 <dev_open+0x82>
        } else if ((dev->desc->major == major) && (dev->minor == minor)) {
   13ec9:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ecc:	8b 00                	mov    (%eax),%eax
   13ece:	8b 40 20             	mov    0x20(%eax),%eax
   13ed1:	39 45 08             	cmp    %eax,0x8(%ebp)
   13ed4:	75 30                	jne    13f06 <dev_open+0x82>
   13ed6:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ed9:	8b 40 08             	mov    0x8(%eax),%eax
   13edc:	39 45 0c             	cmp    %eax,0xc(%ebp)
   13edf:	75 25                	jne    13f06 <dev_open+0x82>
            dev->open_count++;
   13ee1:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13ee4:	8b 40 10             	mov    0x10(%eax),%eax
   13ee7:	8d 50 01             	lea    0x1(%eax),%edx
   13eea:	8b 45 d8             	mov    -0x28(%ebp),%eax
   13eed:	89 50 10             	mov    %edx,0x10(%eax)
            irq_leave_protection(state);
   13ef0:	83 ec 0c             	sub    $0xc,%esp
   13ef3:	ff 75 e4             	pushl  -0x1c(%ebp)
   13ef6:	e8 2b f2 ff ff       	call   13126 <irq_leave_protection>
   13efb:	83 c4 10             	add    $0x10,%esp
            return i;
   13efe:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f01:	e9 c8 00 00 00       	jmp    13fce <dev_open+0x14a>
    for (int i = 0; i < sizeof(dev_tbl) / sizeof(dev_tbl[0]); i++) {
   13f06:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   13f0a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   13f0d:	83 f8 7f             	cmp    $0x7f,%eax
   13f10:	76 90                	jbe    13ea2 <dev_open+0x1e>
        }
    }

    dev_desc_t * desc = (dev_desc_t *)0;
   13f12:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13f19:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
   13f20:	eb 24                	jmp    13f46 <dev_open+0xc2>
        dev_desc_t * d = dev_desc_tbl[i];
   13f22:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f25:	8b 04 85 50 a0 01 00 	mov    0x1a050(,%eax,4),%eax
   13f2c:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (d->major == major) {
   13f2f:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f32:	8b 40 20             	mov    0x20(%eax),%eax
   13f35:	39 45 08             	cmp    %eax,0x8(%ebp)
   13f38:	75 08                	jne    13f42 <dev_open+0xbe>
            desc = d;
   13f3a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   13f3d:	89 45 ec             	mov    %eax,-0x14(%ebp)
            break;
   13f40:	eb 0c                	jmp    13f4e <dev_open+0xca>
    for (int i = 0; i < sizeof(dev_desc_tbl) / sizeof(dev_desc_tbl[0]); i++) {
   13f42:	83 45 e8 01          	addl   $0x1,-0x18(%ebp)
   13f46:	8b 45 e8             	mov    -0x18(%ebp),%eax
   13f49:	83 f8 01             	cmp    $0x1,%eax
   13f4c:	76 d4                	jbe    13f22 <dev_open+0x9e>
        }
    }

    if (desc && free_dev) {
   13f4e:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   13f52:	74 67                	je     13fbb <dev_open+0x137>
   13f54:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   13f58:	74 61                	je     13fbb <dev_open+0x137>
        free_dev->minor = minor;
   13f5a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f5d:	8b 55 0c             	mov    0xc(%ebp),%edx
   13f60:	89 50 08             	mov    %edx,0x8(%eax)
        free_dev->data = data;
   13f63:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f66:	8b 55 10             	mov    0x10(%ebp),%edx
   13f69:	89 50 0c             	mov    %edx,0xc(%eax)
        free_dev->desc = desc;
   13f6c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f6f:	8b 55 ec             	mov    -0x14(%ebp),%edx
   13f72:	89 10                	mov    %edx,(%eax)

        int err = desc->open(free_dev);
   13f74:	8b 45 ec             	mov    -0x14(%ebp),%eax
   13f77:	8b 40 24             	mov    0x24(%eax),%eax
   13f7a:	83 ec 0c             	sub    $0xc,%esp
   13f7d:	ff 75 f4             	pushl  -0xc(%ebp)
   13f80:	ff d0                	call   *%eax
   13f82:	83 c4 10             	add    $0x10,%esp
   13f85:	89 45 dc             	mov    %eax,-0x24(%ebp)
        if (err == 0) {
   13f88:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   13f8c:	75 2d                	jne    13fbb <dev_open+0x137>
            free_dev->open_count = 1;
   13f8e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13f91:	c7 40 10 01 00 00 00 	movl   $0x1,0x10(%eax)
            irq_leave_protection(state);
   13f98:	83 ec 0c             	sub    $0xc,%esp
   13f9b:	ff 75 e4             	pushl  -0x1c(%ebp)
   13f9e:	e8 83 f1 ff ff       	call   13126 <irq_leave_protection>
   13fa3:	83 c4 10             	add    $0x10,%esp
            return free_dev - dev_tbl;
   13fa6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   13fa9:	ba 40 59 03 00       	mov    $0x35940,%edx
   13fae:	29 d0                	sub    %edx,%eax
   13fb0:	c1 f8 02             	sar    $0x2,%eax
   13fb3:	69 c0 cd cc cc cc    	imul   $0xcccccccd,%eax,%eax
   13fb9:	eb 13                	jmp    13fce <dev_open+0x14a>
        }
    }

    irq_leave_protection(state);
   13fbb:	83 ec 0c             	sub    $0xc,%esp
   13fbe:	ff 75 e4             	pushl  -0x1c(%ebp)
   13fc1:	e8 60 f1 ff ff       	call   13126 <irq_leave_protection>
   13fc6:	83 c4 10             	add    $0x10,%esp
    return -1;
   13fc9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   13fce:	c9                   	leave  
   13fcf:	c3                   	ret    

00013fd0 <dev_read>:


int dev_read (int dev_id, int addr, char * buf, int size) {
   13fd0:	55                   	push   %ebp
   13fd1:	89 e5                	mov    %esp,%ebp
   13fd3:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   13fd6:	ff 75 08             	pushl  0x8(%ebp)
   13fd9:	e8 68 fe ff ff       	call   13e46 <is_devid_bad>
   13fde:	83 c4 04             	add    $0x4,%esp
   13fe1:	85 c0                	test   %eax,%eax
   13fe3:	74 07                	je     13fec <dev_read+0x1c>
        return -1;
   13fe5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   13fea:	eb 2e                	jmp    1401a <dev_read+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   13fec:	8b 55 08             	mov    0x8(%ebp),%edx
   13fef:	89 d0                	mov    %edx,%eax
   13ff1:	c1 e0 02             	shl    $0x2,%eax
   13ff4:	01 d0                	add    %edx,%eax
   13ff6:	c1 e0 02             	shl    $0x2,%eax
   13ff9:	05 40 59 03 00       	add    $0x35940,%eax
   13ffe:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->read(dev, addr, buf, size);
   14001:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14004:	8b 00                	mov    (%eax),%eax
   14006:	8b 40 28             	mov    0x28(%eax),%eax
   14009:	ff 75 14             	pushl  0x14(%ebp)
   1400c:	ff 75 10             	pushl  0x10(%ebp)
   1400f:	ff 75 0c             	pushl  0xc(%ebp)
   14012:	ff 75 f4             	pushl  -0xc(%ebp)
   14015:	ff d0                	call   *%eax
   14017:	83 c4 10             	add    $0x10,%esp
}
   1401a:	c9                   	leave  
   1401b:	c3                   	ret    

0001401c <dev_write>:


int dev_write (int dev_id, int addr, char * buf, int size) {
   1401c:	55                   	push   %ebp
   1401d:	89 e5                	mov    %esp,%ebp
   1401f:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   14022:	ff 75 08             	pushl  0x8(%ebp)
   14025:	e8 1c fe ff ff       	call   13e46 <is_devid_bad>
   1402a:	83 c4 04             	add    $0x4,%esp
   1402d:	85 c0                	test   %eax,%eax
   1402f:	74 07                	je     14038 <dev_write+0x1c>
        return -1;
   14031:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14036:	eb 2e                	jmp    14066 <dev_write+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   14038:	8b 55 08             	mov    0x8(%ebp),%edx
   1403b:	89 d0                	mov    %edx,%eax
   1403d:	c1 e0 02             	shl    $0x2,%eax
   14040:	01 d0                	add    %edx,%eax
   14042:	c1 e0 02             	shl    $0x2,%eax
   14045:	05 40 59 03 00       	add    $0x35940,%eax
   1404a:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->write(dev, addr, buf, size);
   1404d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14050:	8b 00                	mov    (%eax),%eax
   14052:	8b 40 2c             	mov    0x2c(%eax),%eax
   14055:	ff 75 14             	pushl  0x14(%ebp)
   14058:	ff 75 10             	pushl  0x10(%ebp)
   1405b:	ff 75 0c             	pushl  0xc(%ebp)
   1405e:	ff 75 f4             	pushl  -0xc(%ebp)
   14061:	ff d0                	call   *%eax
   14063:	83 c4 10             	add    $0x10,%esp
}
   14066:	c9                   	leave  
   14067:	c3                   	ret    

00014068 <dev_control>:



int dev_control (int dev_id, int cmd, int arg0, int arg1) {
   14068:	55                   	push   %ebp
   14069:	89 e5                	mov    %esp,%ebp
   1406b:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   1406e:	ff 75 08             	pushl  0x8(%ebp)
   14071:	e8 d0 fd ff ff       	call   13e46 <is_devid_bad>
   14076:	83 c4 04             	add    $0x4,%esp
   14079:	85 c0                	test   %eax,%eax
   1407b:	74 07                	je     14084 <dev_control+0x1c>
        return -1;
   1407d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14082:	eb 2e                	jmp    140b2 <dev_control+0x4a>
    }

    device_t * dev = dev_tbl + dev_id;
   14084:	8b 55 08             	mov    0x8(%ebp),%edx
   14087:	89 d0                	mov    %edx,%eax
   14089:	c1 e0 02             	shl    $0x2,%eax
   1408c:	01 d0                	add    %edx,%eax
   1408e:	c1 e0 02             	shl    $0x2,%eax
   14091:	05 40 59 03 00       	add    $0x35940,%eax
   14096:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return dev->desc->control(dev, cmd, arg0, arg1);
   14099:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1409c:	8b 00                	mov    (%eax),%eax
   1409e:	8b 40 30             	mov    0x30(%eax),%eax
   140a1:	ff 75 14             	pushl  0x14(%ebp)
   140a4:	ff 75 10             	pushl  0x10(%ebp)
   140a7:	ff 75 0c             	pushl  0xc(%ebp)
   140aa:	ff 75 f4             	pushl  -0xc(%ebp)
   140ad:	ff d0                	call   *%eax
   140af:	83 c4 10             	add    $0x10,%esp
}
   140b2:	c9                   	leave  
   140b3:	c3                   	ret    

000140b4 <dev_close>:


void dev_close (int dev_id) {
   140b4:	55                   	push   %ebp
   140b5:	89 e5                	mov    %esp,%ebp
   140b7:	83 ec 18             	sub    $0x18,%esp
    if (is_devid_bad(dev_id)) {
   140ba:	ff 75 08             	pushl  0x8(%ebp)
   140bd:	e8 84 fd ff ff       	call   13e46 <is_devid_bad>
   140c2:	83 c4 04             	add    $0x4,%esp
   140c5:	85 c0                	test   %eax,%eax
   140c7:	75 6b                	jne    14134 <dev_close+0x80>
        return;
    }

    device_t * dev = dev_tbl + dev_id;
   140c9:	8b 55 08             	mov    0x8(%ebp),%edx
   140cc:	89 d0                	mov    %edx,%eax
   140ce:	c1 e0 02             	shl    $0x2,%eax
   140d1:	01 d0                	add    %edx,%eax
   140d3:	c1 e0 02             	shl    $0x2,%eax
   140d6:	05 40 59 03 00       	add    $0x35940,%eax
   140db:	89 45 f4             	mov    %eax,-0xc(%ebp)

    irq_state_t state = irq_enter_protection();
   140de:	e8 2b f0 ff ff       	call   1310e <irq_enter_protection>
   140e3:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (--dev->open_count == 0) {
   140e6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140e9:	8b 40 10             	mov    0x10(%eax),%eax
   140ec:	8d 50 ff             	lea    -0x1(%eax),%edx
   140ef:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140f2:	89 50 10             	mov    %edx,0x10(%eax)
   140f5:	8b 45 f4             	mov    -0xc(%ebp),%eax
   140f8:	8b 40 10             	mov    0x10(%eax),%eax
   140fb:	85 c0                	test   %eax,%eax
   140fd:	75 25                	jne    14124 <dev_close+0x70>
        dev->desc->close(dev);
   140ff:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14102:	8b 00                	mov    (%eax),%eax
   14104:	8b 40 34             	mov    0x34(%eax),%eax
   14107:	83 ec 0c             	sub    $0xc,%esp
   1410a:	ff 75 f4             	pushl  -0xc(%ebp)
   1410d:	ff d0                	call   *%eax
   1410f:	83 c4 10             	add    $0x10,%esp
        kernel_memset(dev, 0, sizeof(device_t));
   14112:	83 ec 04             	sub    $0x4,%esp
   14115:	6a 14                	push   $0x14
   14117:	6a 00                	push   $0x0
   14119:	ff 75 f4             	pushl  -0xc(%ebp)
   1411c:	e8 5b 43 00 00       	call   1847c <kernel_memset>
   14121:	83 c4 10             	add    $0x10,%esp
    }
    irq_leave_protection(state);
   14124:	83 ec 0c             	sub    $0xc,%esp
   14127:	ff 75 f0             	pushl  -0x10(%ebp)
   1412a:	e8 f7 ef ff ff       	call   13126 <irq_leave_protection>
   1412f:	83 c4 10             	add    $0x10,%esp
   14132:	eb 01                	jmp    14135 <dev_close+0x81>
        return;
   14134:	90                   	nop
   14135:	c9                   	leave  
   14136:	c3                   	ret    

00014137 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14137:	55                   	push   %ebp
   14138:	89 e5                	mov    %esp,%ebp
   1413a:	83 ec 14             	sub    $0x14,%esp
   1413d:	8b 45 08             	mov    0x8(%ebp),%eax
   14140:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14144:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14148:	89 c2                	mov    %eax,%edx
   1414a:	ec                   	in     (%dx),%al
   1414b:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   1414e:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14152:	c9                   	leave  
   14153:	c3                   	ret    

00014154 <inw>:
static inline uint16_t inw(uint16_t  port) {
   14154:	55                   	push   %ebp
   14155:	89 e5                	mov    %esp,%ebp
   14157:	83 ec 14             	sub    $0x14,%esp
   1415a:	8b 45 08             	mov    0x8(%ebp),%eax
   1415d:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
   14161:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14165:	89 c2                	mov    %eax,%edx
   14167:	66 ed                	in     (%dx),%ax
   14169:	66 89 45 fe          	mov    %ax,-0x2(%ebp)
	return rv;
   1416d:	0f b7 45 fe          	movzwl -0x2(%ebp),%eax
}
   14171:	c9                   	leave  
   14172:	c3                   	ret    

00014173 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14173:	55                   	push   %ebp
   14174:	89 e5                	mov    %esp,%ebp
   14176:	83 ec 08             	sub    $0x8,%esp
   14179:	8b 55 08             	mov    0x8(%ebp),%edx
   1417c:	8b 45 0c             	mov    0xc(%ebp),%eax
   1417f:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14183:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14186:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   1418a:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   1418e:	ee                   	out    %al,(%dx)
}
   1418f:	90                   	nop
   14190:	c9                   	leave  
   14191:	c3                   	ret    

00014192 <outw>:
static inline void outw(uint16_t port, uint16_t data) {
   14192:	55                   	push   %ebp
   14193:	89 e5                	mov    %esp,%ebp
   14195:	83 ec 08             	sub    $0x8,%esp
   14198:	8b 55 08             	mov    0x8(%ebp),%edx
   1419b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1419e:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   141a2:	66 89 45 f8          	mov    %ax,-0x8(%ebp)
	__asm__ __volatile__("out %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   141a6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   141aa:	0f b7 45 f8          	movzwl -0x8(%ebp),%eax
   141ae:	66 ef                	out    %ax,(%dx)
}
   141b0:	90                   	nop
   141b1:	c9                   	leave  
   141b2:	c3                   	ret    

000141b3 <ata_send_cmd>:
static mutex_t mutex;     
static sem_t op_sem;      
static int task_on_op;


static void ata_send_cmd (disk_t * disk, uint32_t start_sector, uint32_t sector_count, int cmd) {
   141b3:	55                   	push   %ebp
   141b4:	89 e5                	mov    %esp,%ebp
    outb(DISK_DRIVE(disk), DISK_DRIVE_BASE | disk->drive);		
   141b6:	8b 45 08             	mov    0x8(%ebp),%eax
   141b9:	8b 40 20             	mov    0x20(%eax),%eax
   141bc:	83 c8 e0             	or     $0xffffffe0,%eax
   141bf:	0f b6 d0             	movzbl %al,%edx
   141c2:	8b 45 08             	mov    0x8(%ebp),%eax
   141c5:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141c9:	83 c0 06             	add    $0x6,%eax
   141cc:	0f b7 c0             	movzwl %ax,%eax
   141cf:	52                   	push   %edx
   141d0:	50                   	push   %eax
   141d1:	e8 9d ff ff ff       	call   14173 <outb>
   141d6:	83 c4 08             	add    $0x8,%esp

	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count >> 8));	
   141d9:	8b 45 10             	mov    0x10(%ebp),%eax
   141dc:	c1 e8 08             	shr    $0x8,%eax
   141df:	0f b6 d0             	movzbl %al,%edx
   141e2:	8b 45 08             	mov    0x8(%ebp),%eax
   141e5:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   141e9:	83 c0 02             	add    $0x2,%eax
   141ec:	0f b7 c0             	movzwl %ax,%eax
   141ef:	52                   	push   %edx
   141f0:	50                   	push   %eax
   141f1:	e8 7d ff ff ff       	call   14173 <outb>
   141f6:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 24));		
   141f9:	8b 45 0c             	mov    0xc(%ebp),%eax
   141fc:	c1 e8 18             	shr    $0x18,%eax
   141ff:	0f b6 d0             	movzbl %al,%edx
   14202:	8b 45 08             	mov    0x8(%ebp),%eax
   14205:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14209:	83 c0 03             	add    $0x3,%eax
   1420c:	0f b7 c0             	movzwl %ax,%eax
   1420f:	52                   	push   %edx
   14210:	50                   	push   %eax
   14211:	e8 5d ff ff ff       	call   14173 <outb>
   14216:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), 0);									
   14219:	8b 45 08             	mov    0x8(%ebp),%eax
   1421c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14220:	83 c0 04             	add    $0x4,%eax
   14223:	0f b7 c0             	movzwl %ax,%eax
   14226:	6a 00                	push   $0x0
   14228:	50                   	push   %eax
   14229:	e8 45 ff ff ff       	call   14173 <outb>
   1422e:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), 0);										
   14231:	8b 45 08             	mov    0x8(%ebp),%eax
   14234:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14238:	83 c0 05             	add    $0x5,%eax
   1423b:	0f b7 c0             	movzwl %ax,%eax
   1423e:	6a 00                	push   $0x0
   14240:	50                   	push   %eax
   14241:	e8 2d ff ff ff       	call   14173 <outb>
   14246:	83 c4 08             	add    $0x8,%esp
	outb(DISK_SECTOR_COUNT(disk), (uint8_t) (sector_count));		
   14249:	8b 45 10             	mov    0x10(%ebp),%eax
   1424c:	0f b6 d0             	movzbl %al,%edx
   1424f:	8b 45 08             	mov    0x8(%ebp),%eax
   14252:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14256:	83 c0 02             	add    $0x2,%eax
   14259:	0f b7 c0             	movzwl %ax,%eax
   1425c:	52                   	push   %edx
   1425d:	50                   	push   %eax
   1425e:	e8 10 ff ff ff       	call   14173 <outb>
   14263:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_LO(disk), (uint8_t) (start_sector >> 0));			
   14266:	8b 45 0c             	mov    0xc(%ebp),%eax
   14269:	0f b6 d0             	movzbl %al,%edx
   1426c:	8b 45 08             	mov    0x8(%ebp),%eax
   1426f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14273:	83 c0 03             	add    $0x3,%eax
   14276:	0f b7 c0             	movzwl %ax,%eax
   14279:	52                   	push   %edx
   1427a:	50                   	push   %eax
   1427b:	e8 f3 fe ff ff       	call   14173 <outb>
   14280:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_MID(disk), (uint8_t) (start_sector >> 8));		
   14283:	8b 45 0c             	mov    0xc(%ebp),%eax
   14286:	c1 e8 08             	shr    $0x8,%eax
   14289:	0f b6 d0             	movzbl %al,%edx
   1428c:	8b 45 08             	mov    0x8(%ebp),%eax
   1428f:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14293:	83 c0 04             	add    $0x4,%eax
   14296:	0f b7 c0             	movzwl %ax,%eax
   14299:	52                   	push   %edx
   1429a:	50                   	push   %eax
   1429b:	e8 d3 fe ff ff       	call   14173 <outb>
   142a0:	83 c4 08             	add    $0x8,%esp
	outb(DISK_LBA_HI(disk), (uint8_t) (start_sector >> 16));		
   142a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   142a6:	c1 e8 10             	shr    $0x10,%eax
   142a9:	0f b6 d0             	movzbl %al,%edx
   142ac:	8b 45 08             	mov    0x8(%ebp),%eax
   142af:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142b3:	83 c0 05             	add    $0x5,%eax
   142b6:	0f b7 c0             	movzwl %ax,%eax
   142b9:	52                   	push   %edx
   142ba:	50                   	push   %eax
   142bb:	e8 b3 fe ff ff       	call   14173 <outb>
   142c0:	83 c4 08             	add    $0x8,%esp

	outb(DISK_CMD(disk), (uint8_t)cmd);
   142c3:	8b 45 14             	mov    0x14(%ebp),%eax
   142c6:	0f b6 d0             	movzbl %al,%edx
   142c9:	8b 45 08             	mov    0x8(%ebp),%eax
   142cc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   142d0:	83 c0 07             	add    $0x7,%eax
   142d3:	0f b7 c0             	movzwl %ax,%eax
   142d6:	52                   	push   %edx
   142d7:	50                   	push   %eax
   142d8:	e8 96 fe ff ff       	call   14173 <outb>
   142dd:	83 c4 08             	add    $0x8,%esp
}
   142e0:	90                   	nop
   142e1:	c9                   	leave  
   142e2:	c3                   	ret    

000142e3 <ata_read_data>:

static inline void ata_read_data (disk_t * disk, void * buf, int size) {
   142e3:	55                   	push   %ebp
   142e4:	89 e5                	mov    %esp,%ebp
   142e6:	53                   	push   %ebx
   142e7:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   142ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   142ed:	89 45 f8             	mov    %eax,-0x8(%ebp)
    for (int i = 0; i < size / 2; i++) {
   142f0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   142f7:	eb 23                	jmp    1431c <ata_read_data+0x39>
        *c++ = inw(DISK_DATA(disk));
   142f9:	8b 45 08             	mov    0x8(%ebp),%eax
   142fc:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14300:	0f b7 c0             	movzwl %ax,%eax
   14303:	8b 5d f8             	mov    -0x8(%ebp),%ebx
   14306:	8d 53 02             	lea    0x2(%ebx),%edx
   14309:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1430c:	50                   	push   %eax
   1430d:	e8 42 fe ff ff       	call   14154 <inw>
   14312:	83 c4 04             	add    $0x4,%esp
   14315:	66 89 03             	mov    %ax,(%ebx)
    for (int i = 0; i < size / 2; i++) {
   14318:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   1431c:	8b 45 10             	mov    0x10(%ebp),%eax
   1431f:	89 c2                	mov    %eax,%edx
   14321:	c1 ea 1f             	shr    $0x1f,%edx
   14324:	01 d0                	add    %edx,%eax
   14326:	d1 f8                	sar    %eax
   14328:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1432b:	7c cc                	jl     142f9 <ata_read_data+0x16>
    }
}
   1432d:	90                   	nop
   1432e:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   14331:	c9                   	leave  
   14332:	c3                   	ret    

00014333 <ata_write_data>:


static inline void ata_write_data (disk_t * disk, void * buf, int size) {
   14333:	55                   	push   %ebp
   14334:	89 e5                	mov    %esp,%ebp
   14336:	83 ec 10             	sub    $0x10,%esp
    uint16_t * c = (uint16_t *)buf;
   14339:	8b 45 0c             	mov    0xc(%ebp),%eax
   1433c:	89 45 fc             	mov    %eax,-0x4(%ebp)
    for (int i = 0; i < size / 2; i++) {
   1433f:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
   14346:	eb 27                	jmp    1436f <ata_write_data+0x3c>
        outw(DISK_DATA(disk), *c++);
   14348:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1434b:	8d 50 02             	lea    0x2(%eax),%edx
   1434e:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14351:	0f b7 00             	movzwl (%eax),%eax
   14354:	0f b7 d0             	movzwl %ax,%edx
   14357:	8b 45 08             	mov    0x8(%ebp),%eax
   1435a:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   1435e:	0f b7 c0             	movzwl %ax,%eax
   14361:	52                   	push   %edx
   14362:	50                   	push   %eax
   14363:	e8 2a fe ff ff       	call   14192 <outw>
   14368:	83 c4 08             	add    $0x8,%esp
    for (int i = 0; i < size / 2; i++) {
   1436b:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
   1436f:	8b 45 10             	mov    0x10(%ebp),%eax
   14372:	89 c2                	mov    %eax,%edx
   14374:	c1 ea 1f             	shr    $0x1f,%edx
   14377:	01 d0                	add    %edx,%eax
   14379:	d1 f8                	sar    %eax
   1437b:	39 45 f8             	cmp    %eax,-0x8(%ebp)
   1437e:	7c c8                	jl     14348 <ata_write_data+0x15>
    }
}
   14380:	90                   	nop
   14381:	c9                   	leave  
   14382:	c3                   	ret    

00014383 <ata_wait_data>:


static inline int ata_wait_data (disk_t * disk) {
   14383:	55                   	push   %ebp
   14384:	89 e5                	mov    %esp,%ebp
   14386:	83 ec 10             	sub    $0x10,%esp
    uint8_t status;
	do {
        status = inb(DISK_STATUS(disk));
   14389:	8b 45 08             	mov    0x8(%ebp),%eax
   1438c:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14390:	83 c0 07             	add    $0x7,%eax
   14393:	0f b7 c0             	movzwl %ax,%eax
   14396:	50                   	push   %eax
   14397:	e8 9b fd ff ff       	call   14137 <inb>
   1439c:	83 c4 04             	add    $0x4,%esp
   1439f:	88 45 ff             	mov    %al,-0x1(%ebp)
        if ((status & (DISK_STATUS_BUSY | DISK_STATUS_DRQ | DISK_STATUS_ERR))
   143a2:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   143a6:	25 89 00 00 00       	and    $0x89,%eax
   143ab:	3d 80 00 00 00       	cmp    $0x80,%eax
   143b0:	75 02                	jne    143b4 <ata_wait_data+0x31>
        status = inb(DISK_STATUS(disk));
   143b2:	eb d5                	jmp    14389 <ata_wait_data+0x6>
                        != DISK_STATUS_BUSY) {
            break;
   143b4:	90                   	nop
        }
    }while (1);

    return (status & DISK_STATUS_ERR) ? -1 : 0;
   143b5:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
   143b9:	83 e0 01             	and    $0x1,%eax
   143bc:	85 c0                	test   %eax,%eax
   143be:	74 07                	je     143c7 <ata_wait_data+0x44>
   143c0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   143c5:	eb 05                	jmp    143cc <ata_wait_data+0x49>
   143c7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   143cc:	c9                   	leave  
   143cd:	c3                   	ret    

000143ce <print_disk_info>:


static void print_disk_info (disk_t * disk) {
   143ce:	55                   	push   %ebp
   143cf:	89 e5                	mov    %esp,%ebp
   143d1:	53                   	push   %ebx
   143d2:	83 ec 14             	sub    $0x14,%esp
    log_printf("%s:", disk->name);
   143d5:	8b 45 08             	mov    0x8(%ebp),%eax
   143d8:	83 ec 08             	sub    $0x8,%esp
   143db:	50                   	push   %eax
   143dc:	68 00 96 01 00       	push   $0x19600
   143e1:	e8 40 46 00 00       	call   18a26 <log_printf>
   143e6:	83 c4 10             	add    $0x10,%esp
    log_printf("  port_base: %x", disk->port_base);
   143e9:	8b 45 08             	mov    0x8(%ebp),%eax
   143ec:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   143f0:	0f b7 c0             	movzwl %ax,%eax
   143f3:	83 ec 08             	sub    $0x8,%esp
   143f6:	50                   	push   %eax
   143f7:	68 04 96 01 00       	push   $0x19604
   143fc:	e8 25 46 00 00       	call   18a26 <log_printf>
   14401:	83 c4 10             	add    $0x10,%esp
    log_printf("  total_size: %d m", disk->sector_count * disk->sector_size / 1024 /1024);
   14404:	8b 45 08             	mov    0x8(%ebp),%eax
   14407:	8b 50 2c             	mov    0x2c(%eax),%edx
   1440a:	8b 45 08             	mov    0x8(%ebp),%eax
   1440d:	8b 40 28             	mov    0x28(%eax),%eax
   14410:	0f af c2             	imul   %edx,%eax
   14413:	8d 90 ff ff 0f 00    	lea    0xfffff(%eax),%edx
   14419:	85 c0                	test   %eax,%eax
   1441b:	0f 48 c2             	cmovs  %edx,%eax
   1441e:	c1 f8 14             	sar    $0x14,%eax
   14421:	83 ec 08             	sub    $0x8,%esp
   14424:	50                   	push   %eax
   14425:	68 14 96 01 00       	push   $0x19614
   1442a:	e8 f7 45 00 00       	call   18a26 <log_printf>
   1442f:	83 c4 10             	add    $0x10,%esp
    log_printf("  drive: %s", disk->drive == DISK_DISK_MASTER ? "Master" : "Slave");
   14432:	8b 45 08             	mov    0x8(%ebp),%eax
   14435:	8b 40 20             	mov    0x20(%eax),%eax
   14438:	85 c0                	test   %eax,%eax
   1443a:	75 07                	jne    14443 <print_disk_info+0x75>
   1443c:	b8 27 96 01 00       	mov    $0x19627,%eax
   14441:	eb 05                	jmp    14448 <print_disk_info+0x7a>
   14443:	b8 2e 96 01 00       	mov    $0x1962e,%eax
   14448:	83 ec 08             	sub    $0x8,%esp
   1444b:	50                   	push   %eax
   1444c:	68 34 96 01 00       	push   $0x19634
   14451:	e8 d0 45 00 00       	call   18a26 <log_printf>
   14456:	83 c4 10             	add    $0x10,%esp

    log_printf("  Part info:");
   14459:	83 ec 0c             	sub    $0xc,%esp
   1445c:	68 40 96 01 00       	push   $0x19640
   14461:	e8 c0 45 00 00       	call   18a26 <log_printf>
   14466:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   14469:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14470:	eb 4e                	jmp    144c0 <print_disk_info+0xf2>
        partinfo_t * part_info = disk->partinfo + i;
   14472:	8b 45 08             	mov    0x8(%ebp),%eax
   14475:	8d 48 30             	lea    0x30(%eax),%ecx
   14478:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1447b:	89 d0                	mov    %edx,%eax
   1447d:	01 c0                	add    %eax,%eax
   1447f:	01 d0                	add    %edx,%eax
   14481:	c1 e0 04             	shl    $0x4,%eax
   14484:	01 c8                	add    %ecx,%eax
   14486:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (part_info->type != FS_INVALID) {
   14489:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1448c:	8b 40 24             	mov    0x24(%eax),%eax
   1448f:	85 c0                	test   %eax,%eax
   14491:	74 29                	je     144bc <print_disk_info+0xee>
            log_printf("    %s: type: %x, start sector: %d, count %d",
   14493:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14496:	8b 58 2c             	mov    0x2c(%eax),%ebx
   14499:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1449c:	8b 48 28             	mov    0x28(%eax),%ecx
                    part_info->name, part_info->type,
   1449f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   144a2:	8b 50 24             	mov    0x24(%eax),%edx
   144a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
            log_printf("    %s: type: %x, start sector: %d, count %d",
   144a8:	83 ec 0c             	sub    $0xc,%esp
   144ab:	53                   	push   %ebx
   144ac:	51                   	push   %ecx
   144ad:	52                   	push   %edx
   144ae:	50                   	push   %eax
   144af:	68 50 96 01 00       	push   $0x19650
   144b4:	e8 6d 45 00 00       	call   18a26 <log_printf>
   144b9:	83 c4 20             	add    $0x20,%esp
    for (int i = 0; i < DISK_PRIMARY_PART_CNT; i++) {
   144bc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   144c0:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)
   144c4:	7e ac                	jle    14472 <print_disk_info+0xa4>
                    part_info->start_sector, part_info->total_sector);
        }
    }
}
   144c6:	90                   	nop
   144c7:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   144ca:	c9                   	leave  
   144cb:	c3                   	ret    

000144cc <detect_part_info>:

static int detect_part_info(disk_t * disk) {
   144cc:	55                   	push   %ebp
   144cd:	89 e5                	mov    %esp,%ebp
   144cf:	81 ec 18 02 00 00    	sub    $0x218,%esp
    mbr_t mbr;

    ata_send_cmd(disk, 0, 1, DISK_CMD_READ);
   144d5:	6a 24                	push   $0x24
   144d7:	6a 01                	push   $0x1
   144d9:	6a 00                	push   $0x0
   144db:	ff 75 08             	pushl  0x8(%ebp)
   144de:	e8 d0 fc ff ff       	call   141b3 <ata_send_cmd>
   144e3:	83 c4 10             	add    $0x10,%esp
    int err = ata_wait_data(disk);
   144e6:	ff 75 08             	pushl  0x8(%ebp)
   144e9:	e8 95 fe ff ff       	call   14383 <ata_wait_data>
   144ee:	83 c4 04             	add    $0x4,%esp
   144f1:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   144f4:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   144f8:	79 18                	jns    14512 <detect_part_info+0x46>
        log_printf("read mbr failed");
   144fa:	83 ec 0c             	sub    $0xc,%esp
   144fd:	68 7d 96 01 00       	push   $0x1967d
   14502:	e8 1f 45 00 00       	call   18a26 <log_printf>
   14507:	83 c4 10             	add    $0x10,%esp
        return err;
   1450a:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1450d:	e9 d1 00 00 00       	jmp    145e3 <detect_part_info+0x117>
    }
    ata_read_data(disk, &mbr, sizeof(mbr));
   14512:	83 ec 04             	sub    $0x4,%esp
   14515:	68 00 02 00 00       	push   $0x200
   1451a:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14520:	50                   	push   %eax
   14521:	ff 75 08             	pushl  0x8(%ebp)
   14524:	e8 ba fd ff ff       	call   142e3 <ata_read_data>
   14529:	83 c4 10             	add    $0x10,%esp

	part_item_t * item = mbr.part_item;
   1452c:	8d 85 e8 fd ff ff    	lea    -0x218(%ebp),%eax
   14532:	05 be 01 00 00       	add    $0x1be,%eax
   14537:	89 45 f4             	mov    %eax,-0xc(%ebp)
    partinfo_t * part_info = disk->partinfo + 1;
   1453a:	8b 45 08             	mov    0x8(%ebp),%eax
   1453d:	83 c0 30             	add    $0x30,%eax
   14540:	83 c0 30             	add    $0x30,%eax
   14543:	89 45 f0             	mov    %eax,-0x10(%ebp)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   14546:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   1454d:	e9 87 00 00 00       	jmp    145d9 <detect_part_info+0x10d>
		part_info->type = item->system_id;
   14552:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14555:	0f b6 40 04          	movzbl 0x4(%eax),%eax
   14559:	0f b6 d0             	movzbl %al,%edx
   1455c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1455f:	89 50 24             	mov    %edx,0x24(%eax)

		if (part_info->type == FS_INVALID) {
   14562:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14565:	8b 40 24             	mov    0x24(%eax),%eax
   14568:	85 c0                	test   %eax,%eax
   1456a:	75 20                	jne    1458c <detect_part_info+0xc0>
			part_info->total_sector = 0;
   1456c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1456f:	c7 40 2c 00 00 00 00 	movl   $0x0,0x2c(%eax)
            part_info->start_sector = 0;
   14576:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14579:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
            part_info->disk = (disk_t *)0;
   14580:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14583:	c7 40 20 00 00 00 00 	movl   $0x0,0x20(%eax)
   1458a:	eb 41                	jmp    145cd <detect_part_info+0x101>
        } else {
            kernel_sprintf(part_info->name, "%s%d", disk->name, i + 1);
   1458c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1458f:	8d 48 01             	lea    0x1(%eax),%ecx
   14592:	8b 55 08             	mov    0x8(%ebp),%edx
   14595:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14598:	51                   	push   %ecx
   14599:	52                   	push   %edx
   1459a:	68 8d 96 01 00       	push   $0x1968d
   1459f:	50                   	push   %eax
   145a0:	e8 b5 40 00 00       	call   1865a <kernel_sprintf>
   145a5:	83 c4 10             	add    $0x10,%esp
            part_info->start_sector = item->relative_sectors;
   145a8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145ab:	8b 40 08             	mov    0x8(%eax),%eax
   145ae:	89 c2                	mov    %eax,%edx
   145b0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145b3:	89 50 28             	mov    %edx,0x28(%eax)
            part_info->total_sector = item->total_sectors;
   145b6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   145b9:	8b 40 0c             	mov    0xc(%eax),%eax
   145bc:	89 c2                	mov    %eax,%edx
   145be:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145c1:	89 50 2c             	mov    %edx,0x2c(%eax)
            part_info->disk = disk;
   145c4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   145c7:	8b 55 08             	mov    0x8(%ebp),%edx
   145ca:	89 50 20             	mov    %edx,0x20(%eax)
	for (int i = 0; i < MBR_PRIMARY_PART_NR; i++, item++, part_info++) {
   145cd:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   145d1:	83 45 f4 10          	addl   $0x10,-0xc(%ebp)
   145d5:	83 45 f0 30          	addl   $0x30,-0x10(%ebp)
   145d9:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   145dd:	0f 8e 6f ff ff ff    	jle    14552 <detect_part_info+0x86>
        }
	}
}
   145e3:	c9                   	leave  
   145e4:	c3                   	ret    

000145e5 <identify_disk>:


static int identify_disk (disk_t * disk) {
   145e5:	55                   	push   %ebp
   145e6:	89 e5                	mov    %esp,%ebp
   145e8:	81 ec 18 02 00 00    	sub    $0x218,%esp
    ata_send_cmd(disk, 0, 0, DISK_CMD_IDENTIFY);
   145ee:	68 ec 00 00 00       	push   $0xec
   145f3:	6a 00                	push   $0x0
   145f5:	6a 00                	push   $0x0
   145f7:	ff 75 08             	pushl  0x8(%ebp)
   145fa:	e8 b4 fb ff ff       	call   141b3 <ata_send_cmd>
   145ff:	83 c4 10             	add    $0x10,%esp

    int err = inb(DISK_STATUS(disk));
   14602:	8b 45 08             	mov    0x8(%ebp),%eax
   14605:	0f b7 40 24          	movzwl 0x24(%eax),%eax
   14609:	83 c0 07             	add    $0x7,%eax
   1460c:	0f b7 c0             	movzwl %ax,%eax
   1460f:	50                   	push   %eax
   14610:	e8 22 fb ff ff       	call   14137 <inb>
   14615:	83 c4 04             	add    $0x4,%esp
   14618:	0f b6 c0             	movzbl %al,%eax
   1461b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err == 0) {
   1461e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14622:	75 1e                	jne    14642 <identify_disk+0x5d>
        log_printf("%s doesn't exist\n", disk->name);
   14624:	8b 45 08             	mov    0x8(%ebp),%eax
   14627:	83 ec 08             	sub    $0x8,%esp
   1462a:	50                   	push   %eax
   1462b:	68 92 96 01 00       	push   $0x19692
   14630:	e8 f1 43 00 00       	call   18a26 <log_printf>
   14635:	83 c4 10             	add    $0x10,%esp
        return -1;
   14638:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1463d:	e9 c8 00 00 00       	jmp    1470a <identify_disk+0x125>
    }

    err = ata_wait_data(disk);
   14642:	83 ec 0c             	sub    $0xc,%esp
   14645:	ff 75 08             	pushl  0x8(%ebp)
   14648:	e8 36 fd ff ff       	call   14383 <ata_wait_data>
   1464d:	83 c4 10             	add    $0x10,%esp
   14650:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (err < 0) {
   14653:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14657:	79 1c                	jns    14675 <identify_disk+0x90>
        log_printf("disk[%s]: read failed!\n", disk->name);
   14659:	8b 45 08             	mov    0x8(%ebp),%eax
   1465c:	83 ec 08             	sub    $0x8,%esp
   1465f:	50                   	push   %eax
   14660:	68 a4 96 01 00       	push   $0x196a4
   14665:	e8 bc 43 00 00       	call   18a26 <log_printf>
   1466a:	83 c4 10             	add    $0x10,%esp
        return err;
   1466d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14670:	e9 95 00 00 00       	jmp    1470a <identify_disk+0x125>
    }

    uint16_t buf[256];
    ata_read_data(disk, buf, sizeof(buf));
   14675:	83 ec 04             	sub    $0x4,%esp
   14678:	68 00 02 00 00       	push   $0x200
   1467d:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14683:	50                   	push   %eax
   14684:	ff 75 08             	pushl  0x8(%ebp)
   14687:	e8 57 fc ff ff       	call   142e3 <ata_read_data>
   1468c:	83 c4 10             	add    $0x10,%esp
    disk->sector_count = *(uint32_t *)(buf + 100);
   1468f:	8d 85 f0 fd ff ff    	lea    -0x210(%ebp),%eax
   14695:	05 c8 00 00 00       	add    $0xc8,%eax
   1469a:	8b 00                	mov    (%eax),%eax
   1469c:	89 c2                	mov    %eax,%edx
   1469e:	8b 45 08             	mov    0x8(%ebp),%eax
   146a1:	89 50 2c             	mov    %edx,0x2c(%eax)
    disk->sector_size = SECTOR_SIZE;           
   146a4:	8b 45 08             	mov    0x8(%ebp),%eax
   146a7:	c7 40 28 00 02 00 00 	movl   $0x200,0x28(%eax)

    partinfo_t * part = disk->partinfo + 0;
   146ae:	8b 45 08             	mov    0x8(%ebp),%eax
   146b1:	83 c0 30             	add    $0x30,%eax
   146b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    part->disk = disk;
   146b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ba:	8b 55 08             	mov    0x8(%ebp),%edx
   146bd:	89 50 20             	mov    %edx,0x20(%eax)
    kernel_sprintf(part->name, "%s%d", disk->name, 0);
   146c0:	8b 55 08             	mov    0x8(%ebp),%edx
   146c3:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146c6:	6a 00                	push   $0x0
   146c8:	52                   	push   %edx
   146c9:	68 8d 96 01 00       	push   $0x1968d
   146ce:	50                   	push   %eax
   146cf:	e8 86 3f 00 00       	call   1865a <kernel_sprintf>
   146d4:	83 c4 10             	add    $0x10,%esp
    part->start_sector = 0;
   146d7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146da:	c7 40 28 00 00 00 00 	movl   $0x0,0x28(%eax)
    part->total_sector = disk->sector_count;
   146e1:	8b 45 08             	mov    0x8(%ebp),%eax
   146e4:	8b 50 2c             	mov    0x2c(%eax),%edx
   146e7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146ea:	89 50 2c             	mov    %edx,0x2c(%eax)
    part->type = FS_INVALID;
   146ed:	8b 45 f0             	mov    -0x10(%ebp),%eax
   146f0:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)

    detect_part_info(disk);
   146f7:	83 ec 0c             	sub    $0xc,%esp
   146fa:	ff 75 08             	pushl  0x8(%ebp)
   146fd:	e8 ca fd ff ff       	call   144cc <detect_part_info>
   14702:	83 c4 10             	add    $0x10,%esp
    return 0;
   14705:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1470a:	c9                   	leave  
   1470b:	c3                   	ret    

0001470c <disk_init>:


void disk_init (void) {
   1470c:	55                   	push   %ebp
   1470d:	89 e5                	mov    %esp,%ebp
   1470f:	83 ec 18             	sub    $0x18,%esp
    log_printf("Checking disk...");
   14712:	83 ec 0c             	sub    $0xc,%esp
   14715:	68 bc 96 01 00       	push   $0x196bc
   1471a:	e8 07 43 00 00       	call   18a26 <log_printf>
   1471f:	83 c4 10             	add    $0x10,%esp

    kernel_memset(disk_buf, 0, sizeof(disk_buf));
   14722:	83 ec 04             	sub    $0x4,%esp
   14725:	68 50 02 00 00       	push   $0x250
   1472a:	6a 00                	push   $0x0
   1472c:	68 40 63 03 00       	push   $0x36340
   14731:	e8 46 3d 00 00       	call   1847c <kernel_memset>
   14736:	83 c4 10             	add    $0x10,%esp

 
    mutex_init(&mutex);
   14739:	83 ec 0c             	sub    $0xc,%esp
   1473c:	68 90 65 03 00       	push   $0x36590
   14741:	e8 eb 35 00 00       	call   17d31 <mutex_init>
   14746:	83 c4 10             	add    $0x10,%esp
    sem_init(&op_sem, 0);       
   14749:	83 ec 08             	sub    $0x8,%esp
   1474c:	6a 00                	push   $0x0
   1474e:	68 a4 65 03 00       	push   $0x365a4
   14753:	e8 68 37 00 00       	call   17ec0 <sem_init>
   14758:	83 c4 10             	add    $0x10,%esp

    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   1475b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14762:	e9 90 00 00 00       	jmp    147f7 <disk_init+0xeb>
        disk_t * disk = disk_buf + i;
   14767:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1476a:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   14770:	05 40 63 03 00       	add    $0x36340,%eax
   14775:	89 45 f0             	mov    %eax,-0x10(%ebp)

        kernel_sprintf(disk->name, "sd%c", i + 'a');
   14778:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1477b:	8d 50 61             	lea    0x61(%eax),%edx
   1477e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14781:	83 ec 04             	sub    $0x4,%esp
   14784:	52                   	push   %edx
   14785:	68 cd 96 01 00       	push   $0x196cd
   1478a:	50                   	push   %eax
   1478b:	e8 ca 3e 00 00       	call   1865a <kernel_sprintf>
   14790:	83 c4 10             	add    $0x10,%esp
        disk->drive = (i == 0) ? DISK_DISK_MASTER : DISK_DISK_SLAVE;
   14793:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   14797:	75 07                	jne    147a0 <disk_init+0x94>
   14799:	ba 00 00 00 00       	mov    $0x0,%edx
   1479e:	eb 05                	jmp    147a5 <disk_init+0x99>
   147a0:	ba 10 00 00 00       	mov    $0x10,%edx
   147a5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147a8:	89 50 20             	mov    %edx,0x20(%eax)
        disk->port_base = IOBASE_PRIMARY;
   147ab:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147ae:	66 c7 40 24 f0 01    	movw   $0x1f0,0x24(%eax)
        disk->mutex = &mutex;
   147b4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147b7:	c7 80 20 01 00 00 90 	movl   $0x36590,0x120(%eax)
   147be:	65 03 00 
        disk->op_sem = &op_sem;
   147c1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   147c4:	c7 80 24 01 00 00 a4 	movl   $0x365a4,0x124(%eax)
   147cb:	65 03 00 

        int err = identify_disk(disk);
   147ce:	83 ec 0c             	sub    $0xc,%esp
   147d1:	ff 75 f0             	pushl  -0x10(%ebp)
   147d4:	e8 0c fe ff ff       	call   145e5 <identify_disk>
   147d9:	83 c4 10             	add    $0x10,%esp
   147dc:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (err == 0) {
   147df:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   147e3:	75 0e                	jne    147f3 <disk_init+0xe7>
            print_disk_info(disk);
   147e5:	83 ec 0c             	sub    $0xc,%esp
   147e8:	ff 75 f0             	pushl  -0x10(%ebp)
   147eb:	e8 de fb ff ff       	call   143ce <print_disk_info>
   147f0:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < DISK_PER_CHANNEL; i++) {
   147f3:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   147f7:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   147fb:	0f 8e 66 ff ff ff    	jle    14767 <disk_init+0x5b>
        }
    }
}
   14801:	90                   	nop
   14802:	c9                   	leave  
   14803:	c3                   	ret    

00014804 <disk_open>:



int disk_open (device_t * dev) {
   14804:	55                   	push   %ebp
   14805:	89 e5                	mov    %esp,%ebp
   14807:	83 ec 18             	sub    $0x18,%esp
    int disk_idx = (dev->minor >> 4) - 0xa;
   1480a:	8b 45 08             	mov    0x8(%ebp),%eax
   1480d:	8b 40 08             	mov    0x8(%eax),%eax
   14810:	c1 f8 04             	sar    $0x4,%eax
   14813:	83 e8 0a             	sub    $0xa,%eax
   14816:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int part_idx = dev->minor & 0xF;
   14819:	8b 45 08             	mov    0x8(%ebp),%eax
   1481c:	8b 40 08             	mov    0x8(%eax),%eax
   1481f:	83 e0 0f             	and    $0xf,%eax
   14822:	89 45 f0             	mov    %eax,-0x10(%ebp)

    if ((disk_idx >= DISK_CNT) || (part_idx >= DISK_PRIMARY_PART_CNT)) {
   14825:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   14829:	7f 06                	jg     14831 <disk_open+0x2d>
   1482b:	83 7d f0 04          	cmpl   $0x4,-0x10(%ebp)
   1482f:	7e 21                	jle    14852 <disk_open+0x4e>
        log_printf("device minor error: %d", dev->minor);
   14831:	8b 45 08             	mov    0x8(%ebp),%eax
   14834:	8b 40 08             	mov    0x8(%eax),%eax
   14837:	83 ec 08             	sub    $0x8,%esp
   1483a:	50                   	push   %eax
   1483b:	68 d2 96 01 00       	push   $0x196d2
   14840:	e8 e1 41 00 00       	call   18a26 <log_printf>
   14845:	83 c4 10             	add    $0x10,%esp
        return -1;
   14848:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1484d:	e9 a5 00 00 00       	jmp    148f7 <disk_open+0xf3>
    }

    disk_t * disk = disk_buf + disk_idx;
   14852:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14855:	69 c0 28 01 00 00    	imul   $0x128,%eax,%eax
   1485b:	05 40 63 03 00       	add    $0x36340,%eax
   14860:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk->sector_size == 0) {
   14863:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14866:	8b 40 28             	mov    0x28(%eax),%eax
   14869:	85 c0                	test   %eax,%eax
   1486b:	75 1e                	jne    1488b <disk_open+0x87>
        log_printf("disk not exist. device:sd%x", dev->minor);
   1486d:	8b 45 08             	mov    0x8(%ebp),%eax
   14870:	8b 40 08             	mov    0x8(%eax),%eax
   14873:	83 ec 08             	sub    $0x8,%esp
   14876:	50                   	push   %eax
   14877:	68 e9 96 01 00       	push   $0x196e9
   1487c:	e8 a5 41 00 00       	call   18a26 <log_printf>
   14881:	83 c4 10             	add    $0x10,%esp
        return -1;
   14884:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14889:	eb 6c                	jmp    148f7 <disk_open+0xf3>
    }

    partinfo_t * part_info = disk->partinfo + part_idx;
   1488b:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1488e:	8d 48 30             	lea    0x30(%eax),%ecx
   14891:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14894:	89 d0                	mov    %edx,%eax
   14896:	01 c0                	add    %eax,%eax
   14898:	01 d0                	add    %edx,%eax
   1489a:	c1 e0 04             	shl    $0x4,%eax
   1489d:	01 c8                	add    %ecx,%eax
   1489f:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (part_info->total_sector == 0) {
   148a2:	8b 45 e8             	mov    -0x18(%ebp),%eax
   148a5:	8b 40 2c             	mov    0x2c(%eax),%eax
   148a8:	85 c0                	test   %eax,%eax
   148aa:	75 1e                	jne    148ca <disk_open+0xc6>
        log_printf("part not exist. device:sd%x", dev->minor);
   148ac:	8b 45 08             	mov    0x8(%ebp),%eax
   148af:	8b 40 08             	mov    0x8(%eax),%eax
   148b2:	83 ec 08             	sub    $0x8,%esp
   148b5:	50                   	push   %eax
   148b6:	68 05 97 01 00       	push   $0x19705
   148bb:	e8 66 41 00 00       	call   18a26 <log_printf>
   148c0:	83 c4 10             	add    $0x10,%esp
        return -1;
   148c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   148c8:	eb 2d                	jmp    148f7 <disk_open+0xf3>
    }

    dev->data = part_info;
   148ca:	8b 45 08             	mov    0x8(%ebp),%eax
   148cd:	8b 55 e8             	mov    -0x18(%ebp),%edx
   148d0:	89 50 0c             	mov    %edx,0xc(%eax)
    irq_install(IRQ14_HARDDISK_PRIMARY, exception_handler_ide_primary);
   148d3:	83 ec 08             	sub    $0x8,%esp
   148d6:	68 c4 02 01 00       	push   $0x102c4
   148db:	6a 2e                	push   $0x2e
   148dd:	e8 ca e6 ff ff       	call   12fac <irq_install>
   148e2:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ14_HARDDISK_PRIMARY);
   148e5:	83 ec 0c             	sub    $0xc,%esp
   148e8:	6a 2e                	push   $0x2e
   148ea:	e8 f7 e6 ff ff       	call   12fe6 <irq_enable>
   148ef:	83 c4 10             	add    $0x10,%esp
    return 0;
   148f2:	b8 00 00 00 00       	mov    $0x0,%eax
}
   148f7:	c9                   	leave  
   148f8:	c3                   	ret    

000148f9 <disk_read>:


int disk_read (device_t * dev, int start_sector, char * buf, int count) {
   148f9:	55                   	push   %ebp
   148fa:	89 e5                	mov    %esp,%ebp
   148fc:	83 ec 18             	sub    $0x18,%esp
    partinfo_t * part_info = (partinfo_t *)dev->data;
   148ff:	8b 45 08             	mov    0x8(%ebp),%eax
   14902:	8b 40 0c             	mov    0xc(%eax),%eax
   14905:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   14908:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1490c:	75 21                	jne    1492f <disk_read+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   1490e:	8b 45 08             	mov    0x8(%ebp),%eax
   14911:	8b 40 08             	mov    0x8(%eax),%eax
   14914:	83 ec 08             	sub    $0x8,%esp
   14917:	50                   	push   %eax
   14918:	68 24 97 01 00       	push   $0x19724
   1491d:	e8 04 41 00 00       	call   18a26 <log_printf>
   14922:	83 c4 10             	add    $0x10,%esp
        return -1;
   14925:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1492a:	e9 08 01 00 00       	jmp    14a37 <disk_read+0x13e>
    }

    disk_t * disk = part_info->disk;
   1492f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14932:	8b 40 20             	mov    0x20(%eax),%eax
   14935:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   14938:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1493c:	75 21                	jne    1495f <disk_read+0x66>
        log_printf("No disk for device %d", dev->minor);
   1493e:	8b 45 08             	mov    0x8(%ebp),%eax
   14941:	8b 40 08             	mov    0x8(%eax),%eax
   14944:	83 ec 08             	sub    $0x8,%esp
   14947:	50                   	push   %eax
   14948:	68 46 97 01 00       	push   $0x19746
   1494d:	e8 d4 40 00 00       	call   18a26 <log_printf>
   14952:	83 c4 10             	add    $0x10,%esp
        return -1;
   14955:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1495a:	e9 d8 00 00 00       	jmp    14a37 <disk_read+0x13e>
    }

    mutex_lock(disk->mutex);
   1495f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14962:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14968:	83 ec 0c             	sub    $0xc,%esp
   1496b:	50                   	push   %eax
   1496c:	e8 ee 33 00 00       	call   17d5f <mutex_lock>
   14971:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14974:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   1497b:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_READ);
   1497e:	8b 45 14             	mov    0x14(%ebp),%eax
   14981:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14984:	8b 4a 28             	mov    0x28(%edx),%ecx
   14987:	8b 55 0c             	mov    0xc(%ebp),%edx
   1498a:	01 ca                	add    %ecx,%edx
   1498c:	6a 24                	push   $0x24
   1498e:	50                   	push   %eax
   1498f:	52                   	push   %edx
   14990:	ff 75 ec             	pushl  -0x14(%ebp)
   14993:	e8 1b f8 ff ff       	call   141b3 <ata_send_cmd>
   14998:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   1499b:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   149a2:	eb 73                	jmp    14a17 <disk_read+0x11e>
        if (task_current()) {
   149a4:	e8 60 cd ff ff       	call   11709 <task_current>
   149a9:	85 c0                	test   %eax,%eax
   149ab:	74 15                	je     149c2 <disk_read+0xc9>
            sem_wait(disk->op_sem);
   149ad:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149b0:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   149b6:	83 ec 0c             	sub    $0xc,%esp
   149b9:	50                   	push   %eax
   149ba:	e8 24 35 00 00       	call   17ee3 <sem_wait>
   149bf:	83 c4 10             	add    $0x10,%esp
        }

        int err = ata_wait_data(disk);
   149c2:	83 ec 0c             	sub    $0xc,%esp
   149c5:	ff 75 ec             	pushl  -0x14(%ebp)
   149c8:	e8 b6 f9 ff ff       	call   14383 <ata_wait_data>
   149cd:	83 c4 10             	add    $0x10,%esp
   149d0:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   149d3:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   149d7:	79 19                	jns    149f2 <disk_read+0xf9>
            log_printf("disk(%s) read error: start sect %d, count %d", disk->name, start_sector, count);
   149d9:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149dc:	ff 75 14             	pushl  0x14(%ebp)
   149df:	ff 75 0c             	pushl  0xc(%ebp)
   149e2:	50                   	push   %eax
   149e3:	68 5c 97 01 00       	push   $0x1975c
   149e8:	e8 39 40 00 00       	call   18a26 <log_printf>
   149ed:	83 c4 10             	add    $0x10,%esp
            break;
   149f0:	eb 2d                	jmp    14a1f <disk_read+0x126>
        }

        ata_read_data(disk, buf, disk->sector_size);
   149f2:	8b 45 ec             	mov    -0x14(%ebp),%eax
   149f5:	8b 40 28             	mov    0x28(%eax),%eax
   149f8:	83 ec 04             	sub    $0x4,%esp
   149fb:	50                   	push   %eax
   149fc:	ff 75 10             	pushl  0x10(%ebp)
   149ff:	ff 75 ec             	pushl  -0x14(%ebp)
   14a02:	e8 dc f8 ff ff       	call   142e3 <ata_read_data>
   14a07:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14a0a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14a0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a11:	8b 40 28             	mov    0x28(%eax),%eax
   14a14:	01 45 10             	add    %eax,0x10(%ebp)
   14a17:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14a1a:	3b 45 14             	cmp    0x14(%ebp),%eax
   14a1d:	7c 85                	jl     149a4 <disk_read+0xab>
    }

    mutex_unlock(disk->mutex);
   14a1f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14a22:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14a28:	83 ec 0c             	sub    $0xc,%esp
   14a2b:	50                   	push   %eax
   14a2c:	e8 c5 33 00 00       	call   17df6 <mutex_unlock>
   14a31:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14a34:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14a37:	c9                   	leave  
   14a38:	c3                   	ret    

00014a39 <disk_write>:


int disk_write (device_t * dev, int start_sector, char * buf, int count) {
   14a39:	55                   	push   %ebp
   14a3a:	89 e5                	mov    %esp,%ebp
   14a3c:	83 ec 18             	sub    $0x18,%esp
    partinfo_t * part_info = (partinfo_t *)dev->data;
   14a3f:	8b 45 08             	mov    0x8(%ebp),%eax
   14a42:	8b 40 0c             	mov    0xc(%eax),%eax
   14a45:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!part_info) {
   14a48:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14a4c:	75 21                	jne    14a6f <disk_write+0x36>
        log_printf("Get part info failed! device = %d", dev->minor);
   14a4e:	8b 45 08             	mov    0x8(%ebp),%eax
   14a51:	8b 40 08             	mov    0x8(%eax),%eax
   14a54:	83 ec 08             	sub    $0x8,%esp
   14a57:	50                   	push   %eax
   14a58:	68 24 97 01 00       	push   $0x19724
   14a5d:	e8 c4 3f 00 00       	call   18a26 <log_printf>
   14a62:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a65:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a6a:	e9 08 01 00 00       	jmp    14b77 <disk_write+0x13e>
    }

    disk_t * disk = part_info->disk;
   14a6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14a72:	8b 40 20             	mov    0x20(%eax),%eax
   14a75:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (disk == (disk_t *)0) {
   14a78:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   14a7c:	75 21                	jne    14a9f <disk_write+0x66>
        log_printf("No disk for device %d", dev->minor);
   14a7e:	8b 45 08             	mov    0x8(%ebp),%eax
   14a81:	8b 40 08             	mov    0x8(%eax),%eax
   14a84:	83 ec 08             	sub    $0x8,%esp
   14a87:	50                   	push   %eax
   14a88:	68 46 97 01 00       	push   $0x19746
   14a8d:	e8 94 3f 00 00       	call   18a26 <log_printf>
   14a92:	83 c4 10             	add    $0x10,%esp
        return -1;
   14a95:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   14a9a:	e9 d8 00 00 00       	jmp    14b77 <disk_write+0x13e>
    }

    mutex_lock(disk->mutex);
   14a9f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14aa2:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14aa8:	83 ec 0c             	sub    $0xc,%esp
   14aab:	50                   	push   %eax
   14aac:	e8 ae 32 00 00       	call   17d5f <mutex_lock>
   14ab1:	83 c4 10             	add    $0x10,%esp
    task_on_op = 1;
   14ab4:	c7 05 b4 65 03 00 01 	movl   $0x1,0x365b4
   14abb:	00 00 00 

    int cnt;
    ata_send_cmd(disk, part_info->start_sector + start_sector, count, DISK_CMD_WRITE);
   14abe:	8b 45 14             	mov    0x14(%ebp),%eax
   14ac1:	8b 55 f0             	mov    -0x10(%ebp),%edx
   14ac4:	8b 4a 28             	mov    0x28(%edx),%ecx
   14ac7:	8b 55 0c             	mov    0xc(%ebp),%edx
   14aca:	01 ca                	add    %ecx,%edx
   14acc:	6a 34                	push   $0x34
   14ace:	50                   	push   %eax
   14acf:	52                   	push   %edx
   14ad0:	ff 75 ec             	pushl  -0x14(%ebp)
   14ad3:	e8 db f6 ff ff       	call   141b3 <ata_send_cmd>
   14ad8:	83 c4 10             	add    $0x10,%esp
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14adb:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   14ae2:	eb 73                	jmp    14b57 <disk_write+0x11e>
        ata_write_data(disk, buf, disk->sector_size);
   14ae4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14ae7:	8b 40 28             	mov    0x28(%eax),%eax
   14aea:	83 ec 04             	sub    $0x4,%esp
   14aed:	50                   	push   %eax
   14aee:	ff 75 10             	pushl  0x10(%ebp)
   14af1:	ff 75 ec             	pushl  -0x14(%ebp)
   14af4:	e8 3a f8 ff ff       	call   14333 <ata_write_data>
   14af9:	83 c4 10             	add    $0x10,%esp

        if (task_current()) {
   14afc:	e8 08 cc ff ff       	call   11709 <task_current>
   14b01:	85 c0                	test   %eax,%eax
   14b03:	74 15                	je     14b1a <disk_write+0xe1>
            sem_wait(disk->op_sem);
   14b05:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b08:	8b 80 24 01 00 00    	mov    0x124(%eax),%eax
   14b0e:	83 ec 0c             	sub    $0xc,%esp
   14b11:	50                   	push   %eax
   14b12:	e8 cc 33 00 00       	call   17ee3 <sem_wait>
   14b17:	83 c4 10             	add    $0x10,%esp
        }

        int err = ata_wait_data(disk);
   14b1a:	83 ec 0c             	sub    $0xc,%esp
   14b1d:	ff 75 ec             	pushl  -0x14(%ebp)
   14b20:	e8 5e f8 ff ff       	call   14383 <ata_wait_data>
   14b25:	83 c4 10             	add    $0x10,%esp
   14b28:	89 45 e8             	mov    %eax,-0x18(%ebp)
        if (err < 0) {
   14b2b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   14b2f:	79 19                	jns    14b4a <disk_write+0x111>
            log_printf("disk(%s) write error: start sect %d, count %d", disk->name, start_sector, count);
   14b31:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b34:	ff 75 14             	pushl  0x14(%ebp)
   14b37:	ff 75 0c             	pushl  0xc(%ebp)
   14b3a:	50                   	push   %eax
   14b3b:	68 8c 97 01 00       	push   $0x1978c
   14b40:	e8 e1 3e 00 00       	call   18a26 <log_printf>
   14b45:	83 c4 10             	add    $0x10,%esp
            break;
   14b48:	eb 15                	jmp    14b5f <disk_write+0x126>
    for (cnt = 0; cnt < count; cnt++, buf += disk->sector_size) {
   14b4a:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   14b4e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b51:	8b 40 28             	mov    0x28(%eax),%eax
   14b54:	01 45 10             	add    %eax,0x10(%ebp)
   14b57:	8b 45 f4             	mov    -0xc(%ebp),%eax
   14b5a:	3b 45 14             	cmp    0x14(%ebp),%eax
   14b5d:	7c 85                	jl     14ae4 <disk_write+0xab>
        }
    }

    mutex_unlock(disk->mutex);
   14b5f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   14b62:	8b 80 20 01 00 00    	mov    0x120(%eax),%eax
   14b68:	83 ec 0c             	sub    $0xc,%esp
   14b6b:	50                   	push   %eax
   14b6c:	e8 85 32 00 00       	call   17df6 <mutex_unlock>
   14b71:	83 c4 10             	add    $0x10,%esp
    return cnt;
   14b74:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   14b77:	c9                   	leave  
   14b78:	c3                   	ret    

00014b79 <disk_control>:


int disk_control (device_t * dev, int cmd, int arg0, int arg1) {
   14b79:	55                   	push   %ebp
   14b7a:	89 e5                	mov    %esp,%ebp
    return 0;
   14b7c:	b8 00 00 00 00       	mov    $0x0,%eax
}
   14b81:	5d                   	pop    %ebp
   14b82:	c3                   	ret    

00014b83 <disk_close>:


void disk_close (device_t * dev) {
   14b83:	55                   	push   %ebp
   14b84:	89 e5                	mov    %esp,%ebp
}
   14b86:	90                   	nop
   14b87:	5d                   	pop    %ebp
   14b88:	c3                   	ret    

00014b89 <do_handler_ide_primary>:


void do_handler_ide_primary (exception_frame_t *frame)  {
   14b89:	55                   	push   %ebp
   14b8a:	89 e5                	mov    %esp,%ebp
   14b8c:	83 ec 08             	sub    $0x8,%esp
    pic_send_eoi(IRQ14_HARDDISK_PRIMARY);
   14b8f:	83 ec 0c             	sub    $0xc,%esp
   14b92:	6a 2e                	push   $0x2e
   14b94:	e8 3a e2 ff ff       	call   12dd3 <pic_send_eoi>
   14b99:	83 c4 10             	add    $0x10,%esp
    if (task_on_op && task_current()) {
   14b9c:	a1 b4 65 03 00       	mov    0x365b4,%eax
   14ba1:	85 c0                	test   %eax,%eax
   14ba3:	74 19                	je     14bbe <do_handler_ide_primary+0x35>
   14ba5:	e8 5f cb ff ff       	call   11709 <task_current>
   14baa:	85 c0                	test   %eax,%eax
   14bac:	74 10                	je     14bbe <do_handler_ide_primary+0x35>
        sem_notify(&op_sem);
   14bae:	83 ec 0c             	sub    $0xc,%esp
   14bb1:	68 a4 65 03 00       	push   $0x365a4
   14bb6:	e8 96 33 00 00       	call   17f51 <sem_notify>
   14bbb:	83 c4 10             	add    $0x10,%esp
    }
}
   14bbe:	90                   	nop
   14bbf:	c9                   	leave  
   14bc0:	c3                   	ret    

00014bc1 <inb>:
static inline uint8_t inb(uint16_t  port) {
   14bc1:	55                   	push   %ebp
   14bc2:	89 e5                	mov    %esp,%ebp
   14bc4:	83 ec 14             	sub    $0x14,%esp
   14bc7:	8b 45 08             	mov    0x8(%ebp),%eax
   14bca:	66 89 45 ec          	mov    %ax,-0x14(%ebp)
	__asm__ __volatile__("inb %[p], %[v]" : [v]"=a" (rv) : [p]"d"(port));
   14bce:	0f b7 45 ec          	movzwl -0x14(%ebp),%eax
   14bd2:	89 c2                	mov    %eax,%edx
   14bd4:	ec                   	in     (%dx),%al
   14bd5:	88 45 ff             	mov    %al,-0x1(%ebp)
	return rv;
   14bd8:	0f b6 45 ff          	movzbl -0x1(%ebp),%eax
}
   14bdc:	c9                   	leave  
   14bdd:	c3                   	ret    

00014bde <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   14bde:	55                   	push   %ebp
   14bdf:	89 e5                	mov    %esp,%ebp
   14be1:	83 ec 08             	sub    $0x8,%esp
   14be4:	8b 55 08             	mov    0x8(%ebp),%edx
   14be7:	8b 45 0c             	mov    0xc(%ebp),%eax
   14bea:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   14bee:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   14bf1:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   14bf5:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   14bf9:	ee                   	out    %al,(%dx)
}
   14bfa:	90                   	nop
   14bfb:	c9                   	leave  
   14bfc:	c3                   	ret    

00014bfd <get_key>:
        [0x34] = {'.', '>'},
        [0x35] = {'/', '?'},
        [0x39] = {' ', ' '},
};

static inline char get_key(uint8_t key_code) {
   14bfd:	55                   	push   %ebp
   14bfe:	89 e5                	mov    %esp,%ebp
   14c00:	83 ec 04             	sub    $0x4,%esp
   14c03:	8b 45 08             	mov    0x8(%ebp),%eax
   14c06:	88 45 fc             	mov    %al,-0x4(%ebp)
    return key_code & 0x7F;
   14c09:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c0d:	83 e0 7f             	and    $0x7f,%eax
}
   14c10:	c9                   	leave  
   14c11:	c3                   	ret    

00014c12 <is_make_code>:

static inline int is_make_code(uint8_t key_code) {
   14c12:	55                   	push   %ebp
   14c13:	89 e5                	mov    %esp,%ebp
   14c15:	83 ec 04             	sub    $0x4,%esp
   14c18:	8b 45 08             	mov    0x8(%ebp),%eax
   14c1b:	88 45 fc             	mov    %al,-0x4(%ebp)
    return !(key_code & 0x80);
   14c1e:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c22:	f7 d0                	not    %eax
   14c24:	c0 e8 07             	shr    $0x7,%al
   14c27:	0f b6 c0             	movzbl %al,%eax
}
   14c2a:	c9                   	leave  
   14c2b:	c3                   	ret    

00014c2c <kbd_wait_send_ready>:

void kbd_wait_send_ready(void) {
   14c2c:	55                   	push   %ebp
   14c2d:	89 e5                	mov    %esp,%ebp
   14c2f:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000; 
   14c32:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14c39:	eb 14                	jmp    14c4f <kbd_wait_send_ready+0x23>
        if ((inb(KBD_PORT_STAT) & KBD_STAT_SEND_FULL) == 0) {
   14c3b:	6a 64                	push   $0x64
   14c3d:	e8 7f ff ff ff       	call   14bc1 <inb>
   14c42:	83 c4 04             	add    $0x4,%esp
   14c45:	0f b6 c0             	movzbl %al,%eax
   14c48:	83 e0 02             	and    $0x2,%eax
   14c4b:	85 c0                	test   %eax,%eax
   14c4d:	74 0f                	je     14c5e <kbd_wait_send_ready+0x32>
    while (time_out--) {
   14c4f:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14c52:	8d 50 ff             	lea    -0x1(%eax),%edx
   14c55:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14c58:	85 c0                	test   %eax,%eax
   14c5a:	75 df                	jne    14c3b <kbd_wait_send_ready+0xf>
   14c5c:	eb 01                	jmp    14c5f <kbd_wait_send_ready+0x33>
            return;
   14c5e:	90                   	nop
        }
    }
}
   14c5f:	c9                   	leave  
   14c60:	c3                   	ret    

00014c61 <kbd_write>:


void kbd_write(uint8_t port, uint8_t data) {
   14c61:	55                   	push   %ebp
   14c62:	89 e5                	mov    %esp,%ebp
   14c64:	83 ec 08             	sub    $0x8,%esp
   14c67:	8b 55 08             	mov    0x8(%ebp),%edx
   14c6a:	8b 45 0c             	mov    0xc(%ebp),%eax
   14c6d:	88 55 fc             	mov    %dl,-0x4(%ebp)
   14c70:	88 45 f8             	mov    %al,-0x8(%ebp)
    kbd_wait_send_ready();
   14c73:	e8 b4 ff ff ff       	call   14c2c <kbd_wait_send_ready>
    outb(port, data);
   14c78:	0f b6 55 f8          	movzbl -0x8(%ebp),%edx
   14c7c:	0f b6 45 fc          	movzbl -0x4(%ebp),%eax
   14c80:	52                   	push   %edx
   14c81:	50                   	push   %eax
   14c82:	e8 57 ff ff ff       	call   14bde <outb>
   14c87:	83 c4 08             	add    $0x8,%esp
}
   14c8a:	90                   	nop
   14c8b:	c9                   	leave  
   14c8c:	c3                   	ret    

00014c8d <kbd_wait_recv_ready>:


void kbd_wait_recv_ready(void) {
   14c8d:	55                   	push   %ebp
   14c8e:	89 e5                	mov    %esp,%ebp
   14c90:	83 ec 10             	sub    $0x10,%esp
    uint32_t time_out = 100000;
   14c93:	c7 45 fc a0 86 01 00 	movl   $0x186a0,-0x4(%ebp)
    while (time_out--) {
   14c9a:	eb 14                	jmp    14cb0 <kbd_wait_recv_ready+0x23>
        if (inb(KBD_PORT_STAT) & KBD_STAT_RECV_READY) {
   14c9c:	6a 64                	push   $0x64
   14c9e:	e8 1e ff ff ff       	call   14bc1 <inb>
   14ca3:	83 c4 04             	add    $0x4,%esp
   14ca6:	0f b6 c0             	movzbl %al,%eax
   14ca9:	83 e0 01             	and    $0x1,%eax
   14cac:	85 c0                	test   %eax,%eax
   14cae:	75 0f                	jne    14cbf <kbd_wait_recv_ready+0x32>
    while (time_out--) {
   14cb0:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14cb3:	8d 50 ff             	lea    -0x1(%eax),%edx
   14cb6:	89 55 fc             	mov    %edx,-0x4(%ebp)
   14cb9:	85 c0                	test   %eax,%eax
   14cbb:	75 df                	jne    14c9c <kbd_wait_recv_ready+0xf>
   14cbd:	eb 01                	jmp    14cc0 <kbd_wait_recv_ready+0x33>
            return;
   14cbf:	90                   	nop
        }
    }
}
   14cc0:	c9                   	leave  
   14cc1:	c3                   	ret    

00014cc2 <kbd_read>:

uint8_t kbd_read(void) {
   14cc2:	55                   	push   %ebp
   14cc3:	89 e5                	mov    %esp,%ebp
    kbd_wait_recv_ready();
   14cc5:	e8 c3 ff ff ff       	call   14c8d <kbd_wait_recv_ready>
    return inb(KBD_PORT_DATA);
   14cca:	6a 60                	push   $0x60
   14ccc:	e8 f0 fe ff ff       	call   14bc1 <inb>
   14cd1:	83 c4 04             	add    $0x4,%esp
}
   14cd4:	c9                   	leave  
   14cd5:	c3                   	ret    

00014cd6 <update_led_status>:


static void update_led_status (void) {
   14cd6:	55                   	push   %ebp
   14cd7:	89 e5                	mov    %esp,%ebp
   14cd9:	83 ec 10             	sub    $0x10,%esp
    int data = 0;
   14cdc:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    data = (kbd_state.caps_lock ? 1 : 0) << 0;
   14ce3:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14cea:	0f b6 c0             	movzbl %al,%eax
   14ced:	83 e0 01             	and    $0x1,%eax
   14cf0:	89 45 fc             	mov    %eax,-0x4(%ebp)
    kbd_write(KBD_PORT_DATA, KBD_CMD_RW_LED);
   14cf3:	68 ed 00 00 00       	push   $0xed
   14cf8:	6a 60                	push   $0x60
   14cfa:	e8 62 ff ff ff       	call   14c61 <kbd_write>
   14cff:	83 c4 08             	add    $0x8,%esp
    kbd_write(KBD_PORT_DATA, data);
   14d02:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14d05:	0f b6 c0             	movzbl %al,%eax
   14d08:	50                   	push   %eax
   14d09:	6a 60                	push   $0x60
   14d0b:	e8 51 ff ff ff       	call   14c61 <kbd_write>
   14d10:	83 c4 08             	add    $0x8,%esp
    kbd_read();
   14d13:	e8 aa ff ff ff       	call   14cc2 <kbd_read>
}
   14d18:	90                   	nop
   14d19:	c9                   	leave  
   14d1a:	c3                   	ret    

00014d1b <do_fx_key>:

static void do_fx_key (int key) {
   14d1b:	55                   	push   %ebp
   14d1c:	89 e5                	mov    %esp,%ebp
   14d1e:	83 ec 18             	sub    $0x18,%esp
    int index = key - KEY_F1;
   14d21:	8b 45 08             	mov    0x8(%ebp),%eax
   14d24:	83 e8 3b             	sub    $0x3b,%eax
   14d27:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (kbd_state.lctrl_press || kbd_state.rctrl_press) {
   14d2a:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d31:	83 e0 20             	and    $0x20,%eax
   14d34:	84 c0                	test   %al,%al
   14d36:	75 0e                	jne    14d46 <do_fx_key+0x2b>
   14d38:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14d3f:	83 e0 40             	and    $0x40,%eax
   14d42:	84 c0                	test   %al,%al
   14d44:	74 0e                	je     14d54 <do_fx_key+0x39>
        tty_select(index);
   14d46:	83 ec 0c             	sub    $0xc,%esp
   14d49:	ff 75 f4             	pushl  -0xc(%ebp)
   14d4c:	e8 e4 09 00 00       	call   15735 <tty_select>
   14d51:	83 c4 10             	add    $0x10,%esp
    }
}
   14d54:	90                   	nop
   14d55:	c9                   	leave  
   14d56:	c3                   	ret    

00014d57 <do_normal_key>:


static void do_normal_key (uint8_t raw_code) {
   14d57:	55                   	push   %ebp
   14d58:	89 e5                	mov    %esp,%ebp
   14d5a:	83 ec 28             	sub    $0x28,%esp
   14d5d:	8b 45 08             	mov    0x8(%ebp),%eax
   14d60:	88 45 e4             	mov    %al,-0x1c(%ebp)
    char key = get_key(raw_code);		
   14d63:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14d67:	50                   	push   %eax
   14d68:	e8 90 fe ff ff       	call   14bfd <get_key>
   14d6d:	83 c4 04             	add    $0x4,%esp
   14d70:	88 45 f7             	mov    %al,-0x9(%ebp)
    int is_make = is_make_code(raw_code);
   14d73:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   14d77:	50                   	push   %eax
   14d78:	e8 95 fe ff ff       	call   14c12 <is_make_code>
   14d7d:	83 c4 04             	add    $0x4,%esp
   14d80:	89 45 f0             	mov    %eax,-0x10(%ebp)

	switch (key) {
   14d83:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14d87:	83 e8 1d             	sub    $0x1d,%eax
   14d8a:	83 f8 25             	cmp    $0x25,%eax
   14d8d:	0f 87 f9 00 00 00    	ja     14e8c <do_normal_key+0x135>
   14d93:	8b 04 85 c0 99 01 00 	mov    0x199c0(,%eax,4),%eax
   14d9a:	ff e0                	jmp    *%eax
	case KEY_RSHIFT:
		kbd_state.rshift_press = is_make; 
   14d9c:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14d9f:	c1 e0 07             	shl    $0x7,%eax
   14da2:	c0 f8 07             	sar    $0x7,%al
   14da5:	83 e0 01             	and    $0x1,%eax
   14da8:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx
   14daf:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14db6:	83 e0 fb             	and    $0xfffffffb,%eax
   14db9:	09 d0                	or     %edx,%eax
   14dbb:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14dc0:	e9 5f 01 00 00       	jmp    14f24 <do_normal_key+0x1cd>
	case KEY_LSHIFT:
		kbd_state.lshift_press = is_make;  
   14dc5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14dc8:	c1 e0 07             	shl    $0x7,%eax
   14dcb:	c0 f8 07             	sar    $0x7,%al
   14dce:	83 e0 01             	and    $0x1,%eax
   14dd1:	8d 14 00             	lea    (%eax,%eax,1),%edx
   14dd4:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ddb:	83 e0 fd             	and    $0xfffffffd,%eax
   14dde:	09 d0                	or     %edx,%eax
   14de0:	a2 b8 65 03 00       	mov    %al,0x365b8
		break;
   14de5:	e9 3a 01 00 00       	jmp    14f24 <do_normal_key+0x1cd>
    case KEY_CAPS:  
		if (is_make) {
   14dea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14dee:	0f 84 2c 01 00 00    	je     14f20 <do_normal_key+0x1c9>
			kbd_state.caps_lock = ~kbd_state.caps_lock;
   14df4:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14dfb:	c1 e0 07             	shl    $0x7,%eax
   14dfe:	c0 f8 07             	sar    $0x7,%al
   14e01:	f7 d0                	not    %eax
   14e03:	c1 e0 07             	shl    $0x7,%eax
   14e06:	c0 f8 07             	sar    $0x7,%al
   14e09:	83 e0 01             	and    $0x1,%eax
   14e0c:	89 c2                	mov    %eax,%edx
   14e0e:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e15:	83 e0 fe             	and    $0xfffffffe,%eax
   14e18:	09 d0                	or     %edx,%eax
   14e1a:	a2 b8 65 03 00       	mov    %al,0x365b8
			update_led_status();
   14e1f:	e8 b2 fe ff ff       	call   14cd6 <update_led_status>
		}
		break;
   14e24:	e9 f7 00 00 00       	jmp    14f20 <do_normal_key+0x1c9>
    case KEY_ALT:
        kbd_state.lalt_press = is_make;  
   14e29:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e2c:	c1 e0 07             	shl    $0x7,%eax
   14e2f:	c0 f8 07             	sar    $0x7,%al
   14e32:	83 e0 01             	and    $0x1,%eax
   14e35:	c1 e0 04             	shl    $0x4,%eax
   14e38:	89 c2                	mov    %eax,%edx
   14e3a:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e41:	83 e0 ef             	and    $0xffffffef,%eax
   14e44:	09 d0                	or     %edx,%eax
   14e46:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14e4b:	e9 d4 00 00 00       	jmp    14f24 <do_normal_key+0x1cd>
    case KEY_CTRL:
        kbd_state.lctrl_press = is_make; 
   14e50:	8b 45 f0             	mov    -0x10(%ebp),%eax
   14e53:	c1 e0 07             	shl    $0x7,%eax
   14e56:	c0 f8 07             	sar    $0x7,%al
   14e59:	83 e0 01             	and    $0x1,%eax
   14e5c:	c1 e0 05             	shl    $0x5,%eax
   14e5f:	89 c2                	mov    %eax,%edx
   14e61:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e68:	83 e0 df             	and    $0xffffffdf,%eax
   14e6b:	09 d0                	or     %edx,%eax
   14e6d:	a2 b8 65 03 00       	mov    %al,0x365b8
        break;
   14e72:	e9 ad 00 00 00       	jmp    14f24 <do_normal_key+0x1cd>
    case KEY_F4:
    case KEY_F5:
    case KEY_F6:
    case KEY_F7:
    case KEY_F8:
         do_fx_key(key);
   14e77:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14e7b:	83 ec 0c             	sub    $0xc,%esp
   14e7e:	50                   	push   %eax
   14e7f:	e8 97 fe ff ff       	call   14d1b <do_fx_key>
   14e84:	83 c4 10             	add    $0x10,%esp
        break;
   14e87:	e9 98 00 00 00       	jmp    14f24 <do_normal_key+0x1cd>
    case KEY_F10:
    case KEY_F11:
    case KEY_F12:
    case KEY_SCROLL_LOCK:
    default:
        if (is_make) {
   14e8c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   14e90:	0f 84 8d 00 00 00    	je     14f23 <do_normal_key+0x1cc>
            if (kbd_state.rshift_press || kbd_state.lshift_press) {
   14e96:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14e9d:	83 e0 04             	and    $0x4,%eax
   14ea0:	84 c0                	test   %al,%al
   14ea2:	75 0e                	jne    14eb2 <do_normal_key+0x15b>
   14ea4:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14eab:	83 e0 02             	and    $0x2,%eax
   14eae:	84 c0                	test   %al,%al
   14eb0:	74 11                	je     14ec3 <do_normal_key+0x16c>
                key = map_table[key].func;  
   14eb2:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14eb6:	0f b6 84 00 c1 97 01 	movzbl 0x197c1(%eax,%eax,1),%eax
   14ebd:	00 
   14ebe:	88 45 f7             	mov    %al,-0x9(%ebp)
   14ec1:	eb 0f                	jmp    14ed2 <do_normal_key+0x17b>
            }else {
                key = map_table[key].normal;  
   14ec3:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14ec7:	0f b6 84 00 c0 97 01 	movzbl 0x197c0(%eax,%eax,1),%eax
   14ece:	00 
   14ecf:	88 45 f7             	mov    %al,-0x9(%ebp)
            }

            if (kbd_state.caps_lock) {
   14ed2:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14ed9:	83 e0 01             	and    $0x1,%eax
   14edc:	84 c0                	test   %al,%al
   14ede:	74 2e                	je     14f0e <do_normal_key+0x1b7>
                if ((key >= 'A') && (key <= 'Z')) {
   14ee0:	80 7d f7 40          	cmpb   $0x40,-0x9(%ebp)
   14ee4:	7e 12                	jle    14ef8 <do_normal_key+0x1a1>
   14ee6:	80 7d f7 5a          	cmpb   $0x5a,-0x9(%ebp)
   14eea:	7f 0c                	jg     14ef8 <do_normal_key+0x1a1>
                    key = key - 'A' + 'a';
   14eec:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14ef0:	83 c0 20             	add    $0x20,%eax
   14ef3:	88 45 f7             	mov    %al,-0x9(%ebp)
   14ef6:	eb 16                	jmp    14f0e <do_normal_key+0x1b7>
                } else if ((key >= 'a') && (key <= 'z')) {
   14ef8:	80 7d f7 60          	cmpb   $0x60,-0x9(%ebp)
   14efc:	7e 10                	jle    14f0e <do_normal_key+0x1b7>
   14efe:	80 7d f7 7a          	cmpb   $0x7a,-0x9(%ebp)
   14f02:	7f 0a                	jg     14f0e <do_normal_key+0x1b7>
                    key = key - 'a' + 'A';
   14f04:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14f08:	83 e8 20             	sub    $0x20,%eax
   14f0b:	88 45 f7             	mov    %al,-0x9(%ebp)
                }
            }

            //log_printf("key=%c", key);
            tty_in(key);
   14f0e:	0f be 45 f7          	movsbl -0x9(%ebp),%eax
   14f12:	83 ec 0c             	sub    $0xc,%esp
   14f15:	50                   	push   %eax
   14f16:	e8 ad 07 00 00       	call   156c8 <tty_in>
   14f1b:	83 c4 10             	add    $0x10,%esp
        }
        break;
   14f1e:	eb 03                	jmp    14f23 <do_normal_key+0x1cc>
		break;
   14f20:	90                   	nop
   14f21:	eb 01                	jmp    14f24 <do_normal_key+0x1cd>
        break;
   14f23:	90                   	nop
    }
}
   14f24:	90                   	nop
   14f25:	c9                   	leave  
   14f26:	c3                   	ret    

00014f27 <do_e0_key>:


static void do_e0_key (uint8_t raw_code) {
   14f27:	55                   	push   %ebp
   14f28:	89 e5                	mov    %esp,%ebp
   14f2a:	83 ec 14             	sub    $0x14,%esp
   14f2d:	8b 45 08             	mov    0x8(%ebp),%eax
   14f30:	88 45 ec             	mov    %al,-0x14(%ebp)
    int key = get_key(raw_code);			
   14f33:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f37:	50                   	push   %eax
   14f38:	e8 c0 fc ff ff       	call   14bfd <get_key>
   14f3d:	83 c4 04             	add    $0x4,%esp
   14f40:	0f be c0             	movsbl %al,%eax
   14f43:	89 45 fc             	mov    %eax,-0x4(%ebp)
    int is_make = is_make_code(raw_code);	
   14f46:	0f b6 45 ec          	movzbl -0x14(%ebp),%eax
   14f4a:	50                   	push   %eax
   14f4b:	e8 c2 fc ff ff       	call   14c12 <is_make_code>
   14f50:	83 c4 04             	add    $0x4,%esp
   14f53:	89 45 f8             	mov    %eax,-0x8(%ebp)
    switch (key) {
   14f56:	8b 45 fc             	mov    -0x4(%ebp),%eax
   14f59:	83 f8 1d             	cmp    $0x1d,%eax
   14f5c:	74 07                	je     14f65 <do_e0_key+0x3e>
   14f5e:	83 f8 38             	cmp    $0x38,%eax
   14f61:	74 26                	je     14f89 <do_e0_key+0x62>
            break;
        case KEY_ALT:
            kbd_state.ralt_press = is_make;  
            break;
    }
}
   14f63:	eb 49                	jmp    14fae <do_e0_key+0x87>
            kbd_state.rctrl_press = is_make;  
   14f65:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14f68:	c1 e0 07             	shl    $0x7,%eax
   14f6b:	c0 f8 07             	sar    $0x7,%al
   14f6e:	83 e0 01             	and    $0x1,%eax
   14f71:	c1 e0 06             	shl    $0x6,%eax
   14f74:	89 c2                	mov    %eax,%edx
   14f76:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14f7d:	83 e0 bf             	and    $0xffffffbf,%eax
   14f80:	09 d0                	or     %edx,%eax
   14f82:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14f87:	eb 25                	jmp    14fae <do_e0_key+0x87>
            kbd_state.ralt_press = is_make;  
   14f89:	8b 45 f8             	mov    -0x8(%ebp),%eax
   14f8c:	c1 e0 07             	shl    $0x7,%eax
   14f8f:	c0 f8 07             	sar    $0x7,%al
   14f92:	83 e0 01             	and    $0x1,%eax
   14f95:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx
   14f9c:	0f b6 05 b8 65 03 00 	movzbl 0x365b8,%eax
   14fa3:	83 e0 f7             	and    $0xfffffff7,%eax
   14fa6:	09 d0                	or     %edx,%eax
   14fa8:	a2 b8 65 03 00       	mov    %al,0x365b8
            break;
   14fad:	90                   	nop
}
   14fae:	90                   	nop
   14faf:	c9                   	leave  
   14fb0:	c3                   	ret    

00014fb1 <do_handler_kbd>:


void do_handler_kbd(exception_frame_t *frame) {
   14fb1:	55                   	push   %ebp
   14fb2:	89 e5                	mov    %esp,%ebp
   14fb4:	83 ec 18             	sub    $0x18,%esp
    	NORMAL,				
		BEGIN_E0,			
		BEGIN_E1,			
    }recv_state = NORMAL;

	uint8_t status = inb(KBD_PORT_STAT);
   14fb7:	6a 64                	push   $0x64
   14fb9:	e8 03 fc ff ff       	call   14bc1 <inb>
   14fbe:	83 c4 04             	add    $0x4,%esp
   14fc1:	88 45 f7             	mov    %al,-0x9(%ebp)
	if (!(status & KBD_STAT_RECV_READY)) {
   14fc4:	0f b6 45 f7          	movzbl -0x9(%ebp),%eax
   14fc8:	83 e0 01             	and    $0x1,%eax
   14fcb:	85 c0                	test   %eax,%eax
   14fcd:	75 12                	jne    14fe1 <do_handler_kbd+0x30>
        pic_send_eoi(IRQ1_KEYBOARD);
   14fcf:	83 ec 0c             	sub    $0xc,%esp
   14fd2:	6a 21                	push   $0x21
   14fd4:	e8 fa dd ff ff       	call   12dd3 <pic_send_eoi>
   14fd9:	83 c4 10             	add    $0x10,%esp
		return;
   14fdc:	e9 90 00 00 00       	jmp    15071 <do_handler_kbd+0xc0>
	}

    uint8_t raw_code = inb(KBD_PORT_DATA);
   14fe1:	83 ec 0c             	sub    $0xc,%esp
   14fe4:	6a 60                	push   $0x60
   14fe6:	e8 d6 fb ff ff       	call   14bc1 <inb>
   14feb:	83 c4 10             	add    $0x10,%esp
   14fee:	88 45 f6             	mov    %al,-0xa(%ebp)

    pic_send_eoi(IRQ1_KEYBOARD);
   14ff1:	83 ec 0c             	sub    $0xc,%esp
   14ff4:	6a 21                	push   $0x21
   14ff6:	e8 d8 dd ff ff       	call   12dd3 <pic_send_eoi>
   14ffb:	83 c4 10             	add    $0x10,%esp

	if (raw_code == KEY_E0) {
   14ffe:	80 7d f6 e0          	cmpb   $0xe0,-0xa(%ebp)
   15002:	75 0c                	jne    15010 <do_handler_kbd+0x5f>
		recv_state = BEGIN_E0;
   15004:	c7 05 bc 65 03 00 01 	movl   $0x1,0x365bc
   1500b:	00 00 00 
   1500e:	eb 61                	jmp    15071 <do_handler_kbd+0xc0>
	} else if (raw_code == KEY_E1) {
   15010:	80 7d f6 e1          	cmpb   $0xe1,-0xa(%ebp)
   15014:	75 0c                	jne    15022 <do_handler_kbd+0x71>
		recv_state = BEGIN_E1;
   15016:	c7 05 bc 65 03 00 02 	movl   $0x2,0x365bc
   1501d:	00 00 00 
   15020:	eb 4f                	jmp    15071 <do_handler_kbd+0xc0>
	} else {
		switch (recv_state) {
   15022:	a1 bc 65 03 00       	mov    0x365bc,%eax
   15027:	83 f8 01             	cmp    $0x1,%eax
   1502a:	74 1e                	je     1504a <do_handler_kbd+0x99>
   1502c:	83 f8 01             	cmp    $0x1,%eax
   1502f:	72 07                	jb     15038 <do_handler_kbd+0x87>
   15031:	83 f8 02             	cmp    $0x2,%eax
   15034:	74 30                	je     15066 <do_handler_kbd+0xb5>
   15036:	eb 39                	jmp    15071 <do_handler_kbd+0xc0>
		case NORMAL:
			do_normal_key(raw_code);
   15038:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   1503c:	83 ec 0c             	sub    $0xc,%esp
   1503f:	50                   	push   %eax
   15040:	e8 12 fd ff ff       	call   14d57 <do_normal_key>
   15045:	83 c4 10             	add    $0x10,%esp
			break;
   15048:	eb 27                	jmp    15071 <do_handler_kbd+0xc0>
		case BEGIN_E0: 
			do_e0_key(raw_code);
   1504a:	0f b6 45 f6          	movzbl -0xa(%ebp),%eax
   1504e:	83 ec 0c             	sub    $0xc,%esp
   15051:	50                   	push   %eax
   15052:	e8 d0 fe ff ff       	call   14f27 <do_e0_key>
   15057:	83 c4 10             	add    $0x10,%esp
			recv_state = NORMAL;
   1505a:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   15061:	00 00 00 
			break;
   15064:	eb 0b                	jmp    15071 <do_handler_kbd+0xc0>
		case BEGIN_E1: 
			recv_state = NORMAL;
   15066:	c7 05 bc 65 03 00 00 	movl   $0x0,0x365bc
   1506d:	00 00 00 
			break;
   15070:	90                   	nop
		}
	}
}
   15071:	c9                   	leave  
   15072:	c3                   	ret    

00015073 <kbd_init>:

void kbd_init(void) {
   15073:	55                   	push   %ebp
   15074:	89 e5                	mov    %esp,%ebp
   15076:	83 ec 08             	sub    $0x8,%esp
    static int inited = 0;

    if (!inited) {
   15079:	a1 c0 65 03 00       	mov    0x365c0,%eax
   1507e:	85 c0                	test   %eax,%eax
   15080:	75 2e                	jne    150b0 <kbd_init+0x3d>
        update_led_status();
   15082:	e8 4f fc ff ff       	call   14cd6 <update_led_status>

        irq_install(IRQ1_KEYBOARD, (irq_handler_t)exception_handler_kbd);
   15087:	83 ec 08             	sub    $0x8,%esp
   1508a:	68 a5 02 01 00       	push   $0x102a5
   1508f:	6a 21                	push   $0x21
   15091:	e8 16 df ff ff       	call   12fac <irq_install>
   15096:	83 c4 10             	add    $0x10,%esp
        irq_enable(IRQ1_KEYBOARD);
   15099:	83 ec 0c             	sub    $0xc,%esp
   1509c:	6a 21                	push   $0x21
   1509e:	e8 43 df ff ff       	call   12fe6 <irq_enable>
   150a3:	83 c4 10             	add    $0x10,%esp

        inited = 1;
   150a6:	c7 05 c0 65 03 00 01 	movl   $0x1,0x365c0
   150ad:	00 00 00 
    }
}
   150b0:	90                   	nop
   150b1:	c9                   	leave  
   150b2:	c3                   	ret    

000150b3 <outb>:
static inline void outb(uint16_t port, uint8_t data) {
   150b3:	55                   	push   %ebp
   150b4:	89 e5                	mov    %esp,%ebp
   150b6:	83 ec 08             	sub    $0x8,%esp
   150b9:	8b 55 08             	mov    0x8(%ebp),%edx
   150bc:	8b 45 0c             	mov    0xc(%ebp),%eax
   150bf:	66 89 55 fc          	mov    %dx,-0x4(%ebp)
   150c3:	88 45 f8             	mov    %al,-0x8(%ebp)
	__asm__ __volatile__("outb %[v], %[p]" : : [p]"d" (port), [v]"a" (data));
   150c6:	0f b7 55 fc          	movzwl -0x4(%ebp),%edx
   150ca:	0f b6 45 f8          	movzbl -0x8(%ebp),%eax
   150ce:	ee                   	out    %al,(%dx)
}
   150cf:	90                   	nop
   150d0:	c9                   	leave  
   150d1:	c3                   	ret    

000150d2 <do_handler_timer>:
#include "os_cfg.h"
#include "core/task.h"

static uint32_t sys_tick;						

void do_handler_timer (exception_frame_t *frame) {
   150d2:	55                   	push   %ebp
   150d3:	89 e5                	mov    %esp,%ebp
   150d5:	83 ec 08             	sub    $0x8,%esp
    sys_tick++;
   150d8:	a1 c4 65 03 00       	mov    0x365c4,%eax
   150dd:	83 c0 01             	add    $0x1,%eax
   150e0:	a3 c4 65 03 00       	mov    %eax,0x365c4

    pic_send_eoi(IRQ0_TIMER);
   150e5:	83 ec 0c             	sub    $0xc,%esp
   150e8:	6a 20                	push   $0x20
   150ea:	e8 e4 dc ff ff       	call   12dd3 <pic_send_eoi>
   150ef:	83 c4 10             	add    $0x10,%esp

    task_time_tick();
   150f2:	e8 65 c7 ff ff       	call   1185c <task_time_tick>
}
   150f7:	90                   	nop
   150f8:	c9                   	leave  
   150f9:	c3                   	ret    

000150fa <init_pit>:

static void init_pit (void) {
   150fa:	55                   	push   %ebp
   150fb:	89 e5                	mov    %esp,%ebp
   150fd:	83 ec 18             	sub    $0x18,%esp
    uint32_t reload_count = PIT_OSC_FREQ / (1000.0 / OS_TICK_MS);
   15100:	c7 45 f4 9b 2e 00 00 	movl   $0x2e9b,-0xc(%ebp)

    //outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE0);
    outb(PIT_COMMAND_MODE_PORT, PIT_CHANNLE0 | PIT_LOAD_LOHI | PIT_MODE3);
   15107:	6a 36                	push   $0x36
   15109:	6a 43                	push   $0x43
   1510b:	e8 a3 ff ff ff       	call   150b3 <outb>
   15110:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, reload_count & 0xFF);  
   15113:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15116:	0f b6 c0             	movzbl %al,%eax
   15119:	50                   	push   %eax
   1511a:	6a 40                	push   $0x40
   1511c:	e8 92 ff ff ff       	call   150b3 <outb>
   15121:	83 c4 08             	add    $0x8,%esp
    outb(PIT_CHANNEL0_DATA_PORT, (reload_count >> 8) & 0xFF); 
   15124:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15127:	c1 e8 08             	shr    $0x8,%eax
   1512a:	0f b6 c0             	movzbl %al,%eax
   1512d:	50                   	push   %eax
   1512e:	6a 40                	push   $0x40
   15130:	e8 7e ff ff ff       	call   150b3 <outb>
   15135:	83 c4 08             	add    $0x8,%esp

    irq_install(IRQ0_TIMER, (irq_handler_t)exception_handler_timer);
   15138:	83 ec 08             	sub    $0x8,%esp
   1513b:	68 86 02 01 00       	push   $0x10286
   15140:	6a 20                	push   $0x20
   15142:	e8 65 de ff ff       	call   12fac <irq_install>
   15147:	83 c4 10             	add    $0x10,%esp
    irq_enable(IRQ0_TIMER);
   1514a:	83 ec 0c             	sub    $0xc,%esp
   1514d:	6a 20                	push   $0x20
   1514f:	e8 92 de ff ff       	call   12fe6 <irq_enable>
   15154:	83 c4 10             	add    $0x10,%esp
}
   15157:	90                   	nop
   15158:	c9                   	leave  
   15159:	c3                   	ret    

0001515a <time_init>:


void time_init (void) {
   1515a:	55                   	push   %ebp
   1515b:	89 e5                	mov    %esp,%ebp
   1515d:	83 ec 08             	sub    $0x8,%esp
    sys_tick = 0;
   15160:	c7 05 c4 65 03 00 00 	movl   $0x0,0x365c4
   15167:	00 00 00 

    init_pit();
   1516a:	e8 8b ff ff ff       	call   150fa <init_pit>
}
   1516f:	90                   	nop
   15170:	c9                   	leave  
   15171:	c3                   	ret    

00015172 <tty_fifo_init>:

static tty_t tty_devs[TTY_NR];
static int curr_tty = 0;


void tty_fifo_init (tty_fifo_t * fifo, char * buf, int size) {
   15172:	55                   	push   %ebp
   15173:	89 e5                	mov    %esp,%ebp
	fifo->buf = buf;
   15175:	8b 45 08             	mov    0x8(%ebp),%eax
   15178:	8b 55 0c             	mov    0xc(%ebp),%edx
   1517b:	89 10                	mov    %edx,(%eax)
	fifo->count = 0;
   1517d:	8b 45 08             	mov    0x8(%ebp),%eax
   15180:	c7 40 10 00 00 00 00 	movl   $0x0,0x10(%eax)
	fifo->size = size;
   15187:	8b 45 08             	mov    0x8(%ebp),%eax
   1518a:	8b 55 10             	mov    0x10(%ebp),%edx
   1518d:	89 50 04             	mov    %edx,0x4(%eax)
	fifo->read = fifo->write = 0;
   15190:	8b 45 08             	mov    0x8(%ebp),%eax
   15193:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
   1519a:	8b 45 08             	mov    0x8(%ebp),%eax
   1519d:	8b 50 0c             	mov    0xc(%eax),%edx
   151a0:	8b 45 08             	mov    0x8(%ebp),%eax
   151a3:	89 50 08             	mov    %edx,0x8(%eax)
}
   151a6:	90                   	nop
   151a7:	5d                   	pop    %ebp
   151a8:	c3                   	ret    

000151a9 <tty_fifo_get>:

int tty_fifo_get (tty_fifo_t * fifo, char * c) {
   151a9:	55                   	push   %ebp
   151aa:	89 e5                	mov    %esp,%ebp
   151ac:	53                   	push   %ebx
   151ad:	83 ec 14             	sub    $0x14,%esp
	if (fifo->count <= 0) {
   151b0:	8b 45 08             	mov    0x8(%ebp),%eax
   151b3:	8b 40 10             	mov    0x10(%eax),%eax
   151b6:	85 c0                	test   %eax,%eax
   151b8:	7f 07                	jg     151c1 <tty_fifo_get+0x18>
		return -1;
   151ba:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   151bf:	eb 62                	jmp    15223 <tty_fifo_get+0x7a>
	}

	irq_state_t state = irq_enter_protection();
   151c1:	e8 48 df ff ff       	call   1310e <irq_enter_protection>
   151c6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	*c = fifo->buf[fifo->read++];
   151c9:	8b 45 08             	mov    0x8(%ebp),%eax
   151cc:	8b 18                	mov    (%eax),%ebx
   151ce:	8b 45 08             	mov    0x8(%ebp),%eax
   151d1:	8b 40 08             	mov    0x8(%eax),%eax
   151d4:	8d 48 01             	lea    0x1(%eax),%ecx
   151d7:	8b 55 08             	mov    0x8(%ebp),%edx
   151da:	89 4a 08             	mov    %ecx,0x8(%edx)
   151dd:	01 d8                	add    %ebx,%eax
   151df:	0f b6 10             	movzbl (%eax),%edx
   151e2:	8b 45 0c             	mov    0xc(%ebp),%eax
   151e5:	88 10                	mov    %dl,(%eax)
	if (fifo->read >= fifo->size) {
   151e7:	8b 45 08             	mov    0x8(%ebp),%eax
   151ea:	8b 50 08             	mov    0x8(%eax),%edx
   151ed:	8b 45 08             	mov    0x8(%ebp),%eax
   151f0:	8b 40 04             	mov    0x4(%eax),%eax
   151f3:	39 c2                	cmp    %eax,%edx
   151f5:	7c 0a                	jl     15201 <tty_fifo_get+0x58>
		fifo->read = 0;
   151f7:	8b 45 08             	mov    0x8(%ebp),%eax
   151fa:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
	}
	fifo->count--;
   15201:	8b 45 08             	mov    0x8(%ebp),%eax
   15204:	8b 40 10             	mov    0x10(%eax),%eax
   15207:	8d 50 ff             	lea    -0x1(%eax),%edx
   1520a:	8b 45 08             	mov    0x8(%ebp),%eax
   1520d:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   15210:	83 ec 0c             	sub    $0xc,%esp
   15213:	ff 75 f4             	pushl  -0xc(%ebp)
   15216:	e8 0b df ff ff       	call   13126 <irq_leave_protection>
   1521b:	83 c4 10             	add    $0x10,%esp
	return 0;
   1521e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15223:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   15226:	c9                   	leave  
   15227:	c3                   	ret    

00015228 <tty_fifo_put>:


int tty_fifo_put (tty_fifo_t * fifo, char c) {
   15228:	55                   	push   %ebp
   15229:	89 e5                	mov    %esp,%ebp
   1522b:	53                   	push   %ebx
   1522c:	83 ec 24             	sub    $0x24,%esp
   1522f:	8b 45 0c             	mov    0xc(%ebp),%eax
   15232:	88 45 e4             	mov    %al,-0x1c(%ebp)
	if (fifo->count >= fifo->size) {
   15235:	8b 45 08             	mov    0x8(%ebp),%eax
   15238:	8b 50 10             	mov    0x10(%eax),%edx
   1523b:	8b 45 08             	mov    0x8(%ebp),%eax
   1523e:	8b 40 04             	mov    0x4(%eax),%eax
   15241:	39 c2                	cmp    %eax,%edx
   15243:	7c 07                	jl     1524c <tty_fifo_put+0x24>
		return -1;
   15245:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1524a:	eb 61                	jmp    152ad <tty_fifo_put+0x85>
	}

	irq_state_t state = irq_enter_protection();
   1524c:	e8 bd de ff ff       	call   1310e <irq_enter_protection>
   15251:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fifo->buf[fifo->write++] = c;
   15254:	8b 45 08             	mov    0x8(%ebp),%eax
   15257:	8b 18                	mov    (%eax),%ebx
   15259:	8b 45 08             	mov    0x8(%ebp),%eax
   1525c:	8b 40 0c             	mov    0xc(%eax),%eax
   1525f:	8d 48 01             	lea    0x1(%eax),%ecx
   15262:	8b 55 08             	mov    0x8(%ebp),%edx
   15265:	89 4a 0c             	mov    %ecx,0xc(%edx)
   15268:	8d 14 03             	lea    (%ebx,%eax,1),%edx
   1526b:	0f b6 45 e4          	movzbl -0x1c(%ebp),%eax
   1526f:	88 02                	mov    %al,(%edx)
	if (fifo->write >= fifo->size) {
   15271:	8b 45 08             	mov    0x8(%ebp),%eax
   15274:	8b 50 0c             	mov    0xc(%eax),%edx
   15277:	8b 45 08             	mov    0x8(%ebp),%eax
   1527a:	8b 40 04             	mov    0x4(%eax),%eax
   1527d:	39 c2                	cmp    %eax,%edx
   1527f:	7c 0a                	jl     1528b <tty_fifo_put+0x63>
		fifo->write = 0;
   15281:	8b 45 08             	mov    0x8(%ebp),%eax
   15284:	c7 40 0c 00 00 00 00 	movl   $0x0,0xc(%eax)
	}
	fifo->count++;
   1528b:	8b 45 08             	mov    0x8(%ebp),%eax
   1528e:	8b 40 10             	mov    0x10(%eax),%eax
   15291:	8d 50 01             	lea    0x1(%eax),%edx
   15294:	8b 45 08             	mov    0x8(%ebp),%eax
   15297:	89 50 10             	mov    %edx,0x10(%eax)
	irq_leave_protection(state);
   1529a:	83 ec 0c             	sub    $0xc,%esp
   1529d:	ff 75 f4             	pushl  -0xc(%ebp)
   152a0:	e8 81 de ff ff       	call   13126 <irq_leave_protection>
   152a5:	83 c4 10             	add    $0x10,%esp

	return 0;
   152a8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   152ad:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   152b0:	c9                   	leave  
   152b1:	c3                   	ret    

000152b2 <get_tty>:


static inline tty_t * get_tty (device_t * dev) {
   152b2:	55                   	push   %ebp
   152b3:	89 e5                	mov    %esp,%ebp
   152b5:	83 ec 18             	sub    $0x18,%esp
	int tty = dev->minor;
   152b8:	8b 45 08             	mov    0x8(%ebp),%eax
   152bb:	8b 40 08             	mov    0x8(%eax),%eax
   152be:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((tty < 0) || (tty >= TTY_NR) || (!dev->open_count)) {
   152c1:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   152c5:	78 10                	js     152d7 <get_tty+0x25>
   152c7:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   152cb:	7f 0a                	jg     152d7 <get_tty+0x25>
   152cd:	8b 45 08             	mov    0x8(%ebp),%eax
   152d0:	8b 40 10             	mov    0x10(%eax),%eax
   152d3:	85 c0                	test   %eax,%eax
   152d5:	75 1a                	jne    152f1 <get_tty+0x3f>
		log_printf("tty is not opened. tty = %d", tty);
   152d7:	83 ec 08             	sub    $0x8,%esp
   152da:	ff 75 f4             	pushl  -0xc(%ebp)
   152dd:	68 58 9a 01 00       	push   $0x19a58
   152e2:	e8 3f 37 00 00       	call   18a26 <log_printf>
   152e7:	83 c4 10             	add    $0x10,%esp
		return (tty_t *)0;
   152ea:	b8 00 00 00 00       	mov    $0x0,%eax
   152ef:	eb 0e                	jmp    152ff <get_tty+0x4d>
	}

	return tty_devs + tty;
   152f1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   152f4:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   152fa:	05 e0 65 03 00       	add    $0x365e0,%eax
}
   152ff:	c9                   	leave  
   15300:	c3                   	ret    

00015301 <tty_open>:


int tty_open (device_t * dev)  {
   15301:	55                   	push   %ebp
   15302:	89 e5                	mov    %esp,%ebp
   15304:	83 ec 18             	sub    $0x18,%esp
	int idx = dev->minor;
   15307:	8b 45 08             	mov    0x8(%ebp),%eax
   1530a:	8b 40 08             	mov    0x8(%eax),%eax
   1530d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if ((idx < 0) || (idx >= TTY_NR)) {
   15310:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15314:	78 06                	js     1531c <tty_open+0x1b>
   15316:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
   1531a:	7e 1d                	jle    15339 <tty_open+0x38>
		log_printf("open tty failed. incorrect tty num = %d", idx);
   1531c:	83 ec 08             	sub    $0x8,%esp
   1531f:	ff 75 f4             	pushl  -0xc(%ebp)
   15322:	68 74 9a 01 00       	push   $0x19a74
   15327:	e8 fa 36 00 00       	call   18a26 <log_printf>
   1532c:	83 c4 10             	add    $0x10,%esp
		return -1;
   1532f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15334:	e9 bf 00 00 00       	jmp    153f8 <tty_open+0xf7>
	}

	tty_t * tty = tty_devs + idx;
   15339:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1533c:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   15342:	05 e0 65 03 00       	add    $0x365e0,%eax
   15347:	89 45 f0             	mov    %eax,-0x10(%ebp)
	tty_fifo_init(&tty->ofifo, tty->obuf, TTY_OBUF_SIZE);
   1534a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1534d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   15350:	81 c2 00 02 00 00    	add    $0x200,%edx
   15356:	83 ec 04             	sub    $0x4,%esp
   15359:	68 00 02 00 00       	push   $0x200
   1535e:	50                   	push   %eax
   1535f:	52                   	push   %edx
   15360:	e8 0d fe ff ff       	call   15172 <tty_fifo_init>
   15365:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->osem, TTY_OBUF_SIZE);
   15368:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1536b:	05 14 02 00 00       	add    $0x214,%eax
   15370:	83 ec 08             	sub    $0x8,%esp
   15373:	68 00 02 00 00       	push   $0x200
   15378:	50                   	push   %eax
   15379:	e8 42 2b 00 00       	call   17ec0 <sem_init>
   1537e:	83 c4 10             	add    $0x10,%esp
	tty_fifo_init(&tty->ififo, tty->ibuf, TTY_IBUF_SIZE);
   15381:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15384:	8d 90 24 02 00 00    	lea    0x224(%eax),%edx
   1538a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1538d:	05 24 04 00 00       	add    $0x424,%eax
   15392:	83 ec 04             	sub    $0x4,%esp
   15395:	68 00 02 00 00       	push   $0x200
   1539a:	52                   	push   %edx
   1539b:	50                   	push   %eax
   1539c:	e8 d1 fd ff ff       	call   15172 <tty_fifo_init>
   153a1:	83 c4 10             	add    $0x10,%esp
	sem_init(&tty->isem, 0);
   153a4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153a7:	05 38 04 00 00       	add    $0x438,%eax
   153ac:	83 ec 08             	sub    $0x8,%esp
   153af:	6a 00                	push   $0x0
   153b1:	50                   	push   %eax
   153b2:	e8 09 2b 00 00       	call   17ec0 <sem_init>
   153b7:	83 c4 10             	add    $0x10,%esp

	tty->iflags = TTY_INLCR | TTY_IECHO;
   153ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153bd:	c7 80 48 04 00 00 05 	movl   $0x5,0x448(%eax)
   153c4:	00 00 00 
	tty->oflags = TTY_OCRLF;
   153c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153ca:	c7 80 4c 04 00 00 01 	movl   $0x1,0x44c(%eax)
   153d1:	00 00 00 

	tty->console_idx = idx;
   153d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   153d7:	8b 55 f4             	mov    -0xc(%ebp),%edx
   153da:	89 90 50 04 00 00    	mov    %edx,0x450(%eax)

	kbd_init();
   153e0:	e8 8e fc ff ff       	call   15073 <kbd_init>
	console_init(idx);
   153e5:	83 ec 0c             	sub    $0xc,%esp
   153e8:	ff 75 f4             	pushl  -0xc(%ebp)
   153eb:	e8 4e e4 ff ff       	call   1383e <console_init>
   153f0:	83 c4 10             	add    $0x10,%esp
	return 0;
   153f3:	b8 00 00 00 00       	mov    $0x0,%eax
}
   153f8:	c9                   	leave  
   153f9:	c3                   	ret    

000153fa <tty_write>:



int tty_write (device_t * dev, int addr, char * buf, int size) {
   153fa:	55                   	push   %ebp
   153fb:	89 e5                	mov    %esp,%ebp
   153fd:	83 ec 28             	sub    $0x28,%esp
	if (size < 0) {
   15400:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   15404:	79 0a                	jns    15410 <tty_write+0x16>
		return -1;
   15406:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1540b:	e9 d5 00 00 00       	jmp    154e5 <tty_write+0xeb>
	}

	tty_t * tty = get_tty(dev);
   15410:	83 ec 0c             	sub    $0xc,%esp
   15413:	ff 75 08             	pushl  0x8(%ebp)
   15416:	e8 97 fe ff ff       	call   152b2 <get_tty>
   1541b:	83 c4 10             	add    $0x10,%esp
   1541e:	89 45 f0             	mov    %eax,-0x10(%ebp)
	int len = 0;
   15421:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	while (size) {
   15428:	e9 a5 00 00 00       	jmp    154d2 <tty_write+0xd8>
		char c = *buf++;
   1542d:	8b 45 10             	mov    0x10(%ebp),%eax
   15430:	8d 50 01             	lea    0x1(%eax),%edx
   15433:	89 55 10             	mov    %edx,0x10(%ebp)
   15436:	0f b6 00             	movzbl (%eax),%eax
   15439:	88 45 ef             	mov    %al,-0x11(%ebp)

		if (c == '\n' && (tty->oflags & TTY_OCRLF)) {
   1543c:	80 7d ef 0a          	cmpb   $0xa,-0x11(%ebp)
   15440:	75 43                	jne    15485 <tty_write+0x8b>
   15442:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15445:	8b 80 4c 04 00 00    	mov    0x44c(%eax),%eax
   1544b:	83 e0 01             	and    $0x1,%eax
   1544e:	85 c0                	test   %eax,%eax
   15450:	74 33                	je     15485 <tty_write+0x8b>
			sem_wait(&tty->osem);
   15452:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15455:	05 14 02 00 00       	add    $0x214,%eax
   1545a:	83 ec 0c             	sub    $0xc,%esp
   1545d:	50                   	push   %eax
   1545e:	e8 80 2a 00 00       	call   17ee3 <sem_wait>
   15463:	83 c4 10             	add    $0x10,%esp
			int err = tty_fifo_put(&tty->ofifo, '\r');
   15466:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15469:	05 00 02 00 00       	add    $0x200,%eax
   1546e:	83 ec 08             	sub    $0x8,%esp
   15471:	6a 0d                	push   $0xd
   15473:	50                   	push   %eax
   15474:	e8 af fd ff ff       	call   15228 <tty_fifo_put>
   15479:	83 c4 10             	add    $0x10,%esp
   1547c:	89 45 e8             	mov    %eax,-0x18(%ebp)
			if (err < 0) {
   1547f:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15483:	78 59                	js     154de <tty_write+0xe4>
				break;
			}
		}

		sem_wait(&tty->osem);
   15485:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15488:	05 14 02 00 00       	add    $0x214,%eax
   1548d:	83 ec 0c             	sub    $0xc,%esp
   15490:	50                   	push   %eax
   15491:	e8 4d 2a 00 00       	call   17ee3 <sem_wait>
   15496:	83 c4 10             	add    $0x10,%esp
		int err = tty_fifo_put(&tty->ofifo, c);
   15499:	0f be 45 ef          	movsbl -0x11(%ebp),%eax
   1549d:	8b 55 f0             	mov    -0x10(%ebp),%edx
   154a0:	81 c2 00 02 00 00    	add    $0x200,%edx
   154a6:	83 ec 08             	sub    $0x8,%esp
   154a9:	50                   	push   %eax
   154aa:	52                   	push   %edx
   154ab:	e8 78 fd ff ff       	call   15228 <tty_fifo_put>
   154b0:	83 c4 10             	add    $0x10,%esp
   154b3:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (err < 0) {
   154b6:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   154ba:	78 25                	js     154e1 <tty_write+0xe7>
			break;
		}

		len++;
   154bc:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
		size--;
   154c0:	83 6d 14 01          	subl   $0x1,0x14(%ebp)

		console_write(tty);
   154c4:	83 ec 0c             	sub    $0xc,%esp
   154c7:	ff 75 f0             	pushl  -0x10(%ebp)
   154ca:	e8 7a e8 ff ff       	call   13d49 <console_write>
   154cf:	83 c4 10             	add    $0x10,%esp
	while (size) {
   154d2:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   154d6:	0f 85 51 ff ff ff    	jne    1542d <tty_write+0x33>
   154dc:	eb 04                	jmp    154e2 <tty_write+0xe8>
				break;
   154de:	90                   	nop
   154df:	eb 01                	jmp    154e2 <tty_write+0xe8>
			break;
   154e1:	90                   	nop
	}

	return len;
   154e2:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   154e5:	c9                   	leave  
   154e6:	c3                   	ret    

000154e7 <tty_read>:


int tty_read (device_t * dev, int addr, char * buf, int size) {
   154e7:	55                   	push   %ebp
   154e8:	89 e5                	mov    %esp,%ebp
   154ea:	83 ec 18             	sub    $0x18,%esp
	if (size < 0) {
   154ed:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   154f1:	79 0a                	jns    154fd <tty_read+0x16>
		return -1;
   154f3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   154f8:	e9 09 01 00 00       	jmp    15606 <tty_read+0x11f>
	}

	tty_t * tty = get_tty(dev);
   154fd:	83 ec 0c             	sub    $0xc,%esp
   15500:	ff 75 08             	pushl  0x8(%ebp)
   15503:	e8 aa fd ff ff       	call   152b2 <get_tty>
   15508:	83 c4 10             	add    $0x10,%esp
   1550b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	char * pbuf = buf;
   1550e:	8b 45 10             	mov    0x10(%ebp),%eax
   15511:	89 45 f4             	mov    %eax,-0xc(%ebp)
	int len = 0;
   15514:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

	while (len < size) {
   1551b:	e9 d7 00 00 00       	jmp    155f7 <tty_read+0x110>
		sem_wait(&tty->isem);
   15520:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15523:	05 38 04 00 00       	add    $0x438,%eax
   15528:	83 ec 0c             	sub    $0xc,%esp
   1552b:	50                   	push   %eax
   1552c:	e8 b2 29 00 00       	call   17ee3 <sem_wait>
   15531:	83 c4 10             	add    $0x10,%esp

		char ch;
		tty_fifo_get(&tty->ififo, &ch);
   15534:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15537:	8d 90 24 04 00 00    	lea    0x424(%eax),%edx
   1553d:	83 ec 08             	sub    $0x8,%esp
   15540:	8d 45 eb             	lea    -0x15(%ebp),%eax
   15543:	50                   	push   %eax
   15544:	52                   	push   %edx
   15545:	e8 5f fc ff ff       	call   151a9 <tty_fifo_get>
   1554a:	83 c4 10             	add    $0x10,%esp
		switch (ch) {
   1554d:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   15551:	0f be c0             	movsbl %al,%eax
   15554:	83 f8 0a             	cmp    $0xa,%eax
   15557:	74 1a                	je     15573 <tty_read+0x8c>
   15559:	83 f8 7f             	cmp    $0x7f,%eax
   1555c:	75 52                	jne    155b0 <tty_read+0xc9>
			case ASCII_DEL:
				if (len == 0) {
   1555e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15562:	75 05                	jne    15569 <tty_read+0x82>
   15564:	e9 8e 00 00 00       	jmp    155f7 <tty_read+0x110>
					continue;
				}
				len--;
   15569:	83 6d f0 01          	subl   $0x1,-0x10(%ebp)
				pbuf--;
   1556d:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)
				break;
   15571:	eb 51                	jmp    155c4 <tty_read+0xdd>
			case '\n':
				if ((tty->iflags & TTY_INLCR) && (len < size - 1)) {	
   15573:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15576:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   1557c:	83 e0 01             	and    $0x1,%eax
   1557f:	85 c0                	test   %eax,%eax
   15581:	74 1b                	je     1559e <tty_read+0xb7>
   15583:	8b 45 14             	mov    0x14(%ebp),%eax
   15586:	83 e8 01             	sub    $0x1,%eax
   15589:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   1558c:	7d 10                	jge    1559e <tty_read+0xb7>
					*pbuf++ = '\r';
   1558e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15591:	8d 50 01             	lea    0x1(%eax),%edx
   15594:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15597:	c6 00 0d             	movb   $0xd,(%eax)
					len++;
   1559a:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				}
				*pbuf++ = '\n';
   1559e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155a1:	8d 50 01             	lea    0x1(%eax),%edx
   155a4:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155a7:	c6 00 0a             	movb   $0xa,(%eax)
				len++;
   155aa:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   155ae:	eb 14                	jmp    155c4 <tty_read+0xdd>
			default:
				*pbuf++ = ch;
   155b0:	8b 45 f4             	mov    -0xc(%ebp),%eax
   155b3:	8d 50 01             	lea    0x1(%eax),%edx
   155b6:	89 55 f4             	mov    %edx,-0xc(%ebp)
   155b9:	0f b6 55 eb          	movzbl -0x15(%ebp),%edx
   155bd:	88 10                	mov    %dl,(%eax)
				len++;
   155bf:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
				break;
   155c3:	90                   	nop
		}

		if (tty->iflags & TTY_IECHO) {
   155c4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   155c7:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   155cd:	83 e0 04             	and    $0x4,%eax
   155d0:	85 c0                	test   %eax,%eax
   155d2:	74 13                	je     155e7 <tty_read+0x100>
		    tty_write(dev, 0, &ch, 1);
   155d4:	6a 01                	push   $0x1
   155d6:	8d 45 eb             	lea    -0x15(%ebp),%eax
   155d9:	50                   	push   %eax
   155da:	6a 00                	push   $0x0
   155dc:	ff 75 08             	pushl  0x8(%ebp)
   155df:	e8 16 fe ff ff       	call   153fa <tty_write>
   155e4:	83 c4 10             	add    $0x10,%esp
		}

		if ((ch == '\r') || (ch == '\n')) {
   155e7:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155eb:	3c 0d                	cmp    $0xd,%al
   155ed:	74 14                	je     15603 <tty_read+0x11c>
   155ef:	0f b6 45 eb          	movzbl -0x15(%ebp),%eax
   155f3:	3c 0a                	cmp    $0xa,%al
   155f5:	74 0c                	je     15603 <tty_read+0x11c>
	while (len < size) {
   155f7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   155fa:	3b 45 14             	cmp    0x14(%ebp),%eax
   155fd:	0f 8c 1d ff ff ff    	jl     15520 <tty_read+0x39>
			break;
		}
	}

	return len;
   15603:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   15606:	c9                   	leave  
   15607:	c3                   	ret    

00015608 <tty_control>:


int tty_control (device_t * dev, int cmd, int arg0, int arg1) {
   15608:	55                   	push   %ebp
   15609:	89 e5                	mov    %esp,%ebp
   1560b:	53                   	push   %ebx
   1560c:	83 ec 14             	sub    $0x14,%esp
	tty_t * tty = get_tty(dev);
   1560f:	83 ec 0c             	sub    $0xc,%esp
   15612:	ff 75 08             	pushl  0x8(%ebp)
   15615:	e8 98 fc ff ff       	call   152b2 <get_tty>
   1561a:	83 c4 10             	add    $0x10,%esp
   1561d:	89 45 f4             	mov    %eax,-0xc(%ebp)

	switch (cmd) {
   15620:	8b 45 0c             	mov    0xc(%ebp),%eax
   15623:	83 f8 01             	cmp    $0x1,%eax
   15626:	74 0a                	je     15632 <tty_control+0x2a>
   15628:	83 f8 02             	cmp    $0x2,%eax
   1562b:	74 6b                	je     15698 <tty_control+0x90>
		if (arg0) {
			*(int *)arg0 = sem_count(&tty->isem);
		}
		break;
	default:
		break;
   1562d:	e9 86 00 00 00       	jmp    156b8 <tty_control+0xb0>
		if (arg0) {
   15632:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   15636:	74 30                	je     15668 <tty_control+0x60>
			tty->iflags |= TTY_IECHO;
   15638:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1563b:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15641:	83 c8 04             	or     $0x4,%eax
   15644:	89 c2                	mov    %eax,%edx
   15646:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15649:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
			console_set_cursor(tty->console_idx, 1);
   1564f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15652:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   15658:	83 ec 08             	sub    $0x8,%esp
   1565b:	6a 01                	push   $0x1
   1565d:	50                   	push   %eax
   1565e:	e8 45 dc ff ff       	call   132a8 <console_set_cursor>
   15663:	83 c4 10             	add    $0x10,%esp
		break;
   15666:	eb 50                	jmp    156b8 <tty_control+0xb0>
			tty->iflags &= ~TTY_IECHO;
   15668:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1566b:	8b 80 48 04 00 00    	mov    0x448(%eax),%eax
   15671:	83 e0 fb             	and    $0xfffffffb,%eax
   15674:	89 c2                	mov    %eax,%edx
   15676:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15679:	89 90 48 04 00 00    	mov    %edx,0x448(%eax)
			console_set_cursor(tty->console_idx, 0);
   1567f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15682:	8b 80 50 04 00 00    	mov    0x450(%eax),%eax
   15688:	83 ec 08             	sub    $0x8,%esp
   1568b:	6a 00                	push   $0x0
   1568d:	50                   	push   %eax
   1568e:	e8 15 dc ff ff       	call   132a8 <console_set_cursor>
   15693:	83 c4 10             	add    $0x10,%esp
		break;
   15696:	eb 20                	jmp    156b8 <tty_control+0xb0>
		if (arg0) {
   15698:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1569c:	74 19                	je     156b7 <tty_control+0xaf>
			*(int *)arg0 = sem_count(&tty->isem);
   1569e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156a1:	05 38 04 00 00       	add    $0x438,%eax
   156a6:	8b 5d 10             	mov    0x10(%ebp),%ebx
   156a9:	83 ec 0c             	sub    $0xc,%esp
   156ac:	50                   	push   %eax
   156ad:	e8 23 29 00 00       	call   17fd5 <sem_count>
   156b2:	83 c4 10             	add    $0x10,%esp
   156b5:	89 03                	mov    %eax,(%ebx)
		break;
   156b7:	90                   	nop
	}
	return 0;
   156b8:	b8 00 00 00 00       	mov    $0x0,%eax
}
   156bd:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   156c0:	c9                   	leave  
   156c1:	c3                   	ret    

000156c2 <tty_close>:


void tty_close (device_t * dev) {
   156c2:	55                   	push   %ebp
   156c3:	89 e5                	mov    %esp,%ebp

}
   156c5:	90                   	nop
   156c6:	5d                   	pop    %ebp
   156c7:	c3                   	ret    

000156c8 <tty_in>:


void tty_in (char ch) {
   156c8:	55                   	push   %ebp
   156c9:	89 e5                	mov    %esp,%ebp
   156cb:	83 ec 28             	sub    $0x28,%esp
   156ce:	8b 45 08             	mov    0x8(%ebp),%eax
   156d1:	88 45 e4             	mov    %al,-0x1c(%ebp)
	tty_t * tty = tty_devs + curr_tty;
   156d4:	a1 80 88 03 00       	mov    0x38880,%eax
   156d9:	69 c0 54 04 00 00    	imul   $0x454,%eax,%eax
   156df:	05 e0 65 03 00       	add    $0x365e0,%eax
   156e4:	89 45 f4             	mov    %eax,-0xc(%ebp)

	if (sem_count(&tty->isem) >= TTY_IBUF_SIZE) {
   156e7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   156ea:	05 38 04 00 00       	add    $0x438,%eax
   156ef:	83 ec 0c             	sub    $0xc,%esp
   156f2:	50                   	push   %eax
   156f3:	e8 dd 28 00 00       	call   17fd5 <sem_count>
   156f8:	83 c4 10             	add    $0x10,%esp
   156fb:	3d ff 01 00 00       	cmp    $0x1ff,%eax
   15700:	7f 30                	jg     15732 <tty_in+0x6a>
		return;
	}

	tty_fifo_put(&tty->ififo, ch);
   15702:	0f be 45 e4          	movsbl -0x1c(%ebp),%eax
   15706:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15709:	81 c2 24 04 00 00    	add    $0x424,%edx
   1570f:	83 ec 08             	sub    $0x8,%esp
   15712:	50                   	push   %eax
   15713:	52                   	push   %edx
   15714:	e8 0f fb ff ff       	call   15228 <tty_fifo_put>
   15719:	83 c4 10             	add    $0x10,%esp
	sem_notify(&tty->isem);
   1571c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1571f:	05 38 04 00 00       	add    $0x438,%eax
   15724:	83 ec 0c             	sub    $0xc,%esp
   15727:	50                   	push   %eax
   15728:	e8 24 28 00 00       	call   17f51 <sem_notify>
   1572d:	83 c4 10             	add    $0x10,%esp
   15730:	eb 01                	jmp    15733 <tty_in+0x6b>
		return;
   15732:	90                   	nop
}
   15733:	c9                   	leave  
   15734:	c3                   	ret    

00015735 <tty_select>:


void tty_select (int tty) {
   15735:	55                   	push   %ebp
   15736:	89 e5                	mov    %esp,%ebp
   15738:	83 ec 08             	sub    $0x8,%esp
	if (tty != curr_tty) {
   1573b:	a1 80 88 03 00       	mov    0x38880,%eax
   15740:	39 45 08             	cmp    %eax,0x8(%ebp)
   15743:	74 16                	je     1575b <tty_select+0x26>
		console_select(tty);
   15745:	83 ec 0c             	sub    $0xc,%esp
   15748:	ff 75 08             	pushl  0x8(%ebp)
   1574b:	e8 28 dc ff ff       	call   13378 <console_select>
   15750:	83 c4 10             	add    $0x10,%esp
		curr_tty = tty;
   15753:	8b 45 08             	mov    0x8(%ebp),%eax
   15756:	a3 80 88 03 00       	mov    %eax,0x38880
	}
}
   1575b:	90                   	nop
   1575c:	c9                   	leave  
   1575d:	c3                   	ret    

0001575e <devfs_mount>:
        .dev_type = DEV_TTY,
        .file_type = FILE_TTY,
    }
};

int devfs_mount (struct _fs_t * fs, int major, int minor) {
   1575e:	55                   	push   %ebp
   1575f:	89 e5                	mov    %esp,%ebp
    fs->type = FS_DEVFS;
   15761:	8b 45 08             	mov    0x8(%ebp),%eax
   15764:	c7 80 00 02 00 00 01 	movl   $0x1,0x200(%eax)
   1576b:	00 00 00 
    return 0;
   1576e:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15773:	5d                   	pop    %ebp
   15774:	c3                   	ret    

00015775 <devfs_unmount>:


void devfs_unmount (struct _fs_t * fs) {
   15775:	55                   	push   %ebp
   15776:	89 e5                	mov    %esp,%ebp
}
   15778:	90                   	nop
   15779:	5d                   	pop    %ebp
   1577a:	c3                   	ret    

0001577b <devfs_open>:


int devfs_open (struct _fs_t * fs, const char * path, file_t * file) {   
   1577b:	55                   	push   %ebp
   1577c:	89 e5                	mov    %esp,%ebp
   1577e:	83 ec 28             	sub    $0x28,%esp
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   15781:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   15788:	e9 04 01 00 00       	jmp    15891 <devfs_open+0x116>
        devfs_type_t * type = devfs_type_list + i;
   1578d:	8b 55 f4             	mov    -0xc(%ebp),%edx
   15790:	89 d0                	mov    %edx,%eax
   15792:	01 c0                	add    %eax,%eax
   15794:	01 d0                	add    %edx,%eax
   15796:	c1 e0 02             	shl    $0x2,%eax
   15799:	05 e0 a0 01 00       	add    $0x1a0e0,%eax
   1579e:	89 45 f0             	mov    %eax,-0x10(%ebp)

        int type_name_len = kernel_strlen(type->name);
   157a1:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157a4:	8b 00                	mov    (%eax),%eax
   157a6:	83 ec 0c             	sub    $0xc,%esp
   157a9:	50                   	push   %eax
   157aa:	e8 c5 2b 00 00       	call   18374 <kernel_strlen>
   157af:	83 c4 10             	add    $0x10,%esp
   157b2:	89 45 ec             	mov    %eax,-0x14(%ebp)

        if (kernel_strncmp(path, type->name, type_name_len) == 0) {
   157b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   157b8:	8b 00                	mov    (%eax),%eax
   157ba:	83 ec 04             	sub    $0x4,%esp
   157bd:	ff 75 ec             	pushl  -0x14(%ebp)
   157c0:	50                   	push   %eax
   157c1:	ff 75 0c             	pushl  0xc(%ebp)
   157c4:	e8 e6 2b 00 00       	call   183af <kernel_strncmp>
   157c9:	83 c4 10             	add    $0x10,%esp
   157cc:	85 c0                	test   %eax,%eax
   157ce:	0f 85 b9 00 00 00    	jne    1588d <devfs_open+0x112>
            int minor;

            if ((kernel_strlen(path) > type_name_len) && (path_to_num(path + type_name_len, &minor)) < 0) {
   157d4:	83 ec 0c             	sub    $0xc,%esp
   157d7:	ff 75 0c             	pushl  0xc(%ebp)
   157da:	e8 95 2b 00 00       	call   18374 <kernel_strlen>
   157df:	83 c4 10             	add    $0x10,%esp
   157e2:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   157e5:	7d 34                	jge    1581b <devfs_open+0xa0>
   157e7:	8b 55 ec             	mov    -0x14(%ebp),%edx
   157ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   157ed:	01 c2                	add    %eax,%edx
   157ef:	83 ec 08             	sub    $0x8,%esp
   157f2:	8d 45 e4             	lea    -0x1c(%ebp),%eax
   157f5:	50                   	push   %eax
   157f6:	52                   	push   %edx
   157f7:	e8 ef 1a 00 00       	call   172eb <path_to_num>
   157fc:	83 c4 10             	add    $0x10,%esp
   157ff:	85 c0                	test   %eax,%eax
   15801:	79 18                	jns    1581b <devfs_open+0xa0>
                log_printf("Get device num failed. %s", path);
   15803:	83 ec 08             	sub    $0x8,%esp
   15806:	ff 75 0c             	pushl  0xc(%ebp)
   15809:	68 a0 9a 01 00       	push   $0x19aa0
   1580e:	e8 13 32 00 00       	call   18a26 <log_printf>
   15813:	83 c4 10             	add    $0x10,%esp
                break;
   15816:	e9 80 00 00 00       	jmp    1589b <devfs_open+0x120>
            }

            int dev_id = dev_open(type->dev_type, minor, (void *)0);
   1581b:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   1581e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15821:	8b 40 04             	mov    0x4(%eax),%eax
   15824:	83 ec 04             	sub    $0x4,%esp
   15827:	6a 00                	push   $0x0
   15829:	52                   	push   %edx
   1582a:	50                   	push   %eax
   1582b:	e8 54 e6 ff ff       	call   13e84 <dev_open>
   15830:	83 c4 10             	add    $0x10,%esp
   15833:	89 45 e8             	mov    %eax,-0x18(%ebp)
            if (dev_id < 0) {
   15836:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1583a:	79 16                	jns    15852 <devfs_open+0xd7>
                log_printf("Open device failed:%s", path);
   1583c:	83 ec 08             	sub    $0x8,%esp
   1583f:	ff 75 0c             	pushl  0xc(%ebp)
   15842:	68 ba 9a 01 00       	push   $0x19aba
   15847:	e8 da 31 00 00       	call   18a26 <log_printf>
   1584c:	83 c4 10             	add    $0x10,%esp
                break;
   1584f:	90                   	nop
   15850:	eb 49                	jmp    1589b <devfs_open+0x120>
            }

            
            file->dev_id = dev_id;
   15852:	8b 45 10             	mov    0x10(%ebp),%eax
   15855:	8b 55 e8             	mov    -0x18(%ebp),%edx
   15858:	89 50 2c             	mov    %edx,0x2c(%eax)
            file->fs = fs;
   1585b:	8b 45 10             	mov    0x10(%ebp),%eax
   1585e:	8b 55 08             	mov    0x8(%ebp),%edx
   15861:	89 50 44             	mov    %edx,0x44(%eax)
            file->pos = 0;
   15864:	8b 45 10             	mov    0x10(%ebp),%eax
   15867:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
            file->size = 0;
   1586e:	8b 45 10             	mov    0x10(%ebp),%eax
   15871:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
            file->type = type->file_type;
   15878:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1587b:	8b 40 08             	mov    0x8(%eax),%eax
   1587e:	89 c2                	mov    %eax,%edx
   15880:	8b 45 10             	mov    0x10(%ebp),%eax
   15883:	89 50 20             	mov    %edx,0x20(%eax)
            return 0;
   15886:	b8 00 00 00 00       	mov    $0x0,%eax
   1588b:	eb 13                	jmp    158a0 <devfs_open+0x125>
    for (int i = 0; i < sizeof(devfs_type_list) / sizeof(devfs_type_list[0]); i++) {
   1588d:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   15891:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   15895:	0f 84 f2 fe ff ff    	je     1578d <devfs_open+0x12>
        }
    }

    return -1;
   1589b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   158a0:	c9                   	leave  
   158a1:	c3                   	ret    

000158a2 <devfs_read>:


int devfs_read (char * buf, int size, file_t * file) {
   158a2:	55                   	push   %ebp
   158a3:	89 e5                	mov    %esp,%ebp
   158a5:	83 ec 08             	sub    $0x8,%esp
    return dev_read(file->dev_id, file->pos, buf, size);
   158a8:	8b 45 10             	mov    0x10(%ebp),%eax
   158ab:	8b 50 30             	mov    0x30(%eax),%edx
   158ae:	8b 45 10             	mov    0x10(%ebp),%eax
   158b1:	8b 40 2c             	mov    0x2c(%eax),%eax
   158b4:	ff 75 0c             	pushl  0xc(%ebp)
   158b7:	ff 75 08             	pushl  0x8(%ebp)
   158ba:	52                   	push   %edx
   158bb:	50                   	push   %eax
   158bc:	e8 0f e7 ff ff       	call   13fd0 <dev_read>
   158c1:	83 c4 10             	add    $0x10,%esp
}
   158c4:	c9                   	leave  
   158c5:	c3                   	ret    

000158c6 <devfs_write>:


int devfs_write (char * buf, int size, file_t * file) {
   158c6:	55                   	push   %ebp
   158c7:	89 e5                	mov    %esp,%ebp
   158c9:	83 ec 08             	sub    $0x8,%esp
    return dev_write(file->dev_id, file->pos, buf, size);
   158cc:	8b 45 10             	mov    0x10(%ebp),%eax
   158cf:	8b 50 30             	mov    0x30(%eax),%edx
   158d2:	8b 45 10             	mov    0x10(%ebp),%eax
   158d5:	8b 40 2c             	mov    0x2c(%eax),%eax
   158d8:	ff 75 0c             	pushl  0xc(%ebp)
   158db:	ff 75 08             	pushl  0x8(%ebp)
   158de:	52                   	push   %edx
   158df:	50                   	push   %eax
   158e0:	e8 37 e7 ff ff       	call   1401c <dev_write>
   158e5:	83 c4 10             	add    $0x10,%esp
}
   158e8:	c9                   	leave  
   158e9:	c3                   	ret    

000158ea <devfs_close>:


void devfs_close (file_t * file) {
   158ea:	55                   	push   %ebp
   158eb:	89 e5                	mov    %esp,%ebp
   158ed:	83 ec 08             	sub    $0x8,%esp
    dev_close(file->dev_id);
   158f0:	8b 45 08             	mov    0x8(%ebp),%eax
   158f3:	8b 40 2c             	mov    0x2c(%eax),%eax
   158f6:	83 ec 0c             	sub    $0xc,%esp
   158f9:	50                   	push   %eax
   158fa:	e8 b5 e7 ff ff       	call   140b4 <dev_close>
   158ff:	83 c4 10             	add    $0x10,%esp
}
   15902:	90                   	nop
   15903:	c9                   	leave  
   15904:	c3                   	ret    

00015905 <devfs_seek>:


int devfs_seek (file_t * file, uint32_t offset, int dir) {
   15905:	55                   	push   %ebp
   15906:	89 e5                	mov    %esp,%ebp
    return -1;  // 不支持定位
   15908:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   1590d:	5d                   	pop    %ebp
   1590e:	c3                   	ret    

0001590f <devfs_stat>:


int devfs_stat(file_t * file, struct stat *st) {
   1590f:	55                   	push   %ebp
   15910:	89 e5                	mov    %esp,%ebp
    return -1;
   15912:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   15917:	5d                   	pop    %ebp
   15918:	c3                   	ret    

00015919 <devfs_ioctl>:

int devfs_ioctl(file_t * file, int cmd, int arg0, int arg1) {
   15919:	55                   	push   %ebp
   1591a:	89 e5                	mov    %esp,%ebp
   1591c:	83 ec 08             	sub    $0x8,%esp
    return dev_control(file->dev_id, cmd, arg0, arg1);
   1591f:	8b 45 08             	mov    0x8(%ebp),%eax
   15922:	8b 40 2c             	mov    0x2c(%eax),%eax
   15925:	ff 75 14             	pushl  0x14(%ebp)
   15928:	ff 75 10             	pushl  0x10(%ebp)
   1592b:	ff 75 0c             	pushl  0xc(%ebp)
   1592e:	50                   	push   %eax
   1592f:	e8 34 e7 ff ff       	call   14068 <dev_control>
   15934:	83 c4 10             	add    $0x10,%esp
}
   15937:	c9                   	leave  
   15938:	c3                   	ret    

00015939 <up2>:
static inline uint32_t up2 (uint32_t size, uint32_t bound) {
   15939:	55                   	push   %ebp
   1593a:	89 e5                	mov    %esp,%ebp
    return (size + bound - 1) & ~(bound - 1);
   1593c:	8b 55 08             	mov    0x8(%ebp),%edx
   1593f:	8b 45 0c             	mov    0xc(%ebp),%eax
   15942:	01 d0                	add    %edx,%eax
   15944:	8d 50 ff             	lea    -0x1(%eax),%edx
   15947:	8b 45 0c             	mov    0xc(%ebp),%eax
   1594a:	f7 d8                	neg    %eax
   1594c:	21 d0                	and    %edx,%eax
}
   1594e:	5d                   	pop    %ebp
   1594f:	c3                   	ret    

00015950 <bread_sector>:
#include "tools/log.h"
#include "tools/klib.h"
#include <sys/fcntl.h>


static int bread_sector (fat_t * fat, int sector) {
   15950:	55                   	push   %ebp
   15951:	89 e5                	mov    %esp,%ebp
   15953:	83 ec 18             	sub    $0x18,%esp
    if (sector == fat->curr_sector) {
   15956:	8b 45 08             	mov    0x8(%ebp),%eax
   15959:	8b 40 28             	mov    0x28(%eax),%eax
   1595c:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1595f:	75 07                	jne    15968 <bread_sector+0x18>
        return 0;
   15961:	b8 00 00 00 00       	mov    $0x0,%eax
   15966:	eb 3f                	jmp    159a7 <bread_sector+0x57>
    }

    int cnt = dev_read(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   15968:	8b 45 08             	mov    0x8(%ebp),%eax
   1596b:	8b 50 24             	mov    0x24(%eax),%edx
   1596e:	8b 45 08             	mov    0x8(%ebp),%eax
   15971:	8b 40 2c             	mov    0x2c(%eax),%eax
   15974:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   1597a:	6a 01                	push   $0x1
   1597c:	52                   	push   %edx
   1597d:	ff 75 0c             	pushl  0xc(%ebp)
   15980:	50                   	push   %eax
   15981:	e8 4a e6 ff ff       	call   13fd0 <dev_read>
   15986:	83 c4 10             	add    $0x10,%esp
   15989:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (cnt == 1) {
   1598c:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   15990:	75 10                	jne    159a2 <bread_sector+0x52>
        fat->curr_sector = sector;
   15992:	8b 45 08             	mov    0x8(%ebp),%eax
   15995:	8b 55 0c             	mov    0xc(%ebp),%edx
   15998:	89 50 28             	mov    %edx,0x28(%eax)
        return 0;
   1599b:	b8 00 00 00 00       	mov    $0x0,%eax
   159a0:	eb 05                	jmp    159a7 <bread_sector+0x57>
    }
    return -1;
   159a2:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159a7:	c9                   	leave  
   159a8:	c3                   	ret    

000159a9 <bwrite_secotr>:


static int bwrite_secotr (fat_t * fat, int sector) {
   159a9:	55                   	push   %ebp
   159aa:	89 e5                	mov    %esp,%ebp
   159ac:	83 ec 18             	sub    $0x18,%esp
    int cnt = dev_write(fat->fs->dev_id, sector, fat->fat_buffer, 1);
   159af:	8b 45 08             	mov    0x8(%ebp),%eax
   159b2:	8b 50 24             	mov    0x24(%eax),%edx
   159b5:	8b 45 08             	mov    0x8(%ebp),%eax
   159b8:	8b 40 2c             	mov    0x2c(%eax),%eax
   159bb:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   159c1:	6a 01                	push   $0x1
   159c3:	52                   	push   %edx
   159c4:	ff 75 0c             	pushl  0xc(%ebp)
   159c7:	50                   	push   %eax
   159c8:	e8 4f e6 ff ff       	call   1401c <dev_write>
   159cd:	83 c4 10             	add    $0x10,%esp
   159d0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return (cnt == 1) ? 0 : -1;
   159d3:	83 7d f4 01          	cmpl   $0x1,-0xc(%ebp)
   159d7:	75 07                	jne    159e0 <bwrite_secotr+0x37>
   159d9:	b8 00 00 00 00       	mov    $0x0,%eax
   159de:	eb 05                	jmp    159e5 <bwrite_secotr+0x3c>
   159e0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   159e5:	c9                   	leave  
   159e6:	c3                   	ret    

000159e7 <cluster_is_valid>:


int cluster_is_valid (cluster_t cluster) {
   159e7:	55                   	push   %ebp
   159e8:	89 e5                	mov    %esp,%ebp
   159ea:	83 ec 04             	sub    $0x4,%esp
   159ed:	8b 45 08             	mov    0x8(%ebp),%eax
   159f0:	66 89 45 fc          	mov    %ax,-0x4(%ebp)
    return (cluster < 0xFFF8) && (cluster >= 0x2);    
   159f4:	66 83 7d fc f7       	cmpw   $0xfff7,-0x4(%ebp)
   159f9:	77 0e                	ja     15a09 <cluster_is_valid+0x22>
   159fb:	66 83 7d fc 01       	cmpw   $0x1,-0x4(%ebp)
   15a00:	76 07                	jbe    15a09 <cluster_is_valid+0x22>
   15a02:	b8 01 00 00 00       	mov    $0x1,%eax
   15a07:	eb 05                	jmp    15a0e <cluster_is_valid+0x27>
   15a09:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15a0e:	c9                   	leave  
   15a0f:	c3                   	ret    

00015a10 <cluster_get_next>:


int cluster_get_next (fat_t * fat, cluster_t curr) {
   15a10:	55                   	push   %ebp
   15a11:	89 e5                	mov    %esp,%ebp
   15a13:	83 ec 28             	sub    $0x28,%esp
   15a16:	8b 45 0c             	mov    0xc(%ebp),%eax
   15a19:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    if (!cluster_is_valid(curr)) {
   15a1d:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a21:	50                   	push   %eax
   15a22:	e8 c0 ff ff ff       	call   159e7 <cluster_is_valid>
   15a27:	83 c4 04             	add    $0x4,%esp
   15a2a:	85 c0                	test   %eax,%eax
   15a2c:	75 0a                	jne    15a38 <cluster_get_next+0x28>
        return FAT_CLUSTER_INVALID;
   15a2e:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a33:	e9 94 00 00 00       	jmp    15acc <cluster_get_next+0xbc>
    }

    int offset = curr * sizeof(cluster_t);
   15a38:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a3c:	01 c0                	add    %eax,%eax
   15a3e:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15a41:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a44:	8b 55 08             	mov    0x8(%ebp),%edx
   15a47:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a4a:	ba 00 00 00 00       	mov    $0x0,%edx
   15a4f:	f7 f1                	div    %ecx
   15a51:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15a54:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15a57:	8b 55 08             	mov    0x8(%ebp),%edx
   15a5a:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15a5d:	ba 00 00 00 00       	mov    $0x0,%edx
   15a62:	f7 f1                	div    %ecx
   15a64:	89 d0                	mov    %edx,%eax
   15a66:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (sector >= fat->tbl_sectors) {
   15a69:	8b 45 08             	mov    0x8(%ebp),%eax
   15a6c:	8b 50 08             	mov    0x8(%eax),%edx
   15a6f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a72:	39 c2                	cmp    %eax,%edx
   15a74:	77 1c                	ja     15a92 <cluster_get_next+0x82>
        log_printf("cluster too big. %d", curr);
   15a76:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15a7a:	83 ec 08             	sub    $0x8,%esp
   15a7d:	50                   	push   %eax
   15a7e:	68 d0 9a 01 00       	push   $0x19ad0
   15a83:	e8 9e 2f 00 00       	call   18a26 <log_printf>
   15a88:	83 c4 10             	add    $0x10,%esp
        return FAT_CLUSTER_INVALID;
   15a8b:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15a90:	eb 3a                	jmp    15acc <cluster_get_next+0xbc>
    }

    int err = bread_sector(fat, fat->tbl_start + sector);
   15a92:	8b 45 08             	mov    0x8(%ebp),%eax
   15a95:	8b 10                	mov    (%eax),%edx
   15a97:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15a9a:	01 d0                	add    %edx,%eax
   15a9c:	83 ec 08             	sub    $0x8,%esp
   15a9f:	50                   	push   %eax
   15aa0:	ff 75 08             	pushl  0x8(%ebp)
   15aa3:	e8 a8 fe ff ff       	call   15950 <bread_sector>
   15aa8:	83 c4 10             	add    $0x10,%esp
   15aab:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (err < 0) {
   15aae:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   15ab2:	79 07                	jns    15abb <cluster_get_next+0xab>
        return FAT_CLUSTER_INVALID;
   15ab4:	b8 f8 ff 00 00       	mov    $0xfff8,%eax
   15ab9:	eb 11                	jmp    15acc <cluster_get_next+0xbc>
    }

    return *(cluster_t*)(fat->fat_buffer + off_sector);
   15abb:	8b 45 08             	mov    0x8(%ebp),%eax
   15abe:	8b 50 24             	mov    0x24(%eax),%edx
   15ac1:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15ac4:	01 d0                	add    %edx,%eax
   15ac6:	0f b7 00             	movzwl (%eax),%eax
   15ac9:	0f b7 c0             	movzwl %ax,%eax
}
   15acc:	c9                   	leave  
   15acd:	c3                   	ret    

00015ace <cluster_set_next>:


int cluster_set_next (fat_t * fat, cluster_t curr, cluster_t next) {
   15ace:	55                   	push   %ebp
   15acf:	89 e5                	mov    %esp,%ebp
   15ad1:	83 ec 38             	sub    $0x38,%esp
   15ad4:	8b 55 0c             	mov    0xc(%ebp),%edx
   15ad7:	8b 45 10             	mov    0x10(%ebp),%eax
   15ada:	66 89 55 d4          	mov    %dx,-0x2c(%ebp)
   15ade:	66 89 45 d0          	mov    %ax,-0x30(%ebp)
    if (!cluster_is_valid(curr)) {
   15ae2:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15ae6:	50                   	push   %eax
   15ae7:	e8 fb fe ff ff       	call   159e7 <cluster_is_valid>
   15aec:	83 c4 04             	add    $0x4,%esp
   15aef:	85 c0                	test   %eax,%eax
   15af1:	75 0a                	jne    15afd <cluster_set_next+0x2f>
        return -1;
   15af3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15af8:	e9 fe 00 00 00       	jmp    15bfb <cluster_set_next+0x12d>
    }

    int offset = curr * sizeof(cluster_t);
   15afd:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b01:	01 c0                	add    %eax,%eax
   15b03:	89 45 ec             	mov    %eax,-0x14(%ebp)
    int sector = offset / fat->bytes_per_sec;
   15b06:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b09:	8b 55 08             	mov    0x8(%ebp),%edx
   15b0c:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b0f:	ba 00 00 00 00       	mov    $0x0,%edx
   15b14:	f7 f1                	div    %ecx
   15b16:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int off_sector = offset % fat->bytes_per_sec;
   15b19:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15b1c:	8b 55 08             	mov    0x8(%ebp),%edx
   15b1f:	8b 4a 0c             	mov    0xc(%edx),%ecx
   15b22:	ba 00 00 00 00       	mov    $0x0,%edx
   15b27:	f7 f1                	div    %ecx
   15b29:	89 d0                	mov    %edx,%eax
   15b2b:	89 45 e8             	mov    %eax,-0x18(%ebp)
    if (sector >= fat->tbl_sectors) {
   15b2e:	8b 45 08             	mov    0x8(%ebp),%eax
   15b31:	8b 50 08             	mov    0x8(%eax),%edx
   15b34:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b37:	39 c2                	cmp    %eax,%edx
   15b39:	77 1f                	ja     15b5a <cluster_set_next+0x8c>
        log_printf("cluster too big. %d", curr);
   15b3b:	0f b7 45 d4          	movzwl -0x2c(%ebp),%eax
   15b3f:	83 ec 08             	sub    $0x8,%esp
   15b42:	50                   	push   %eax
   15b43:	68 d0 9a 01 00       	push   $0x19ad0
   15b48:	e8 d9 2e 00 00       	call   18a26 <log_printf>
   15b4d:	83 c4 10             	add    $0x10,%esp
        return -1;
   15b50:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b55:	e9 a1 00 00 00       	jmp    15bfb <cluster_set_next+0x12d>
    }

    int err = bread_sector(fat, fat->tbl_start + sector);
   15b5a:	8b 45 08             	mov    0x8(%ebp),%eax
   15b5d:	8b 10                	mov    (%eax),%edx
   15b5f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15b62:	01 d0                	add    %edx,%eax
   15b64:	83 ec 08             	sub    $0x8,%esp
   15b67:	50                   	push   %eax
   15b68:	ff 75 08             	pushl  0x8(%ebp)
   15b6b:	e8 e0 fd ff ff       	call   15950 <bread_sector>
   15b70:	83 c4 10             	add    $0x10,%esp
   15b73:	89 45 e4             	mov    %eax,-0x1c(%ebp)
    if (err < 0) {
   15b76:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15b7a:	79 07                	jns    15b83 <cluster_set_next+0xb5>
        return -1;
   15b7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15b81:	eb 78                	jmp    15bfb <cluster_set_next+0x12d>
    }

    *(cluster_t*)(fat->fat_buffer + off_sector) = next;
   15b83:	8b 45 08             	mov    0x8(%ebp),%eax
   15b86:	8b 50 24             	mov    0x24(%eax),%edx
   15b89:	8b 45 e8             	mov    -0x18(%ebp),%eax
   15b8c:	01 c2                	add    %eax,%edx
   15b8e:	0f b7 45 d0          	movzwl -0x30(%ebp),%eax
   15b92:	66 89 02             	mov    %ax,(%edx)

    for (int i = 0; i < fat->tbl_cnt; i++) {
   15b95:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   15b9c:	eb 4b                	jmp    15be9 <cluster_set_next+0x11b>
        err = bwrite_secotr(fat, fat->tbl_start + sector);
   15b9e:	8b 45 08             	mov    0x8(%ebp),%eax
   15ba1:	8b 10                	mov    (%eax),%edx
   15ba3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15ba6:	01 d0                	add    %edx,%eax
   15ba8:	83 ec 08             	sub    $0x8,%esp
   15bab:	50                   	push   %eax
   15bac:	ff 75 08             	pushl  0x8(%ebp)
   15baf:	e8 f5 fd ff ff       	call   159a9 <bwrite_secotr>
   15bb4:	83 c4 10             	add    $0x10,%esp
   15bb7:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   15bba:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15bbe:	79 17                	jns    15bd7 <cluster_set_next+0x109>
            log_printf("write cluster failed.");
   15bc0:	83 ec 0c             	sub    $0xc,%esp
   15bc3:	68 e4 9a 01 00       	push   $0x19ae4
   15bc8:	e8 59 2e 00 00       	call   18a26 <log_printf>
   15bcd:	83 c4 10             	add    $0x10,%esp
            return -1;
   15bd0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   15bd5:	eb 24                	jmp    15bfb <cluster_set_next+0x12d>
        }
        sector += fat->tbl_sectors;
   15bd7:	8b 45 08             	mov    0x8(%ebp),%eax
   15bda:	8b 50 08             	mov    0x8(%eax),%edx
   15bdd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15be0:	01 d0                	add    %edx,%eax
   15be2:	89 45 f4             	mov    %eax,-0xc(%ebp)
    for (int i = 0; i < fat->tbl_cnt; i++) {
   15be5:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   15be9:	8b 45 08             	mov    0x8(%ebp),%eax
   15bec:	8b 50 04             	mov    0x4(%eax),%edx
   15bef:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15bf2:	39 c2                	cmp    %eax,%edx
   15bf4:	77 a8                	ja     15b9e <cluster_set_next+0xd0>
    }
    return 0;
   15bf6:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15bfb:	c9                   	leave  
   15bfc:	c3                   	ret    

00015bfd <cluster_free_chain>:


void cluster_free_chain(fat_t * fat, cluster_t start) {
   15bfd:	55                   	push   %ebp
   15bfe:	89 e5                	mov    %esp,%ebp
   15c00:	83 ec 28             	sub    $0x28,%esp
   15c03:	8b 45 0c             	mov    0xc(%ebp),%eax
   15c06:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15c0a:	eb 34                	jmp    15c40 <cluster_free_chain+0x43>
        cluster_t next = cluster_get_next(fat, start);
   15c0c:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c10:	83 ec 08             	sub    $0x8,%esp
   15c13:	50                   	push   %eax
   15c14:	ff 75 08             	pushl  0x8(%ebp)
   15c17:	e8 f4 fd ff ff       	call   15a10 <cluster_get_next>
   15c1c:	83 c4 10             	add    $0x10,%esp
   15c1f:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        cluster_set_next(fat, start, FAT_CLUSTER_FREE);
   15c23:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c27:	83 ec 04             	sub    $0x4,%esp
   15c2a:	6a 00                	push   $0x0
   15c2c:	50                   	push   %eax
   15c2d:	ff 75 08             	pushl  0x8(%ebp)
   15c30:	e8 99 fe ff ff       	call   15ace <cluster_set_next>
   15c35:	83 c4 10             	add    $0x10,%esp
        start = next;
   15c38:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15c3c:	66 89 45 e4          	mov    %ax,-0x1c(%ebp)
    while (cluster_is_valid(start)) {
   15c40:	0f b7 45 e4          	movzwl -0x1c(%ebp),%eax
   15c44:	83 ec 0c             	sub    $0xc,%esp
   15c47:	50                   	push   %eax
   15c48:	e8 9a fd ff ff       	call   159e7 <cluster_is_valid>
   15c4d:	83 c4 10             	add    $0x10,%esp
   15c50:	85 c0                	test   %eax,%eax
   15c52:	75 b8                	jne    15c0c <cluster_free_chain+0xf>
    }
}
   15c54:	90                   	nop
   15c55:	c9                   	leave  
   15c56:	c3                   	ret    

00015c57 <cluster_alloc_free>:


cluster_t cluster_alloc_free (fat_t * fat, int cnt) {
   15c57:	55                   	push   %ebp
   15c58:	89 e5                	mov    %esp,%ebp
   15c5a:	83 ec 28             	sub    $0x28,%esp
    cluster_t pre, curr, start;
    int c_total = fat->tbl_sectors * fat->bytes_per_sec / sizeof(cluster_t);
   15c5d:	8b 45 08             	mov    0x8(%ebp),%eax
   15c60:	8b 50 08             	mov    0x8(%eax),%edx
   15c63:	8b 45 08             	mov    0x8(%ebp),%eax
   15c66:	8b 40 0c             	mov    0xc(%eax),%eax
   15c69:	0f af c2             	imul   %edx,%eax
   15c6c:	d1 e8                	shr    %eax
   15c6e:	89 45 ec             	mov    %eax,-0x14(%ebp)

    pre = start = FAT_CLUSTER_INVALID;
   15c71:	66 c7 45 f2 f8 ff    	movw   $0xfff8,-0xe(%ebp)
   15c77:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15c7b:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15c7f:	66 c7 45 f4 02 00    	movw   $0x2,-0xc(%ebp)
   15c85:	e9 a0 00 00 00       	jmp    15d2a <cluster_alloc_free+0xd3>
        cluster_t free = cluster_get_next(fat, curr);
   15c8a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15c8e:	83 ec 08             	sub    $0x8,%esp
   15c91:	50                   	push   %eax
   15c92:	ff 75 08             	pushl  0x8(%ebp)
   15c95:	e8 76 fd ff ff       	call   15a10 <cluster_get_next>
   15c9a:	83 c4 10             	add    $0x10,%esp
   15c9d:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
        if (free == FAT_CLUSTER_FREE) {
   15ca1:	66 83 7d ea 00       	cmpw   $0x0,-0x16(%ebp)
   15ca6:	75 77                	jne    15d1f <cluster_alloc_free+0xc8>
            if (!cluster_is_valid(start)) {
   15ca8:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15cac:	83 ec 0c             	sub    $0xc,%esp
   15caf:	50                   	push   %eax
   15cb0:	e8 32 fd ff ff       	call   159e7 <cluster_is_valid>
   15cb5:	83 c4 10             	add    $0x10,%esp
   15cb8:	85 c0                	test   %eax,%eax
   15cba:	75 08                	jne    15cc4 <cluster_alloc_free+0x6d>
                start = curr;
   15cbc:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15cc0:	66 89 45 f2          	mov    %ax,-0xe(%ebp)
            } 
        
            if (cluster_is_valid(pre)) {
   15cc4:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15cc8:	83 ec 0c             	sub    $0xc,%esp
   15ccb:	50                   	push   %eax
   15ccc:	e8 16 fd ff ff       	call   159e7 <cluster_is_valid>
   15cd1:	83 c4 10             	add    $0x10,%esp
   15cd4:	85 c0                	test   %eax,%eax
   15cd6:	74 3b                	je     15d13 <cluster_alloc_free+0xbc>
                int err = cluster_set_next(fat, pre, curr);
   15cd8:	0f b7 55 f4          	movzwl -0xc(%ebp),%edx
   15cdc:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15ce0:	83 ec 04             	sub    $0x4,%esp
   15ce3:	52                   	push   %edx
   15ce4:	50                   	push   %eax
   15ce5:	ff 75 08             	pushl  0x8(%ebp)
   15ce8:	e8 e1 fd ff ff       	call   15ace <cluster_set_next>
   15ced:	83 c4 10             	add    $0x10,%esp
   15cf0:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                if (err < 0) {
   15cf3:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   15cf7:	79 1a                	jns    15d13 <cluster_alloc_free+0xbc>
                    cluster_free_chain(fat, start);
   15cf9:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15cfd:	83 ec 08             	sub    $0x8,%esp
   15d00:	50                   	push   %eax
   15d01:	ff 75 08             	pushl  0x8(%ebp)
   15d04:	e8 f4 fe ff ff       	call   15bfd <cluster_free_chain>
   15d09:	83 c4 10             	add    $0x10,%esp
                    return FAT_CLUSTER_INVALID;
   15d0c:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
   15d11:	eb 6f                	jmp    15d82 <cluster_alloc_free+0x12b>
                }
            }

            pre = curr;
   15d13:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d17:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
            cnt--;
   15d1b:	83 6d 0c 01          	subl   $0x1,0xc(%ebp)
    for (curr = 2; (curr< c_total) && cnt; curr++) {
   15d1f:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d23:	83 c0 01             	add    $0x1,%eax
   15d26:	66 89 45 f4          	mov    %ax,-0xc(%ebp)
   15d2a:	0f b7 45 f4          	movzwl -0xc(%ebp),%eax
   15d2e:	39 45 ec             	cmp    %eax,-0x14(%ebp)
   15d31:	7e 0a                	jle    15d3d <cluster_alloc_free+0xe6>
   15d33:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d37:	0f 85 4d ff ff ff    	jne    15c8a <cluster_alloc_free+0x33>
        }
    }

    if (cnt == 0) {
   15d3d:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15d41:	75 27                	jne    15d6a <cluster_alloc_free+0x113>
        int err = cluster_set_next(fat, pre, FAT_CLUSTER_INVALID);
   15d43:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   15d47:	83 ec 04             	sub    $0x4,%esp
   15d4a:	68 f8 ff 00 00       	push   $0xfff8
   15d4f:	50                   	push   %eax
   15d50:	ff 75 08             	pushl  0x8(%ebp)
   15d53:	e8 76 fd ff ff       	call   15ace <cluster_set_next>
   15d58:	83 c4 10             	add    $0x10,%esp
   15d5b:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err == 0) {
   15d5e:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   15d62:	75 06                	jne    15d6a <cluster_alloc_free+0x113>
            return start;
   15d64:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d68:	eb 18                	jmp    15d82 <cluster_alloc_free+0x12b>
        }
    }

    cluster_free_chain(fat, start);
   15d6a:	0f b7 45 f2          	movzwl -0xe(%ebp),%eax
   15d6e:	83 ec 08             	sub    $0x8,%esp
   15d71:	50                   	push   %eax
   15d72:	ff 75 08             	pushl  0x8(%ebp)
   15d75:	e8 83 fe ff ff       	call   15bfd <cluster_free_chain>
   15d7a:	83 c4 10             	add    $0x10,%esp
    return FAT_CLUSTER_INVALID;
   15d7d:	b8 f8 ff ff ff       	mov    $0xfffffff8,%eax
}
   15d82:	c9                   	leave  
   15d83:	c3                   	ret    

00015d84 <to_sfn>:


static void to_sfn(char* dest, const char* src) {
   15d84:	55                   	push   %ebp
   15d85:	89 e5                	mov    %esp,%ebp
   15d87:	83 ec 18             	sub    $0x18,%esp
    kernel_memset(dest, ' ', SFN_LEN);
   15d8a:	83 ec 04             	sub    $0x4,%esp
   15d8d:	6a 0b                	push   $0xb
   15d8f:	6a 20                	push   $0x20
   15d91:	ff 75 08             	pushl  0x8(%ebp)
   15d94:	e8 e3 26 00 00       	call   1847c <kernel_memset>
   15d99:	83 c4 10             	add    $0x10,%esp

    char * curr = dest;
   15d9c:	8b 45 08             	mov    0x8(%ebp),%eax
   15d9f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * end = dest + SFN_LEN;
   15da2:	8b 45 08             	mov    0x8(%ebp),%eax
   15da5:	83 c0 0b             	add    $0xb,%eax
   15da8:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (*src && (curr < end)) {
   15dab:	eb 49                	jmp    15df6 <to_sfn+0x72>
        char c = *src++;
   15dad:	8b 45 0c             	mov    0xc(%ebp),%eax
   15db0:	8d 50 01             	lea    0x1(%eax),%edx
   15db3:	89 55 0c             	mov    %edx,0xc(%ebp)
   15db6:	0f b6 00             	movzbl (%eax),%eax
   15db9:	88 45 f3             	mov    %al,-0xd(%ebp)

        switch (c) {
   15dbc:	0f be 45 f3          	movsbl -0xd(%ebp),%eax
   15dc0:	83 f8 2e             	cmp    $0x2e,%eax
   15dc3:	75 0b                	jne    15dd0 <to_sfn+0x4c>
        case '.':      
            curr = dest + 8;
   15dc5:	8b 45 08             	mov    0x8(%ebp),%eax
   15dc8:	83 c0 08             	add    $0x8,%eax
   15dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   15dce:	eb 26                	jmp    15df6 <to_sfn+0x72>
        default:
            if ((c >= 'a') && (c <= 'z')) {
   15dd0:	80 7d f3 60          	cmpb   $0x60,-0xd(%ebp)
   15dd4:	7e 10                	jle    15de6 <to_sfn+0x62>
   15dd6:	80 7d f3 7a          	cmpb   $0x7a,-0xd(%ebp)
   15dda:	7f 0a                	jg     15de6 <to_sfn+0x62>
                c = c - 'a' + 'A';
   15ddc:	0f b6 45 f3          	movzbl -0xd(%ebp),%eax
   15de0:	83 e8 20             	sub    $0x20,%eax
   15de3:	88 45 f3             	mov    %al,-0xd(%ebp)
            }
            *curr++ = c;
   15de6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15de9:	8d 50 01             	lea    0x1(%eax),%edx
   15dec:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15def:	0f b6 55 f3          	movzbl -0xd(%ebp),%edx
   15df3:	88 10                	mov    %dl,(%eax)
            break;
   15df5:	90                   	nop
    while (*src && (curr < end)) {
   15df6:	8b 45 0c             	mov    0xc(%ebp),%eax
   15df9:	0f b6 00             	movzbl (%eax),%eax
   15dfc:	84 c0                	test   %al,%al
   15dfe:	74 08                	je     15e08 <to_sfn+0x84>
   15e00:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15e03:	3b 45 ec             	cmp    -0x14(%ebp),%eax
   15e06:	72 a5                	jb     15dad <to_sfn+0x29>
        }
    }
}
   15e08:	90                   	nop
   15e09:	c9                   	leave  
   15e0a:	c3                   	ret    

00015e0b <diritem_name_match>:


int diritem_name_match (diritem_t * item, const char * path) {
   15e0b:	55                   	push   %ebp
   15e0c:	89 e5                	mov    %esp,%ebp
   15e0e:	83 ec 18             	sub    $0x18,%esp
    char buf[SFN_LEN];
    to_sfn(buf, path);
   15e11:	83 ec 08             	sub    $0x8,%esp
   15e14:	ff 75 0c             	pushl  0xc(%ebp)
   15e17:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e1a:	50                   	push   %eax
   15e1b:	e8 64 ff ff ff       	call   15d84 <to_sfn>
   15e20:	83 c4 10             	add    $0x10,%esp
    return kernel_memcmp(buf, item->DIR_Name, SFN_LEN) == 0;
   15e23:	8b 45 08             	mov    0x8(%ebp),%eax
   15e26:	83 ec 04             	sub    $0x4,%esp
   15e29:	6a 0b                	push   $0xb
   15e2b:	50                   	push   %eax
   15e2c:	8d 45 ed             	lea    -0x13(%ebp),%eax
   15e2f:	50                   	push   %eax
   15e30:	e8 88 26 00 00       	call   184bd <kernel_memcmp>
   15e35:	83 c4 10             	add    $0x10,%esp
   15e38:	85 c0                	test   %eax,%eax
   15e3a:	0f 94 c0             	sete   %al
   15e3d:	0f b6 c0             	movzbl %al,%eax
}
   15e40:	c9                   	leave  
   15e41:	c3                   	ret    

00015e42 <diritem_init>:


int diritem_init(diritem_t * item, uint8_t attr,const char * name) {
   15e42:	55                   	push   %ebp
   15e43:	89 e5                	mov    %esp,%ebp
   15e45:	83 ec 18             	sub    $0x18,%esp
   15e48:	8b 45 0c             	mov    0xc(%ebp),%eax
   15e4b:	88 45 f4             	mov    %al,-0xc(%ebp)
    to_sfn((char *)item->DIR_Name, name);
   15e4e:	8b 45 08             	mov    0x8(%ebp),%eax
   15e51:	83 ec 08             	sub    $0x8,%esp
   15e54:	ff 75 10             	pushl  0x10(%ebp)
   15e57:	50                   	push   %eax
   15e58:	e8 27 ff ff ff       	call   15d84 <to_sfn>
   15e5d:	83 c4 10             	add    $0x10,%esp
    item->DIR_FstClusHI = (uint16_t )(FAT_CLUSTER_INVALID >> 16);
   15e60:	8b 45 08             	mov    0x8(%ebp),%eax
   15e63:	66 c7 40 14 00 00    	movw   $0x0,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(FAT_CLUSTER_INVALID & 0xFFFF);
   15e69:	8b 45 08             	mov    0x8(%ebp),%eax
   15e6c:	66 c7 40 1a f8 ff    	movw   $0xfff8,0x1a(%eax)
    item->DIR_FileSize = 0;
   15e72:	8b 45 08             	mov    0x8(%ebp),%eax
   15e75:	c7 40 1c 00 00 00 00 	movl   $0x0,0x1c(%eax)
    item->DIR_Attr = attr;
   15e7c:	8b 45 08             	mov    0x8(%ebp),%eax
   15e7f:	0f b6 55 f4          	movzbl -0xc(%ebp),%edx
   15e83:	88 50 0b             	mov    %dl,0xb(%eax)
    item->DIR_NTRes = 0;
   15e86:	8b 45 08             	mov    0x8(%ebp),%eax
   15e89:	c6 40 0c 00          	movb   $0x0,0xc(%eax)

    item->DIR_CrtTime = 0;
   15e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   15e90:	66 c7 40 0e 00 00    	movw   $0x0,0xe(%eax)
    item->DIR_CrtDate = 0;
   15e96:	8b 45 08             	mov    0x8(%ebp),%eax
   15e99:	66 c7 40 10 00 00    	movw   $0x0,0x10(%eax)
    item->DIR_WrtTime = item->DIR_CrtTime;
   15e9f:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea2:	0f b7 50 0e          	movzwl 0xe(%eax),%edx
   15ea6:	8b 45 08             	mov    0x8(%ebp),%eax
   15ea9:	66 89 50 16          	mov    %dx,0x16(%eax)
    item->DIR_WrtDate = item->DIR_CrtDate;
   15ead:	8b 45 08             	mov    0x8(%ebp),%eax
   15eb0:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15eb4:	8b 45 08             	mov    0x8(%ebp),%eax
   15eb7:	66 89 50 18          	mov    %dx,0x18(%eax)
    item->DIR_LastAccDate = item->DIR_CrtDate;
   15ebb:	8b 45 08             	mov    0x8(%ebp),%eax
   15ebe:	0f b7 50 10          	movzwl 0x10(%eax),%edx
   15ec2:	8b 45 08             	mov    0x8(%ebp),%eax
   15ec5:	66 89 50 12          	mov    %dx,0x12(%eax)
    return 0;
   15ec9:	b8 00 00 00 00       	mov    $0x0,%eax
}
   15ece:	c9                   	leave  
   15ecf:	c3                   	ret    

00015ed0 <diritem_get_name>:


void diritem_get_name (diritem_t * item, char * dest) {
   15ed0:	55                   	push   %ebp
   15ed1:	89 e5                	mov    %esp,%ebp
   15ed3:	83 ec 18             	sub    $0x18,%esp
    char * c = dest;
   15ed6:	8b 45 0c             	mov    0xc(%ebp),%eax
   15ed9:	89 45 f4             	mov    %eax,-0xc(%ebp)
    char * ext = (char *)0;
   15edc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)

    kernel_memset(dest, 0, SFN_LEN + 1);     
   15ee3:	83 ec 04             	sub    $0x4,%esp
   15ee6:	6a 0c                	push   $0xc
   15ee8:	6a 00                	push   $0x0
   15eea:	ff 75 0c             	pushl  0xc(%ebp)
   15eed:	e8 8a 25 00 00       	call   1847c <kernel_memset>
   15ef2:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < 11; i++) {
   15ef5:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   15efc:	eb 43                	jmp    15f41 <diritem_get_name+0x71>
        if (item->DIR_Name[i] != ' ') {
   15efe:	8b 55 08             	mov    0x8(%ebp),%edx
   15f01:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f04:	01 d0                	add    %edx,%eax
   15f06:	0f b6 00             	movzbl (%eax),%eax
   15f09:	3c 20                	cmp    $0x20,%al
   15f0b:	74 18                	je     15f25 <diritem_get_name+0x55>
            *c++ = item->DIR_Name[i];
   15f0d:	8b 55 08             	mov    0x8(%ebp),%edx
   15f10:	8b 45 ec             	mov    -0x14(%ebp),%eax
   15f13:	01 d0                	add    %edx,%eax
   15f15:	0f b6 08             	movzbl (%eax),%ecx
   15f18:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f1b:	8d 50 01             	lea    0x1(%eax),%edx
   15f1e:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f21:	89 ca                	mov    %ecx,%edx
   15f23:	88 10                	mov    %dl,(%eax)
        }

        if (i == 7) {
   15f25:	83 7d ec 07          	cmpl   $0x7,-0x14(%ebp)
   15f29:	75 12                	jne    15f3d <diritem_get_name+0x6d>
            ext = c;
   15f2b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f2e:	89 45 f0             	mov    %eax,-0x10(%ebp)
            *c++ = '.';
   15f31:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15f34:	8d 50 01             	lea    0x1(%eax),%edx
   15f37:	89 55 f4             	mov    %edx,-0xc(%ebp)
   15f3a:	c6 00 2e             	movb   $0x2e,(%eax)
    for (int i = 0; i < 11; i++) {
   15f3d:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   15f41:	83 7d ec 0a          	cmpl   $0xa,-0x14(%ebp)
   15f45:	7e b7                	jle    15efe <diritem_get_name+0x2e>
        }
    }

    if (ext && (ext[1] == '\0')) {
   15f47:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15f4b:	74 13                	je     15f60 <diritem_get_name+0x90>
   15f4d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f50:	83 c0 01             	add    $0x1,%eax
   15f53:	0f b6 00             	movzbl (%eax),%eax
   15f56:	84 c0                	test   %al,%al
   15f58:	75 06                	jne    15f60 <diritem_get_name+0x90>
        ext[0] = '\0';
   15f5a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   15f5d:	c6 00 00             	movb   $0x0,(%eax)
    }
}
   15f60:	90                   	nop
   15f61:	c9                   	leave  
   15f62:	c3                   	ret    

00015f63 <diritem_get_type>:


file_type_t diritem_get_type (diritem_t * item) {
   15f63:	55                   	push   %ebp
   15f64:	89 e5                	mov    %esp,%ebp
   15f66:	83 ec 10             	sub    $0x10,%esp
    file_type_t type = FILE_UNKNOWN;
   15f69:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (item->DIR_Attr & (DIRITEM_ATTR_VOLUME_ID | DIRITEM_ATTR_HIDDEN | DIRITEM_ATTR_SYSTEM)) {
   15f70:	8b 45 08             	mov    0x8(%ebp),%eax
   15f73:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15f77:	0f b6 c0             	movzbl %al,%eax
   15f7a:	83 e0 0e             	and    $0xe,%eax
   15f7d:	85 c0                	test   %eax,%eax
   15f7f:	74 07                	je     15f88 <diritem_get_type+0x25>
        return FILE_UNKNOWN;
   15f81:	b8 00 00 00 00       	mov    $0x0,%eax
   15f86:	eb 1d                	jmp    15fa5 <diritem_get_type+0x42>
    }

    return item->DIR_Attr & DIRITEM_ATTR_DIRECTORY ? FILE_DIR : FILE_NORMAL;
   15f88:	8b 45 08             	mov    0x8(%ebp),%eax
   15f8b:	0f b6 40 0b          	movzbl 0xb(%eax),%eax
   15f8f:	0f b6 c0             	movzbl %al,%eax
   15f92:	83 e0 10             	and    $0x10,%eax
   15f95:	85 c0                	test   %eax,%eax
   15f97:	74 07                	je     15fa0 <diritem_get_type+0x3d>
   15f99:	b8 03 00 00 00       	mov    $0x3,%eax
   15f9e:	eb 05                	jmp    15fa5 <diritem_get_type+0x42>
   15fa0:	b8 02 00 00 00       	mov    $0x2,%eax
}
   15fa5:	c9                   	leave  
   15fa6:	c3                   	ret    

00015fa7 <read_dir_entry>:


static diritem_t * read_dir_entry (fat_t * fat, int index) {
   15fa7:	55                   	push   %ebp
   15fa8:	89 e5                	mov    %esp,%ebp
   15faa:	53                   	push   %ebx
   15fab:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   15fae:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   15fb2:	78 0d                	js     15fc1 <read_dir_entry+0x1a>
   15fb4:	8b 45 08             	mov    0x8(%ebp),%eax
   15fb7:	8b 50 14             	mov    0x14(%eax),%edx
   15fba:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fbd:	39 c2                	cmp    %eax,%edx
   15fbf:	77 07                	ja     15fc8 <read_dir_entry+0x21>
        return (diritem_t *)0;
   15fc1:	b8 00 00 00 00       	mov    $0x0,%eax
   15fc6:	eb 5a                	jmp    16022 <read_dir_entry+0x7b>
    }

    int offset = index * sizeof(diritem_t);
   15fc8:	8b 45 0c             	mov    0xc(%ebp),%eax
   15fcb:	c1 e0 05             	shl    $0x5,%eax
   15fce:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int err = bread_sector(fat, fat->root_start + offset / fat->bytes_per_sec);
   15fd1:	8b 45 08             	mov    0x8(%ebp),%eax
   15fd4:	8b 48 18             	mov    0x18(%eax),%ecx
   15fd7:	8b 45 f4             	mov    -0xc(%ebp),%eax
   15fda:	8b 55 08             	mov    0x8(%ebp),%edx
   15fdd:	8b 5a 0c             	mov    0xc(%edx),%ebx
   15fe0:	ba 00 00 00 00       	mov    $0x0,%edx
   15fe5:	f7 f3                	div    %ebx
   15fe7:	01 c8                	add    %ecx,%eax
   15fe9:	83 ec 08             	sub    $0x8,%esp
   15fec:	50                   	push   %eax
   15fed:	ff 75 08             	pushl  0x8(%ebp)
   15ff0:	e8 5b f9 ff ff       	call   15950 <bread_sector>
   15ff5:	83 c4 10             	add    $0x10,%esp
   15ff8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (err < 0) {
   15ffb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   15fff:	79 07                	jns    16008 <read_dir_entry+0x61>
        return (diritem_t *)0;
   16001:	b8 00 00 00 00       	mov    $0x0,%eax
   16006:	eb 1a                	jmp    16022 <read_dir_entry+0x7b>
    }
    return (diritem_t *)(fat->fat_buffer + offset % fat->bytes_per_sec);
   16008:	8b 45 08             	mov    0x8(%ebp),%eax
   1600b:	8b 48 24             	mov    0x24(%eax),%ecx
   1600e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16011:	8b 55 08             	mov    0x8(%ebp),%edx
   16014:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16017:	ba 00 00 00 00       	mov    $0x0,%edx
   1601c:	f7 f3                	div    %ebx
   1601e:	89 d0                	mov    %edx,%eax
   16020:	01 c8                	add    %ecx,%eax
}
   16022:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16025:	c9                   	leave  
   16026:	c3                   	ret    

00016027 <write_dir_entry>:


static int write_dir_entry (fat_t * fat, diritem_t * item, int index) {
   16027:	55                   	push   %ebp
   16028:	89 e5                	mov    %esp,%ebp
   1602a:	53                   	push   %ebx
   1602b:	83 ec 14             	sub    $0x14,%esp
    if ((index < 0) || (index >= fat->root_ent_cnt)) {
   1602e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16032:	78 0d                	js     16041 <write_dir_entry+0x1a>
   16034:	8b 45 08             	mov    0x8(%ebp),%eax
   16037:	8b 50 14             	mov    0x14(%eax),%edx
   1603a:	8b 45 10             	mov    0x10(%ebp),%eax
   1603d:	39 c2                	cmp    %eax,%edx
   1603f:	77 0a                	ja     1604b <write_dir_entry+0x24>
        return -1;
   16041:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16046:	e9 81 00 00 00       	jmp    160cc <write_dir_entry+0xa5>
    }

    int offset = index * sizeof(diritem_t);
   1604b:	8b 45 10             	mov    0x10(%ebp),%eax
   1604e:	c1 e0 05             	shl    $0x5,%eax
   16051:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int sector = fat->root_start + offset / fat->bytes_per_sec;
   16054:	8b 45 08             	mov    0x8(%ebp),%eax
   16057:	8b 48 18             	mov    0x18(%eax),%ecx
   1605a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1605d:	8b 55 08             	mov    0x8(%ebp),%edx
   16060:	8b 5a 0c             	mov    0xc(%edx),%ebx
   16063:	ba 00 00 00 00       	mov    $0x0,%edx
   16068:	f7 f3                	div    %ebx
   1606a:	01 c8                	add    %ecx,%eax
   1606c:	89 45 f0             	mov    %eax,-0x10(%ebp)
    int err = bread_sector(fat, sector);
   1606f:	83 ec 08             	sub    $0x8,%esp
   16072:	ff 75 f0             	pushl  -0x10(%ebp)
   16075:	ff 75 08             	pushl  0x8(%ebp)
   16078:	e8 d3 f8 ff ff       	call   15950 <bread_sector>
   1607d:	83 c4 10             	add    $0x10,%esp
   16080:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (err < 0) {
   16083:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16087:	79 07                	jns    16090 <write_dir_entry+0x69>
        return -1;
   16089:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1608e:	eb 3c                	jmp    160cc <write_dir_entry+0xa5>
    }
    kernel_memcpy(fat->fat_buffer + offset % fat->bytes_per_sec, item, sizeof(diritem_t));
   16090:	8b 45 08             	mov    0x8(%ebp),%eax
   16093:	8b 48 24             	mov    0x24(%eax),%ecx
   16096:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16099:	8b 55 08             	mov    0x8(%ebp),%edx
   1609c:	8b 5a 0c             	mov    0xc(%edx),%ebx
   1609f:	ba 00 00 00 00       	mov    $0x0,%edx
   160a4:	f7 f3                	div    %ebx
   160a6:	89 d0                	mov    %edx,%eax
   160a8:	01 c8                	add    %ecx,%eax
   160aa:	83 ec 04             	sub    $0x4,%esp
   160ad:	6a 20                	push   $0x20
   160af:	ff 75 0c             	pushl  0xc(%ebp)
   160b2:	50                   	push   %eax
   160b3:	e8 75 23 00 00       	call   1842d <kernel_memcpy>
   160b8:	83 c4 10             	add    $0x10,%esp
    return bwrite_secotr(fat, sector);
   160bb:	83 ec 08             	sub    $0x8,%esp
   160be:	ff 75 f0             	pushl  -0x10(%ebp)
   160c1:	ff 75 08             	pushl  0x8(%ebp)
   160c4:	e8 e0 f8 ff ff       	call   159a9 <bwrite_secotr>
   160c9:	83 c4 10             	add    $0x10,%esp
}
   160cc:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   160cf:	c9                   	leave  
   160d0:	c3                   	ret    

000160d1 <expand_file>:



static int expand_file(file_t * file, int inc_bytes) {
   160d1:	55                   	push   %ebp
   160d2:	89 e5                	mov    %esp,%ebp
   160d4:	53                   	push   %ebx
   160d5:	83 ec 24             	sub    $0x24,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   160d8:	8b 45 08             	mov    0x8(%ebp),%eax
   160db:	8b 40 44             	mov    0x44(%eax),%eax
   160de:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   160e4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    
    int cluster_cnt;
    if ((file->size == 0) || (file->size % fat->cluster_byte_size == 0)) {
   160e7:	8b 45 08             	mov    0x8(%ebp),%eax
   160ea:	8b 40 24             	mov    0x24(%eax),%eax
   160ed:	85 c0                	test   %eax,%eax
   160ef:	74 19                	je     1610a <expand_file+0x39>
   160f1:	8b 45 08             	mov    0x8(%ebp),%eax
   160f4:	8b 40 24             	mov    0x24(%eax),%eax
   160f7:	8b 55 f0             	mov    -0x10(%ebp),%edx
   160fa:	8b 4a 20             	mov    0x20(%edx),%ecx
   160fd:	ba 00 00 00 00       	mov    $0x0,%edx
   16102:	f7 f1                	div    %ecx
   16104:	89 d0                	mov    %edx,%eax
   16106:	85 c0                	test   %eax,%eax
   16108:	75 29                	jne    16133 <expand_file+0x62>
        cluster_cnt = up2(inc_bytes, fat->cluster_byte_size) / fat->cluster_byte_size; 
   1610a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1610d:	8b 50 20             	mov    0x20(%eax),%edx
   16110:	8b 45 0c             	mov    0xc(%ebp),%eax
   16113:	52                   	push   %edx
   16114:	50                   	push   %eax
   16115:	e8 1f f8 ff ff       	call   15939 <up2>
   1611a:	83 c4 08             	add    $0x8,%esp
   1611d:	89 c1                	mov    %eax,%ecx
   1611f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16122:	8b 58 20             	mov    0x20(%eax),%ebx
   16125:	89 c8                	mov    %ecx,%eax
   16127:	ba 00 00 00 00       	mov    $0x0,%edx
   1612c:	f7 f3                	div    %ebx
   1612e:	89 45 f4             	mov    %eax,-0xc(%ebp)
   16131:	eb 6f                	jmp    161a2 <expand_file+0xd1>
    } else {
 
        int cfree = fat->cluster_byte_size - (file->size % fat->cluster_byte_size);
   16133:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16136:	8b 48 20             	mov    0x20(%eax),%ecx
   16139:	8b 45 08             	mov    0x8(%ebp),%eax
   1613c:	8b 40 24             	mov    0x24(%eax),%eax
   1613f:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16142:	8b 5a 20             	mov    0x20(%edx),%ebx
   16145:	ba 00 00 00 00       	mov    $0x0,%edx
   1614a:	f7 f3                	div    %ebx
   1614c:	89 d0                	mov    %edx,%eax
   1614e:	29 c1                	sub    %eax,%ecx
   16150:	89 c8                	mov    %ecx,%eax
   16152:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (cfree >= inc_bytes) {
   16155:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16158:	3b 45 0c             	cmp    0xc(%ebp),%eax
   1615b:	7c 1b                	jl     16178 <expand_file+0xa7>
            file->size += inc_bytes;
   1615d:	8b 45 08             	mov    0x8(%ebp),%eax
   16160:	8b 50 24             	mov    0x24(%eax),%edx
   16163:	8b 45 0c             	mov    0xc(%ebp),%eax
   16166:	01 c2                	add    %eax,%edx
   16168:	8b 45 08             	mov    0x8(%ebp),%eax
   1616b:	89 50 24             	mov    %edx,0x24(%eax)
            return 0;
   1616e:	b8 00 00 00 00       	mov    $0x0,%eax
   16173:	e9 cd 00 00 00       	jmp    16245 <expand_file+0x174>
        }

        cluster_cnt = up2(inc_bytes - cfree, fat->cluster_byte_size) / fat->cluster_byte_size; 
   16178:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1617b:	8b 40 20             	mov    0x20(%eax),%eax
   1617e:	8b 55 0c             	mov    0xc(%ebp),%edx
   16181:	2b 55 ec             	sub    -0x14(%ebp),%edx
   16184:	50                   	push   %eax
   16185:	52                   	push   %edx
   16186:	e8 ae f7 ff ff       	call   15939 <up2>
   1618b:	83 c4 08             	add    $0x8,%esp
   1618e:	89 c1                	mov    %eax,%ecx
   16190:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16193:	8b 58 20             	mov    0x20(%eax),%ebx
   16196:	89 c8                	mov    %ecx,%eax
   16198:	ba 00 00 00 00       	mov    $0x0,%edx
   1619d:	f7 f3                	div    %ebx
   1619f:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    cluster_t start = cluster_alloc_free(fat, cluster_cnt);
   161a2:	83 ec 08             	sub    $0x8,%esp
   161a5:	ff 75 f4             	pushl  -0xc(%ebp)
   161a8:	ff 75 f0             	pushl  -0x10(%ebp)
   161ab:	e8 a7 fa ff ff       	call   15c57 <cluster_alloc_free>
   161b0:	83 c4 10             	add    $0x10,%esp
   161b3:	66 89 45 ea          	mov    %ax,-0x16(%ebp)
    if (!cluster_is_valid(start)) {
   161b7:	0f b7 45 ea          	movzwl -0x16(%ebp),%eax
   161bb:	83 ec 0c             	sub    $0xc,%esp
   161be:	50                   	push   %eax
   161bf:	e8 23 f8 ff ff       	call   159e7 <cluster_is_valid>
   161c4:	83 c4 10             	add    $0x10,%esp
   161c7:	85 c0                	test   %eax,%eax
   161c9:	75 17                	jne    161e2 <expand_file+0x111>
        log_printf("no cluster for file write");
   161cb:	83 ec 0c             	sub    $0xc,%esp
   161ce:	68 fa 9a 01 00       	push   $0x19afa
   161d3:	e8 4e 28 00 00       	call   18a26 <log_printf>
   161d8:	83 c4 10             	add    $0x10,%esp
        return -1;
   161db:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   161e0:	eb 63                	jmp    16245 <expand_file+0x174>
    }

    if (!cluster_is_valid(file->sblk)) {
   161e2:	8b 45 08             	mov    0x8(%ebp),%eax
   161e5:	8b 40 34             	mov    0x34(%eax),%eax
   161e8:	0f b7 c0             	movzwl %ax,%eax
   161eb:	83 ec 0c             	sub    $0xc,%esp
   161ee:	50                   	push   %eax
   161ef:	e8 f3 f7 ff ff       	call   159e7 <cluster_is_valid>
   161f4:	83 c4 10             	add    $0x10,%esp
   161f7:	85 c0                	test   %eax,%eax
   161f9:	75 18                	jne    16213 <expand_file+0x142>
        file->cblk = file->sblk = start;
   161fb:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   161ff:	8b 45 08             	mov    0x8(%ebp),%eax
   16202:	89 50 34             	mov    %edx,0x34(%eax)
   16205:	8b 45 08             	mov    0x8(%ebp),%eax
   16208:	8b 50 34             	mov    0x34(%eax),%edx
   1620b:	8b 45 08             	mov    0x8(%ebp),%eax
   1620e:	89 50 38             	mov    %edx,0x38(%eax)
   16211:	eb 2d                	jmp    16240 <expand_file+0x16f>
    } else {
        
        int err = cluster_set_next(fat, file->cblk, start);
   16213:	0f b7 55 ea          	movzwl -0x16(%ebp),%edx
   16217:	8b 45 08             	mov    0x8(%ebp),%eax
   1621a:	8b 40 38             	mov    0x38(%eax),%eax
   1621d:	0f b7 c0             	movzwl %ax,%eax
   16220:	83 ec 04             	sub    $0x4,%esp
   16223:	52                   	push   %edx
   16224:	50                   	push   %eax
   16225:	ff 75 f0             	pushl  -0x10(%ebp)
   16228:	e8 a1 f8 ff ff       	call   15ace <cluster_set_next>
   1622d:	83 c4 10             	add    $0x10,%esp
   16230:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (err < 0) {
   16233:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   16237:	79 07                	jns    16240 <expand_file+0x16f>
            return -1;
   16239:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1623e:	eb 05                	jmp    16245 <expand_file+0x174>
        }
    }

    return 0;
   16240:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16245:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16248:	c9                   	leave  
   16249:	c3                   	ret    

0001624a <move_file_pos>:


static int move_file_pos(file_t* file, fat_t * fat, uint32_t move_bytes, int expand) {
   1624a:	55                   	push   %ebp
   1624b:	89 e5                	mov    %esp,%ebp
   1624d:	83 ec 18             	sub    $0x18,%esp
	uint32_t c_offset = file->pos % fat->cluster_byte_size;
   16250:	8b 45 08             	mov    0x8(%ebp),%eax
   16253:	8b 40 30             	mov    0x30(%eax),%eax
   16256:	89 c2                	mov    %eax,%edx
   16258:	8b 45 0c             	mov    0xc(%ebp),%eax
   1625b:	8b 48 20             	mov    0x20(%eax),%ecx
   1625e:	89 d0                	mov    %edx,%eax
   16260:	ba 00 00 00 00       	mov    $0x0,%edx
   16265:	f7 f1                	div    %ecx
   16267:	89 55 f0             	mov    %edx,-0x10(%ebp)

	if (c_offset + move_bytes >= fat->cluster_byte_size) {
   1626a:	8b 55 f0             	mov    -0x10(%ebp),%edx
   1626d:	8b 45 10             	mov    0x10(%ebp),%eax
   16270:	01 c2                	add    %eax,%edx
   16272:	8b 45 0c             	mov    0xc(%ebp),%eax
   16275:	8b 40 20             	mov    0x20(%eax),%eax
   16278:	39 c2                	cmp    %eax,%edx
   1627a:	72 74                	jb     162f0 <move_file_pos+0xa6>
        cluster_t next = cluster_get_next(fat, file->cblk);
   1627c:	8b 45 08             	mov    0x8(%ebp),%eax
   1627f:	8b 40 38             	mov    0x38(%eax),%eax
   16282:	0f b7 c0             	movzwl %ax,%eax
   16285:	83 ec 08             	sub    $0x8,%esp
   16288:	50                   	push   %eax
   16289:	ff 75 0c             	pushl  0xc(%ebp)
   1628c:	e8 7f f7 ff ff       	call   15a10 <cluster_get_next>
   16291:	83 c4 10             	add    $0x10,%esp
   16294:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
		if ((next == FAT_CLUSTER_INVALID) && expand) {
   16298:	66 83 7d f6 f8       	cmpw   $0xfff8,-0xa(%ebp)
   1629d:	75 47                	jne    162e6 <move_file_pos+0x9c>
   1629f:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   162a3:	74 41                	je     162e6 <move_file_pos+0x9c>
            int err = expand_file(file, fat->cluster_byte_size);
   162a5:	8b 45 0c             	mov    0xc(%ebp),%eax
   162a8:	8b 40 20             	mov    0x20(%eax),%eax
   162ab:	83 ec 08             	sub    $0x8,%esp
   162ae:	50                   	push   %eax
   162af:	ff 75 08             	pushl  0x8(%ebp)
   162b2:	e8 1a fe ff ff       	call   160d1 <expand_file>
   162b7:	83 c4 10             	add    $0x10,%esp
   162ba:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if (err < 0) {
   162bd:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   162c1:	79 07                	jns    162ca <move_file_pos+0x80>
                return -1;
   162c3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   162c8:	eb 40                	jmp    1630a <move_file_pos+0xc0>
            }

            next = cluster_get_next(fat, file->cblk);
   162ca:	8b 45 08             	mov    0x8(%ebp),%eax
   162cd:	8b 40 38             	mov    0x38(%eax),%eax
   162d0:	0f b7 c0             	movzwl %ax,%eax
   162d3:	83 ec 08             	sub    $0x8,%esp
   162d6:	50                   	push   %eax
   162d7:	ff 75 0c             	pushl  0xc(%ebp)
   162da:	e8 31 f7 ff ff       	call   15a10 <cluster_get_next>
   162df:	83 c4 10             	add    $0x10,%esp
   162e2:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        }

        file->cblk = next;
   162e6:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   162ea:	8b 45 08             	mov    0x8(%ebp),%eax
   162ed:	89 50 38             	mov    %edx,0x38(%eax)
	}

	file->pos += move_bytes;
   162f0:	8b 45 08             	mov    0x8(%ebp),%eax
   162f3:	8b 40 30             	mov    0x30(%eax),%eax
   162f6:	89 c2                	mov    %eax,%edx
   162f8:	8b 45 10             	mov    0x10(%ebp),%eax
   162fb:	01 d0                	add    %edx,%eax
   162fd:	89 c2                	mov    %eax,%edx
   162ff:	8b 45 08             	mov    0x8(%ebp),%eax
   16302:	89 50 30             	mov    %edx,0x30(%eax)
	return 0;
   16305:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1630a:	c9                   	leave  
   1630b:	c3                   	ret    

0001630c <fatfs_mount>:


int fatfs_mount (struct _fs_t * fs, int dev_major, int dev_minor) {
   1630c:	55                   	push   %ebp
   1630d:	89 e5                	mov    %esp,%ebp
   1630f:	83 ec 18             	sub    $0x18,%esp
    int dev_id = dev_open(dev_major, dev_minor, (void *)0);
   16312:	83 ec 04             	sub    $0x4,%esp
   16315:	6a 00                	push   $0x0
   16317:	ff 75 10             	pushl  0x10(%ebp)
   1631a:	ff 75 0c             	pushl  0xc(%ebp)
   1631d:	e8 62 db ff ff       	call   13e84 <dev_open>
   16322:	83 c4 10             	add    $0x10,%esp
   16325:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (dev_id < 0) {
   16328:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1632c:	79 20                	jns    1634e <fatfs_mount+0x42>
        log_printf("open disk failed. major: %x, minor: %x", dev_major, dev_minor);
   1632e:	83 ec 04             	sub    $0x4,%esp
   16331:	ff 75 10             	pushl  0x10(%ebp)
   16334:	ff 75 0c             	pushl  0xc(%ebp)
   16337:	68 14 9b 01 00       	push   $0x19b14
   1633c:	e8 e5 26 00 00       	call   18a26 <log_printf>
   16341:	83 c4 10             	add    $0x10,%esp
        return -1;
   16344:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16349:	e9 fb 01 00 00       	jmp    16549 <fatfs_mount+0x23d>
    }

    dbr_t * dbr = (dbr_t *)memory_alloc_page();
   1634e:	e8 1c a9 ff ff       	call   10c6f <memory_alloc_page>
   16353:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (!dbr) {
   16356:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1635a:	75 15                	jne    16371 <fatfs_mount+0x65>
        log_printf("mount fat failed: can't alloc buf.");
   1635c:	83 ec 0c             	sub    $0xc,%esp
   1635f:	68 3c 9b 01 00       	push   $0x19b3c
   16364:	e8 bd 26 00 00       	call   18a26 <log_printf>
   16369:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   1636c:	e9 b0 01 00 00       	jmp    16521 <fatfs_mount+0x215>
    }

    int cnt = dev_read(dev_id, 0, (char *)dbr, 1);
   16371:	6a 01                	push   $0x1
   16373:	ff 75 f0             	pushl  -0x10(%ebp)
   16376:	6a 00                	push   $0x0
   16378:	ff 75 f4             	pushl  -0xc(%ebp)
   1637b:	e8 50 dc ff ff       	call   13fd0 <dev_read>
   16380:	83 c4 10             	add    $0x10,%esp
   16383:	89 45 ec             	mov    %eax,-0x14(%ebp)
    if (cnt < 1) {
   16386:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   1638a:	7f 15                	jg     163a1 <fatfs_mount+0x95>
        log_printf("read dbr failed.");
   1638c:	83 ec 0c             	sub    $0xc,%esp
   1638f:	68 5f 9b 01 00       	push   $0x19b5f
   16394:	e8 8d 26 00 00       	call   18a26 <log_printf>
   16399:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   1639c:	e9 80 01 00 00       	jmp    16521 <fatfs_mount+0x215>
    }

    fat_t * fat = &fs->fat_data;
   163a1:	8b 45 08             	mov    0x8(%ebp),%eax
   163a4:	05 18 02 00 00       	add    $0x218,%eax
   163a9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    fat->fat_buffer = (uint8_t *)dbr;
   163ac:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163af:	8b 55 f0             	mov    -0x10(%ebp),%edx
   163b2:	89 50 24             	mov    %edx,0x24(%eax)
    fat->bytes_per_sec = dbr->BPB_BytsPerSec;
   163b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163b8:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   163bc:	0f b7 d0             	movzwl %ax,%edx
   163bf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163c2:	89 50 0c             	mov    %edx,0xc(%eax)
    fat->tbl_start = dbr->BPB_RsvdSecCnt;
   163c5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163c8:	0f b7 40 0e          	movzwl 0xe(%eax),%eax
   163cc:	0f b7 d0             	movzwl %ax,%edx
   163cf:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163d2:	89 10                	mov    %edx,(%eax)
    fat->tbl_sectors = dbr->BPB_FATSz16;
   163d4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163d7:	0f b7 40 16          	movzwl 0x16(%eax),%eax
   163db:	0f b7 d0             	movzwl %ax,%edx
   163de:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163e1:	89 50 08             	mov    %edx,0x8(%eax)
    fat->tbl_cnt = dbr->BPB_NumFATs;
   163e4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163e7:	0f b6 40 10          	movzbl 0x10(%eax),%eax
   163eb:	0f b6 d0             	movzbl %al,%edx
   163ee:	8b 45 e8             	mov    -0x18(%ebp),%eax
   163f1:	89 50 04             	mov    %edx,0x4(%eax)
    fat->root_ent_cnt = dbr->BPB_RootEntCnt;
   163f4:	8b 45 f0             	mov    -0x10(%ebp),%eax
   163f7:	0f b7 40 11          	movzwl 0x11(%eax),%eax
   163fb:	0f b7 d0             	movzwl %ax,%edx
   163fe:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16401:	89 50 14             	mov    %edx,0x14(%eax)
    fat->sec_per_cluster = dbr->BPB_SecPerClus;
   16404:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16407:	0f b6 40 0d          	movzbl 0xd(%eax),%eax
   1640b:	0f b6 d0             	movzbl %al,%edx
   1640e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16411:	89 50 10             	mov    %edx,0x10(%eax)
    fat->cluster_byte_size = fat->sec_per_cluster * dbr->BPB_BytsPerSec;
   16414:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16417:	8b 50 10             	mov    0x10(%eax),%edx
   1641a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1641d:	0f b7 40 0b          	movzwl 0xb(%eax),%eax
   16421:	0f b7 c0             	movzwl %ax,%eax
   16424:	0f af d0             	imul   %eax,%edx
   16427:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1642a:	89 50 20             	mov    %edx,0x20(%eax)
	fat->root_start = fat->tbl_start + fat->tbl_sectors * fat->tbl_cnt;
   1642d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16430:	8b 10                	mov    (%eax),%edx
   16432:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16435:	8b 48 08             	mov    0x8(%eax),%ecx
   16438:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1643b:	8b 40 04             	mov    0x4(%eax),%eax
   1643e:	0f af c1             	imul   %ecx,%eax
   16441:	01 c2                	add    %eax,%edx
   16443:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16446:	89 50 18             	mov    %edx,0x18(%eax)
    fat->data_start = fat->root_start + fat->root_ent_cnt * 32 / SECTOR_SIZE;
   16449:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1644c:	8b 50 18             	mov    0x18(%eax),%edx
   1644f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16452:	8b 40 14             	mov    0x14(%eax),%eax
   16455:	c1 e0 05             	shl    $0x5,%eax
   16458:	c1 e8 09             	shr    $0x9,%eax
   1645b:	01 c2                	add    %eax,%edx
   1645d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16460:	89 50 1c             	mov    %edx,0x1c(%eax)
    fat->curr_sector = -1;
   16463:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16466:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
    fat->fs = fs;
   1646d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16470:	8b 55 08             	mov    0x8(%ebp),%edx
   16473:	89 50 2c             	mov    %edx,0x2c(%eax)
    mutex_init(&fat->mutex);
   16476:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16479:	83 c0 30             	add    $0x30,%eax
   1647c:	83 ec 0c             	sub    $0xc,%esp
   1647f:	50                   	push   %eax
   16480:	e8 ac 18 00 00       	call   17d31 <mutex_init>
   16485:	83 c4 10             	add    $0x10,%esp
    fs->mutex = &fat->mutex;
   16488:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1648b:	8d 50 30             	lea    0x30(%eax),%edx
   1648e:	8b 45 08             	mov    0x8(%ebp),%eax
   16491:	89 90 5c 02 00 00    	mov    %edx,0x25c(%eax)

	if (fat->tbl_cnt != 2) {
   16497:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1649a:	8b 40 04             	mov    0x4(%eax),%eax
   1649d:	83 f8 02             	cmp    $0x2,%eax
   164a0:	74 18                	je     164ba <fatfs_mount+0x1ae>
        log_printf("fat table num error, major: %x, minor: %x", dev_major, dev_minor);
   164a2:	83 ec 04             	sub    $0x4,%esp
   164a5:	ff 75 10             	pushl  0x10(%ebp)
   164a8:	ff 75 0c             	pushl  0xc(%ebp)
   164ab:	68 70 9b 01 00       	push   $0x19b70
   164b0:	e8 71 25 00 00       	call   18a26 <log_printf>
   164b5:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   164b8:	eb 67                	jmp    16521 <fatfs_mount+0x215>
	}

    if (kernel_memcmp(dbr->BS_FileSysType, "FAT16", 5) != 0) {
   164ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   164bd:	83 c0 36             	add    $0x36,%eax
   164c0:	83 ec 04             	sub    $0x4,%esp
   164c3:	6a 05                	push   $0x5
   164c5:	68 9a 9b 01 00       	push   $0x19b9a
   164ca:	50                   	push   %eax
   164cb:	e8 ed 1f 00 00       	call   184bd <kernel_memcmp>
   164d0:	83 c4 10             	add    $0x10,%esp
   164d3:	85 c0                	test   %eax,%eax
   164d5:	74 18                	je     164ef <fatfs_mount+0x1e3>
        log_printf("not a fat16 file system, major: %x, minor: %x", dev_major, dev_minor);
   164d7:	83 ec 04             	sub    $0x4,%esp
   164da:	ff 75 10             	pushl  0x10(%ebp)
   164dd:	ff 75 0c             	pushl  0xc(%ebp)
   164e0:	68 a0 9b 01 00       	push   $0x19ba0
   164e5:	e8 3c 25 00 00       	call   18a26 <log_printf>
   164ea:	83 c4 10             	add    $0x10,%esp
        goto mount_failed;
   164ed:	eb 32                	jmp    16521 <fatfs_mount+0x215>
    }

    fs->type = FS_FAT16;
   164ef:	8b 45 08             	mov    0x8(%ebp),%eax
   164f2:	c7 80 00 02 00 00 00 	movl   $0x0,0x200(%eax)
   164f9:	00 00 00 
    fs->data = &fs->fat_data;
   164fc:	8b 45 08             	mov    0x8(%ebp),%eax
   164ff:	8d 90 18 02 00 00    	lea    0x218(%eax),%edx
   16505:	8b 45 08             	mov    0x8(%ebp),%eax
   16508:	89 90 08 02 00 00    	mov    %edx,0x208(%eax)
    fs->dev_id = dev_id;
   1650e:	8b 45 08             	mov    0x8(%ebp),%eax
   16511:	8b 55 f4             	mov    -0xc(%ebp),%edx
   16514:	89 90 0c 02 00 00    	mov    %edx,0x20c(%eax)
    return 0;
   1651a:	b8 00 00 00 00       	mov    $0x0,%eax
   1651f:	eb 28                	jmp    16549 <fatfs_mount+0x23d>

mount_failed:
    if (dbr) {
   16521:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16525:	74 0f                	je     16536 <fatfs_mount+0x22a>
        memory_free_page((uint32_t)dbr);
   16527:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1652a:	83 ec 0c             	sub    $0xc,%esp
   1652d:	50                   	push   %eax
   1652e:	e8 56 a7 ff ff       	call   10c89 <memory_free_page>
   16533:	83 c4 10             	add    $0x10,%esp
    }
    dev_close(dev_id);
   16536:	83 ec 0c             	sub    $0xc,%esp
   16539:	ff 75 f4             	pushl  -0xc(%ebp)
   1653c:	e8 73 db ff ff       	call   140b4 <dev_close>
   16541:	83 c4 10             	add    $0x10,%esp
    return -1;
   16544:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16549:	c9                   	leave  
   1654a:	c3                   	ret    

0001654b <fatfs_unmount>:


void fatfs_unmount (struct _fs_t * fs) {
   1654b:	55                   	push   %ebp
   1654c:	89 e5                	mov    %esp,%ebp
   1654e:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16551:	8b 45 08             	mov    0x8(%ebp),%eax
   16554:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1655a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    dev_close(fs->dev_id);
   1655d:	8b 45 08             	mov    0x8(%ebp),%eax
   16560:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16566:	83 ec 0c             	sub    $0xc,%esp
   16569:	50                   	push   %eax
   1656a:	e8 45 db ff ff       	call   140b4 <dev_close>
   1656f:	83 c4 10             	add    $0x10,%esp
    memory_free_page((uint32_t)fat->fat_buffer);
   16572:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16575:	8b 40 24             	mov    0x24(%eax),%eax
   16578:	83 ec 0c             	sub    $0xc,%esp
   1657b:	50                   	push   %eax
   1657c:	e8 08 a7 ff ff       	call   10c89 <memory_free_page>
   16581:	83 c4 10             	add    $0x10,%esp
}
   16584:	90                   	nop
   16585:	c9                   	leave  
   16586:	c3                   	ret    

00016587 <read_from_diritem>:


static void read_from_diritem (fat_t * fat, file_t * file, diritem_t * item, int index) {
   16587:	55                   	push   %ebp
   16588:	89 e5                	mov    %esp,%ebp
    file->type = diritem_get_type(item);
   1658a:	ff 75 10             	pushl  0x10(%ebp)
   1658d:	e8 d1 f9 ff ff       	call   15f63 <diritem_get_type>
   16592:	83 c4 04             	add    $0x4,%esp
   16595:	89 c2                	mov    %eax,%edx
   16597:	8b 45 0c             	mov    0xc(%ebp),%eax
   1659a:	89 50 20             	mov    %edx,0x20(%eax)
    file->size = (int)item->DIR_FileSize;
   1659d:	8b 45 10             	mov    0x10(%ebp),%eax
   165a0:	8b 50 1c             	mov    0x1c(%eax),%edx
   165a3:	8b 45 0c             	mov    0xc(%ebp),%eax
   165a6:	89 50 24             	mov    %edx,0x24(%eax)
    file->pos = 0;
   165a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   165ac:	c7 40 30 00 00 00 00 	movl   $0x0,0x30(%eax)
    file->sblk = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   165b3:	8b 45 10             	mov    0x10(%ebp),%eax
   165b6:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   165ba:	0f b7 c0             	movzwl %ax,%eax
   165bd:	c1 e0 10             	shl    $0x10,%eax
   165c0:	89 c2                	mov    %eax,%edx
   165c2:	8b 45 10             	mov    0x10(%ebp),%eax
   165c5:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   165c9:	0f b7 c0             	movzwl %ax,%eax
   165cc:	09 c2                	or     %eax,%edx
   165ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   165d1:	89 50 34             	mov    %edx,0x34(%eax)
    file->cblk = file->sblk;
   165d4:	8b 45 0c             	mov    0xc(%ebp),%eax
   165d7:	8b 50 34             	mov    0x34(%eax),%edx
   165da:	8b 45 0c             	mov    0xc(%ebp),%eax
   165dd:	89 50 38             	mov    %edx,0x38(%eax)
    file->p_index = index;
   165e0:	8b 45 0c             	mov    0xc(%ebp),%eax
   165e3:	8b 55 14             	mov    0x14(%ebp),%edx
   165e6:	89 50 3c             	mov    %edx,0x3c(%eax)
}
   165e9:	90                   	nop
   165ea:	c9                   	leave  
   165eb:	c3                   	ret    

000165ec <fatfs_open>:


int fatfs_open (struct _fs_t * fs, const char * path, file_t * file) {
   165ec:	55                   	push   %ebp
   165ed:	89 e5                	mov    %esp,%ebp
   165ef:	83 ec 48             	sub    $0x48,%esp
    fat_t * fat = (fat_t *)fs->data;
   165f2:	8b 45 08             	mov    0x8(%ebp),%eax
   165f5:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   165fb:	89 45 e8             	mov    %eax,-0x18(%ebp)
    diritem_t * file_item = (diritem_t *)0;
   165fe:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    int p_index = -1;
   16605:	c7 45 f0 ff ff ff ff 	movl   $0xffffffff,-0x10(%ebp)

    for (int i = 0; i < fat->root_ent_cnt; i++) {
   1660c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
   16613:	eb 6f                	jmp    16684 <fatfs_open+0x98>
        diritem_t * item = read_dir_entry(fat, i);
   16615:	83 ec 08             	sub    $0x8,%esp
   16618:	ff 75 ec             	pushl  -0x14(%ebp)
   1661b:	ff 75 e8             	pushl  -0x18(%ebp)
   1661e:	e8 84 f9 ff ff       	call   15fa7 <read_dir_entry>
   16623:	83 c4 10             	add    $0x10,%esp
   16626:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        if (item == (diritem_t *)0) {
   16629:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1662d:	75 0a                	jne    16639 <fatfs_open+0x4d>
            return -1;
   1662f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16634:	e9 3f 01 00 00       	jmp    16778 <fatfs_open+0x18c>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16639:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1663c:	0f b6 00             	movzbl (%eax),%eax
   1663f:	84 c0                	test   %al,%al
   16641:	75 08                	jne    1664b <fatfs_open+0x5f>
            p_index = i;
   16643:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16646:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   16649:	eb 46                	jmp    16691 <fatfs_open+0xa5>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   1664b:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1664e:	0f b6 00             	movzbl (%eax),%eax
   16651:	3c e5                	cmp    $0xe5,%al
   16653:	75 08                	jne    1665d <fatfs_open+0x71>
            p_index = i;
   16655:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16658:	89 45 f0             	mov    %eax,-0x10(%ebp)
            continue;
   1665b:	eb 23                	jmp    16680 <fatfs_open+0x94>
        }

        if (diritem_name_match(item, path)) {
   1665d:	83 ec 08             	sub    $0x8,%esp
   16660:	ff 75 0c             	pushl  0xc(%ebp)
   16663:	ff 75 e4             	pushl  -0x1c(%ebp)
   16666:	e8 a0 f7 ff ff       	call   15e0b <diritem_name_match>
   1666b:	83 c4 10             	add    $0x10,%esp
   1666e:	85 c0                	test   %eax,%eax
   16670:	74 0e                	je     16680 <fatfs_open+0x94>
            file_item = item;
   16672:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   16675:	89 45 f4             	mov    %eax,-0xc(%ebp)
            p_index = i;
   16678:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1667b:	89 45 f0             	mov    %eax,-0x10(%ebp)
            break;
   1667e:	eb 11                	jmp    16691 <fatfs_open+0xa5>
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16680:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
   16684:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16687:	8b 50 14             	mov    0x14(%eax),%edx
   1668a:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1668d:	39 c2                	cmp    %eax,%edx
   1668f:	77 84                	ja     16615 <fatfs_open+0x29>
        }
    }

    if (file_item) {
   16691:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16695:	74 62                	je     166f9 <fatfs_open+0x10d>
        read_from_diritem(fat, file, file_item, p_index);
   16697:	ff 75 f0             	pushl  -0x10(%ebp)
   1669a:	ff 75 f4             	pushl  -0xc(%ebp)
   1669d:	ff 75 10             	pushl  0x10(%ebp)
   166a0:	ff 75 e8             	pushl  -0x18(%ebp)
   166a3:	e8 df fe ff ff       	call   16587 <read_from_diritem>
   166a8:	83 c4 10             	add    $0x10,%esp

        if (file->mode & O_TRUNC) {
   166ab:	8b 45 10             	mov    0x10(%ebp),%eax
   166ae:	8b 40 40             	mov    0x40(%eax),%eax
   166b1:	25 00 04 00 00       	and    $0x400,%eax
   166b6:	85 c0                	test   %eax,%eax
   166b8:	74 38                	je     166f2 <fatfs_open+0x106>
            cluster_free_chain(fat, file->sblk);
   166ba:	8b 45 10             	mov    0x10(%ebp),%eax
   166bd:	8b 40 34             	mov    0x34(%eax),%eax
   166c0:	0f b7 c0             	movzwl %ax,%eax
   166c3:	83 ec 08             	sub    $0x8,%esp
   166c6:	50                   	push   %eax
   166c7:	ff 75 e8             	pushl  -0x18(%ebp)
   166ca:	e8 2e f5 ff ff       	call   15bfd <cluster_free_chain>
   166cf:	83 c4 10             	add    $0x10,%esp
            file->cblk = file->sblk = FAT_CLUSTER_INVALID;
   166d2:	8b 45 10             	mov    0x10(%ebp),%eax
   166d5:	c7 40 34 f8 ff 00 00 	movl   $0xfff8,0x34(%eax)
   166dc:	8b 45 10             	mov    0x10(%ebp),%eax
   166df:	8b 50 34             	mov    0x34(%eax),%edx
   166e2:	8b 45 10             	mov    0x10(%ebp),%eax
   166e5:	89 50 38             	mov    %edx,0x38(%eax)
            file->size = 0;
   166e8:	8b 45 10             	mov    0x10(%ebp),%eax
   166eb:	c7 40 24 00 00 00 00 	movl   $0x0,0x24(%eax)
        }
        return 0;
   166f2:	b8 00 00 00 00       	mov    $0x0,%eax
   166f7:	eb 7f                	jmp    16778 <fatfs_open+0x18c>
    } else if ((file->mode & O_CREAT) && (p_index >= 0)) {
   166f9:	8b 45 10             	mov    0x10(%ebp),%eax
   166fc:	8b 40 40             	mov    0x40(%eax),%eax
   166ff:	25 00 02 00 00       	and    $0x200,%eax
   16704:	85 c0                	test   %eax,%eax
   16706:	74 6b                	je     16773 <fatfs_open+0x187>
   16708:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1670c:	78 65                	js     16773 <fatfs_open+0x187>
        diritem_t item;
        diritem_init(&item, 0, path);
   1670e:	83 ec 04             	sub    $0x4,%esp
   16711:	ff 75 0c             	pushl  0xc(%ebp)
   16714:	6a 00                	push   $0x0
   16716:	8d 45 c0             	lea    -0x40(%ebp),%eax
   16719:	50                   	push   %eax
   1671a:	e8 23 f7 ff ff       	call   15e42 <diritem_init>
   1671f:	83 c4 10             	add    $0x10,%esp
        int err = write_dir_entry(fat, &item, p_index);
   16722:	83 ec 04             	sub    $0x4,%esp
   16725:	ff 75 f0             	pushl  -0x10(%ebp)
   16728:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1672b:	50                   	push   %eax
   1672c:	ff 75 e8             	pushl  -0x18(%ebp)
   1672f:	e8 f3 f8 ff ff       	call   16027 <write_dir_entry>
   16734:	83 c4 10             	add    $0x10,%esp
   16737:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   1673a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1673e:	79 17                	jns    16757 <fatfs_open+0x16b>
            log_printf("create file failed.");
   16740:	83 ec 0c             	sub    $0xc,%esp
   16743:	68 ce 9b 01 00       	push   $0x19bce
   16748:	e8 d9 22 00 00       	call   18a26 <log_printf>
   1674d:	83 c4 10             	add    $0x10,%esp
            return -1;
   16750:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16755:	eb 21                	jmp    16778 <fatfs_open+0x18c>
        }

        read_from_diritem(fat, file, &item, p_index);
   16757:	ff 75 f0             	pushl  -0x10(%ebp)
   1675a:	8d 45 c0             	lea    -0x40(%ebp),%eax
   1675d:	50                   	push   %eax
   1675e:	ff 75 10             	pushl  0x10(%ebp)
   16761:	ff 75 e8             	pushl  -0x18(%ebp)
   16764:	e8 1e fe ff ff       	call   16587 <read_from_diritem>
   16769:	83 c4 10             	add    $0x10,%esp
        return 0;
   1676c:	b8 00 00 00 00       	mov    $0x0,%eax
   16771:	eb 05                	jmp    16778 <fatfs_open+0x18c>
    }

    return -1;
   16773:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16778:	c9                   	leave  
   16779:	c3                   	ret    

0001677a <fatfs_read>:


int fatfs_read (char * buf, int size, file_t * file) {
   1677a:	55                   	push   %ebp
   1677b:	89 e5                	mov    %esp,%ebp
   1677d:	53                   	push   %ebx
   1677e:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   16781:	8b 45 10             	mov    0x10(%ebp),%eax
   16784:	8b 40 44             	mov    0x44(%eax),%eax
   16787:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   1678d:	89 45 e8             	mov    %eax,-0x18(%ebp)

    uint32_t nbytes = size;
   16790:	8b 45 0c             	mov    0xc(%ebp),%eax
   16793:	89 45 f4             	mov    %eax,-0xc(%ebp)
    if (file->pos + nbytes > file->size) {
   16796:	8b 45 10             	mov    0x10(%ebp),%eax
   16799:	8b 40 30             	mov    0x30(%eax),%eax
   1679c:	89 c2                	mov    %eax,%edx
   1679e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   167a1:	01 c2                	add    %eax,%edx
   167a3:	8b 45 10             	mov    0x10(%ebp),%eax
   167a6:	8b 40 24             	mov    0x24(%eax),%eax
   167a9:	39 c2                	cmp    %eax,%edx
   167ab:	76 13                	jbe    167c0 <fatfs_read+0x46>
        nbytes = file->size - file->pos;
   167ad:	8b 45 10             	mov    0x10(%ebp),%eax
   167b0:	8b 50 24             	mov    0x24(%eax),%edx
   167b3:	8b 45 10             	mov    0x10(%ebp),%eax
   167b6:	8b 40 30             	mov    0x30(%eax),%eax
   167b9:	29 c2                	sub    %eax,%edx
   167bb:	89 d0                	mov    %edx,%eax
   167bd:	89 45 f4             	mov    %eax,-0xc(%ebp)
    }

    uint32_t total_read = 0;
   167c0:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    while (nbytes > 0) {
   167c7:	e9 41 01 00 00       	jmp    1690d <fatfs_read+0x193>
        uint32_t curr_read = nbytes;
   167cc:	8b 45 f4             	mov    -0xc(%ebp),%eax
   167cf:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   167d2:	8b 45 10             	mov    0x10(%ebp),%eax
   167d5:	8b 40 30             	mov    0x30(%eax),%eax
   167d8:	89 c2                	mov    %eax,%edx
   167da:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167dd:	8b 48 20             	mov    0x20(%eax),%ecx
   167e0:	89 d0                	mov    %edx,%eax
   167e2:	ba 00 00 00 00       	mov    $0x0,%edx
   167e7:	f7 f1                	div    %ecx
   167e9:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  
   167ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   167ef:	8b 50 1c             	mov    0x1c(%eax),%edx
   167f2:	8b 45 10             	mov    0x10(%ebp),%eax
   167f5:	8b 40 38             	mov    0x38(%eax),%eax
   167f8:	83 e8 02             	sub    $0x2,%eax
   167fb:	89 c1                	mov    %eax,%ecx
   167fd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16800:	8b 40 10             	mov    0x10(%eax),%eax
   16803:	0f af c1             	imul   %ecx,%eax
   16806:	01 d0                	add    %edx,%eax
   16808:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   1680b:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)
   1680f:	75 4c                	jne    1685d <fatfs_read+0xe3>
   16811:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16814:	8b 40 20             	mov    0x20(%eax),%eax
   16817:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   1681a:	75 41                	jne    1685d <fatfs_read+0xe3>
            int err = dev_read(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   1681c:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1681f:	8b 40 10             	mov    0x10(%eax),%eax
   16822:	89 c1                	mov    %eax,%ecx
   16824:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16827:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1682a:	8b 40 2c             	mov    0x2c(%eax),%eax
   1682d:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16833:	51                   	push   %ecx
   16834:	ff 75 08             	pushl  0x8(%ebp)
   16837:	52                   	push   %edx
   16838:	50                   	push   %eax
   16839:	e8 92 d7 ff ff       	call   13fd0 <dev_read>
   1683e:	83 c4 10             	add    $0x10,%esp
   16841:	89 45 dc             	mov    %eax,-0x24(%ebp)
            if (err < 0) {
   16844:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   16848:	79 08                	jns    16852 <fatfs_read+0xd8>
                return total_read;
   1684a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1684d:	e9 c8 00 00 00       	jmp    1691a <fatfs_read+0x1a0>
            }

            curr_read = fat->cluster_byte_size;
   16852:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16855:	8b 40 20             	mov    0x20(%eax),%eax
   16858:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   1685b:	eb 7d                	jmp    168da <fatfs_read+0x160>
        } else {
            if (cluster_offset + curr_read > fat->cluster_byte_size) {
   1685d:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16860:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16863:	01 c2                	add    %eax,%edx
   16865:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16868:	8b 40 20             	mov    0x20(%eax),%eax
   1686b:	39 c2                	cmp    %eax,%edx
   1686d:	76 0c                	jbe    1687b <fatfs_read+0x101>
                curr_read = fat->cluster_byte_size - cluster_offset;
   1686f:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16872:	8b 40 20             	mov    0x20(%eax),%eax
   16875:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16878:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   1687b:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1687e:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16885:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16888:	8b 40 10             	mov    0x10(%eax),%eax
   1688b:	89 c3                	mov    %eax,%ebx
   1688d:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16890:	8b 48 24             	mov    0x24(%eax),%ecx
   16893:	8b 55 e0             	mov    -0x20(%ebp),%edx
   16896:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16899:	8b 40 2c             	mov    0x2c(%eax),%eax
   1689c:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   168a2:	53                   	push   %ebx
   168a3:	51                   	push   %ecx
   168a4:	52                   	push   %edx
   168a5:	50                   	push   %eax
   168a6:	e8 25 d7 ff ff       	call   13fd0 <dev_read>
   168ab:	83 c4 10             	add    $0x10,%esp
   168ae:	89 45 d8             	mov    %eax,-0x28(%ebp)
            if (err < 0) {
   168b1:	83 7d d8 00          	cmpl   $0x0,-0x28(%ebp)
   168b5:	79 05                	jns    168bc <fatfs_read+0x142>
                return total_read;
   168b7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   168ba:	eb 5e                	jmp    1691a <fatfs_read+0x1a0>
            }
            kernel_memcpy(buf, fat->fat_buffer + cluster_offset, curr_read);
   168bc:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168bf:	8b 55 e8             	mov    -0x18(%ebp),%edx
   168c2:	8b 4a 24             	mov    0x24(%edx),%ecx
   168c5:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   168c8:	01 ca                	add    %ecx,%edx
   168ca:	83 ec 04             	sub    $0x4,%esp
   168cd:	50                   	push   %eax
   168ce:	52                   	push   %edx
   168cf:	ff 75 08             	pushl  0x8(%ebp)
   168d2:	e8 56 1b 00 00       	call   1842d <kernel_memcpy>
   168d7:	83 c4 10             	add    $0x10,%esp
        }

        buf += curr_read;
   168da:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168dd:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_read;
   168e0:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168e3:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_read += curr_read;
   168e6:	8b 45 ec             	mov    -0x14(%ebp),%eax
   168e9:	01 45 f0             	add    %eax,-0x10(%ebp)

		int err = move_file_pos(file, fat, curr_read, 0);
   168ec:	6a 00                	push   $0x0
   168ee:	ff 75 ec             	pushl  -0x14(%ebp)
   168f1:	ff 75 e8             	pushl  -0x18(%ebp)
   168f4:	ff 75 10             	pushl  0x10(%ebp)
   168f7:	e8 4e f9 ff ff       	call   1624a <move_file_pos>
   168fc:	83 c4 10             	add    $0x10,%esp
   168ff:	89 45 d4             	mov    %eax,-0x2c(%ebp)
		if (err < 0) {
   16902:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16906:	79 05                	jns    1690d <fatfs_read+0x193>
            return total_read;
   16908:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1690b:	eb 0d                	jmp    1691a <fatfs_read+0x1a0>
    while (nbytes > 0) {
   1690d:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16911:	0f 85 b5 fe ff ff    	jne    167cc <fatfs_read+0x52>
        }
	}

    return total_read;
   16917:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   1691a:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   1691d:	c9                   	leave  
   1691e:	c3                   	ret    

0001691f <fatfs_write>:


int fatfs_write (char * buf, int size, file_t * file) {
   1691f:	55                   	push   %ebp
   16920:	89 e5                	mov    %esp,%ebp
   16922:	53                   	push   %ebx
   16923:	83 ec 34             	sub    $0x34,%esp
    fat_t * fat = (fat_t *)file->fs->data;
   16926:	8b 45 10             	mov    0x10(%ebp),%eax
   16929:	8b 40 44             	mov    0x44(%eax),%eax
   1692c:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16932:	89 45 e8             	mov    %eax,-0x18(%ebp)

    if (file->pos + size > file->size) {
   16935:	8b 45 10             	mov    0x10(%ebp),%eax
   16938:	8b 50 30             	mov    0x30(%eax),%edx
   1693b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1693e:	01 d0                	add    %edx,%eax
   16940:	89 c2                	mov    %eax,%edx
   16942:	8b 45 10             	mov    0x10(%ebp),%eax
   16945:	8b 40 24             	mov    0x24(%eax),%eax
   16948:	39 c2                	cmp    %eax,%edx
   1694a:	76 3e                	jbe    1698a <fatfs_write+0x6b>
        int inc_size = file->pos + size - file->size;
   1694c:	8b 45 10             	mov    0x10(%ebp),%eax
   1694f:	8b 50 30             	mov    0x30(%eax),%edx
   16952:	8b 45 0c             	mov    0xc(%ebp),%eax
   16955:	01 d0                	add    %edx,%eax
   16957:	89 c2                	mov    %eax,%edx
   16959:	8b 45 10             	mov    0x10(%ebp),%eax
   1695c:	8b 40 24             	mov    0x24(%eax),%eax
   1695f:	29 c2                	sub    %eax,%edx
   16961:	89 d0                	mov    %edx,%eax
   16963:	89 45 e4             	mov    %eax,-0x1c(%ebp)
        int err = expand_file(file, inc_size);
   16966:	83 ec 08             	sub    $0x8,%esp
   16969:	ff 75 e4             	pushl  -0x1c(%ebp)
   1696c:	ff 75 10             	pushl  0x10(%ebp)
   1696f:	e8 5d f7 ff ff       	call   160d1 <expand_file>
   16974:	83 c4 10             	add    $0x10,%esp
   16977:	89 45 e0             	mov    %eax,-0x20(%ebp)
        if (err < 0) {
   1697a:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1697e:	79 0a                	jns    1698a <fatfs_write+0x6b>
            return 0;
   16980:	b8 00 00 00 00       	mov    $0x0,%eax
   16985:	e9 ae 01 00 00       	jmp    16b38 <fatfs_write+0x219>
        }
    }

    uint32_t nbytes = size;
   1698a:	8b 45 0c             	mov    0xc(%ebp),%eax
   1698d:	89 45 f4             	mov    %eax,-0xc(%ebp)
    uint32_t total_write = 0;
   16990:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
	while (nbytes) {
   16997:	e9 8f 01 00 00       	jmp    16b2b <fatfs_write+0x20c>
        uint32_t curr_write = nbytes;
   1699c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1699f:	89 45 ec             	mov    %eax,-0x14(%ebp)
		uint32_t cluster_offset = file->pos % fat->cluster_byte_size;
   169a2:	8b 45 10             	mov    0x10(%ebp),%eax
   169a5:	8b 40 30             	mov    0x30(%eax),%eax
   169a8:	89 c2                	mov    %eax,%edx
   169aa:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ad:	8b 48 20             	mov    0x20(%eax),%ecx
   169b0:	89 d0                	mov    %edx,%eax
   169b2:	ba 00 00 00 00       	mov    $0x0,%edx
   169b7:	f7 f1                	div    %ecx
   169b9:	89 55 dc             	mov    %edx,-0x24(%ebp)
        uint32_t start_sector = fat->data_start + (file->cblk - 2)* fat->sec_per_cluster;  
   169bc:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169bf:	8b 50 1c             	mov    0x1c(%eax),%edx
   169c2:	8b 45 10             	mov    0x10(%ebp),%eax
   169c5:	8b 40 38             	mov    0x38(%eax),%eax
   169c8:	83 e8 02             	sub    $0x2,%eax
   169cb:	89 c1                	mov    %eax,%ecx
   169cd:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169d0:	8b 40 10             	mov    0x10(%eax),%eax
   169d3:	0f af c1             	imul   %ecx,%eax
   169d6:	01 d0                	add    %edx,%eax
   169d8:	89 45 d8             	mov    %eax,-0x28(%ebp)

        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   169db:	83 7d dc 00          	cmpl   $0x0,-0x24(%ebp)
   169df:	75 4f                	jne    16a30 <fatfs_write+0x111>
   169e1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169e4:	8b 40 20             	mov    0x20(%eax),%eax
   169e7:	39 45 f4             	cmp    %eax,-0xc(%ebp)
   169ea:	75 44                	jne    16a30 <fatfs_write+0x111>
            int err = dev_write(fat->fs->dev_id, start_sector, buf, fat->sec_per_cluster);
   169ec:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169ef:	8b 40 10             	mov    0x10(%eax),%eax
   169f2:	89 c1                	mov    %eax,%ecx
   169f4:	8b 55 d8             	mov    -0x28(%ebp),%edx
   169f7:	8b 45 e8             	mov    -0x18(%ebp),%eax
   169fa:	8b 40 2c             	mov    0x2c(%eax),%eax
   169fd:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a03:	51                   	push   %ecx
   16a04:	ff 75 08             	pushl  0x8(%ebp)
   16a07:	52                   	push   %edx
   16a08:	50                   	push   %eax
   16a09:	e8 0e d6 ff ff       	call   1401c <dev_write>
   16a0e:	83 c4 10             	add    $0x10,%esp
   16a11:	89 45 d4             	mov    %eax,-0x2c(%ebp)
            if (err < 0) {
   16a14:	83 7d d4 00          	cmpl   $0x0,-0x2c(%ebp)
   16a18:	79 08                	jns    16a22 <fatfs_write+0x103>
                return total_write;
   16a1a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a1d:	e9 16 01 00 00       	jmp    16b38 <fatfs_write+0x219>
            }

            curr_write = fat->cluster_byte_size;
   16a22:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a25:	8b 40 20             	mov    0x20(%eax),%eax
   16a28:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if ((cluster_offset == 0) && (nbytes == fat->cluster_byte_size)) {
   16a2b:	e9 b7 00 00 00       	jmp    16ae7 <fatfs_write+0x1c8>
        } else {
            if (cluster_offset + curr_write > fat->cluster_byte_size) {
   16a30:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16a33:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a36:	01 c2                	add    %eax,%edx
   16a38:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a3b:	8b 40 20             	mov    0x20(%eax),%eax
   16a3e:	39 c2                	cmp    %eax,%edx
   16a40:	76 0c                	jbe    16a4e <fatfs_write+0x12f>
                curr_write = fat->cluster_byte_size - cluster_offset;
   16a42:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a45:	8b 40 20             	mov    0x20(%eax),%eax
   16a48:	2b 45 dc             	sub    -0x24(%ebp),%eax
   16a4b:	89 45 ec             	mov    %eax,-0x14(%ebp)
            }

            fat->curr_sector = -1;
   16a4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a51:	c7 40 28 ff ff ff ff 	movl   $0xffffffff,0x28(%eax)
            int err = dev_read(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16a58:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a5b:	8b 40 10             	mov    0x10(%eax),%eax
   16a5e:	89 c3                	mov    %eax,%ebx
   16a60:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a63:	8b 48 24             	mov    0x24(%eax),%ecx
   16a66:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16a69:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16a6c:	8b 40 2c             	mov    0x2c(%eax),%eax
   16a6f:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16a75:	53                   	push   %ebx
   16a76:	51                   	push   %ecx
   16a77:	52                   	push   %edx
   16a78:	50                   	push   %eax
   16a79:	e8 52 d5 ff ff       	call   13fd0 <dev_read>
   16a7e:	83 c4 10             	add    $0x10,%esp
   16a81:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16a84:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16a88:	79 08                	jns    16a92 <fatfs_write+0x173>
                return total_write;
   16a8a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16a8d:	e9 a6 00 00 00       	jmp    16b38 <fatfs_write+0x219>
            }
            kernel_memcpy(fat->fat_buffer + cluster_offset, buf, curr_write);        
   16a92:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16a95:	8b 55 e8             	mov    -0x18(%ebp),%edx
   16a98:	8b 4a 24             	mov    0x24(%edx),%ecx
   16a9b:	8b 55 dc             	mov    -0x24(%ebp),%edx
   16a9e:	01 ca                	add    %ecx,%edx
   16aa0:	83 ec 04             	sub    $0x4,%esp
   16aa3:	50                   	push   %eax
   16aa4:	ff 75 08             	pushl  0x8(%ebp)
   16aa7:	52                   	push   %edx
   16aa8:	e8 80 19 00 00       	call   1842d <kernel_memcpy>
   16aad:	83 c4 10             	add    $0x10,%esp
            
            err = dev_write(fat->fs->dev_id, start_sector, fat->fat_buffer, fat->sec_per_cluster);
   16ab0:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ab3:	8b 40 10             	mov    0x10(%eax),%eax
   16ab6:	89 c3                	mov    %eax,%ebx
   16ab8:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16abb:	8b 48 24             	mov    0x24(%eax),%ecx
   16abe:	8b 55 d8             	mov    -0x28(%ebp),%edx
   16ac1:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16ac4:	8b 40 2c             	mov    0x2c(%eax),%eax
   16ac7:	8b 80 0c 02 00 00    	mov    0x20c(%eax),%eax
   16acd:	53                   	push   %ebx
   16ace:	51                   	push   %ecx
   16acf:	52                   	push   %edx
   16ad0:	50                   	push   %eax
   16ad1:	e8 46 d5 ff ff       	call   1401c <dev_write>
   16ad6:	83 c4 10             	add    $0x10,%esp
   16ad9:	89 45 d0             	mov    %eax,-0x30(%ebp)
            if (err < 0) {
   16adc:	83 7d d0 00          	cmpl   $0x0,-0x30(%ebp)
   16ae0:	79 05                	jns    16ae7 <fatfs_write+0x1c8>
                return total_write;
   16ae2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ae5:	eb 51                	jmp    16b38 <fatfs_write+0x219>
            }
        }

        buf += curr_write;
   16ae7:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16aea:	01 45 08             	add    %eax,0x8(%ebp)
        nbytes -= curr_write;
   16aed:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16af0:	29 45 f4             	sub    %eax,-0xc(%ebp)
        total_write += curr_write;
   16af3:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16af6:	01 45 f0             	add    %eax,-0x10(%ebp)
        file->size += curr_write;
   16af9:	8b 45 10             	mov    0x10(%ebp),%eax
   16afc:	8b 50 24             	mov    0x24(%eax),%edx
   16aff:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16b02:	01 c2                	add    %eax,%edx
   16b04:	8b 45 10             	mov    0x10(%ebp),%eax
   16b07:	89 50 24             	mov    %edx,0x24(%eax)

		int err = move_file_pos(file, fat, curr_write, 1);
   16b0a:	6a 01                	push   $0x1
   16b0c:	ff 75 ec             	pushl  -0x14(%ebp)
   16b0f:	ff 75 e8             	pushl  -0x18(%ebp)
   16b12:	ff 75 10             	pushl  0x10(%ebp)
   16b15:	e8 30 f7 ff ff       	call   1624a <move_file_pos>
   16b1a:	83 c4 10             	add    $0x10,%esp
   16b1d:	89 45 cc             	mov    %eax,-0x34(%ebp)
		if (err < 0) {
   16b20:	83 7d cc 00          	cmpl   $0x0,-0x34(%ebp)
   16b24:	79 05                	jns    16b2b <fatfs_write+0x20c>
            return total_write;
   16b26:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b29:	eb 0d                	jmp    16b38 <fatfs_write+0x219>
	while (nbytes) {
   16b2b:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   16b2f:	0f 85 67 fe ff ff    	jne    1699c <fatfs_write+0x7d>
        }
    }

    return total_write;
   16b35:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   16b38:	8b 5d fc             	mov    -0x4(%ebp),%ebx
   16b3b:	c9                   	leave  
   16b3c:	c3                   	ret    

00016b3d <fatfs_close>:


void fatfs_close (file_t * file) {
   16b3d:	55                   	push   %ebp
   16b3e:	89 e5                	mov    %esp,%ebp
   16b40:	83 ec 18             	sub    $0x18,%esp
    if (file->mode == O_RDONLY) {
   16b43:	8b 45 08             	mov    0x8(%ebp),%eax
   16b46:	8b 40 40             	mov    0x40(%eax),%eax
   16b49:	85 c0                	test   %eax,%eax
   16b4b:	74 74                	je     16bc1 <fatfs_close+0x84>
        return;
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16b4d:	8b 45 08             	mov    0x8(%ebp),%eax
   16b50:	8b 40 44             	mov    0x44(%eax),%eax
   16b53:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16b59:	89 45 f4             	mov    %eax,-0xc(%ebp)

    diritem_t * item = read_dir_entry(fat, file->p_index);
   16b5c:	8b 45 08             	mov    0x8(%ebp),%eax
   16b5f:	8b 40 3c             	mov    0x3c(%eax),%eax
   16b62:	83 ec 08             	sub    $0x8,%esp
   16b65:	50                   	push   %eax
   16b66:	ff 75 f4             	pushl  -0xc(%ebp)
   16b69:	e8 39 f4 ff ff       	call   15fa7 <read_dir_entry>
   16b6e:	83 c4 10             	add    $0x10,%esp
   16b71:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (item == (diritem_t *)0) {
   16b74:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16b78:	74 4a                	je     16bc4 <fatfs_close+0x87>
        return;
    }

    item->DIR_FileSize = file->size;
   16b7a:	8b 45 08             	mov    0x8(%ebp),%eax
   16b7d:	8b 50 24             	mov    0x24(%eax),%edx
   16b80:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b83:	89 50 1c             	mov    %edx,0x1c(%eax)
    item->DIR_FstClusHI = (uint16_t )(file->sblk >> 16);
   16b86:	8b 45 08             	mov    0x8(%ebp),%eax
   16b89:	8b 40 34             	mov    0x34(%eax),%eax
   16b8c:	c1 f8 10             	sar    $0x10,%eax
   16b8f:	89 c2                	mov    %eax,%edx
   16b91:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16b94:	66 89 50 14          	mov    %dx,0x14(%eax)
    item->DIR_FstClusL0 = (uint16_t )(file->sblk & 0xFFFF);
   16b98:	8b 45 08             	mov    0x8(%ebp),%eax
   16b9b:	8b 40 34             	mov    0x34(%eax),%eax
   16b9e:	89 c2                	mov    %eax,%edx
   16ba0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16ba3:	66 89 50 1a          	mov    %dx,0x1a(%eax)
    write_dir_entry(fat, item, file->p_index);
   16ba7:	8b 45 08             	mov    0x8(%ebp),%eax
   16baa:	8b 40 3c             	mov    0x3c(%eax),%eax
   16bad:	83 ec 04             	sub    $0x4,%esp
   16bb0:	50                   	push   %eax
   16bb1:	ff 75 f0             	pushl  -0x10(%ebp)
   16bb4:	ff 75 f4             	pushl  -0xc(%ebp)
   16bb7:	e8 6b f4 ff ff       	call   16027 <write_dir_entry>
   16bbc:	83 c4 10             	add    $0x10,%esp
   16bbf:	eb 04                	jmp    16bc5 <fatfs_close+0x88>
        return;
   16bc1:	90                   	nop
   16bc2:	eb 01                	jmp    16bc5 <fatfs_close+0x88>
        return;
   16bc4:	90                   	nop
}
   16bc5:	c9                   	leave  
   16bc6:	c3                   	ret    

00016bc7 <fatfs_seek>:


int fatfs_seek (file_t * file, uint32_t offset, int dir) {
   16bc7:	55                   	push   %ebp
   16bc8:	89 e5                	mov    %esp,%ebp
   16bca:	83 ec 28             	sub    $0x28,%esp
    if (dir != 0) {
   16bcd:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   16bd1:	74 0a                	je     16bdd <fatfs_seek+0x16>
        return -1;
   16bd3:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16bd8:	e9 c7 00 00 00       	jmp    16ca4 <fatfs_seek+0xdd>
    }

    fat_t * fat = (fat_t *)file->fs->data;
   16bdd:	8b 45 08             	mov    0x8(%ebp),%eax
   16be0:	8b 40 44             	mov    0x44(%eax),%eax
   16be3:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16be9:	89 45 e8             	mov    %eax,-0x18(%ebp)
    cluster_t curr_cluster = file->sblk;
   16bec:	8b 45 08             	mov    0x8(%ebp),%eax
   16bef:	8b 40 34             	mov    0x34(%eax),%eax
   16bf2:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
    uint32_t curr_pos = 0;
   16bf6:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
    uint32_t offset_to_move = offset;
   16bfd:	8b 45 0c             	mov    0xc(%ebp),%eax
   16c00:	89 45 ec             	mov    %eax,-0x14(%ebp)

    while (offset_to_move > 0) {
   16c03:	eb 7d                	jmp    16c82 <fatfs_seek+0xbb>
        uint32_t c_off = curr_pos % fat->cluster_byte_size;
   16c05:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c08:	8b 48 20             	mov    0x20(%eax),%ecx
   16c0b:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16c0e:	ba 00 00 00 00       	mov    $0x0,%edx
   16c13:	f7 f1                	div    %ecx
   16c15:	89 55 e4             	mov    %edx,-0x1c(%ebp)
        uint32_t curr_move = offset_to_move;
   16c18:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16c1b:	89 45 e0             	mov    %eax,-0x20(%ebp)

        if (c_off + curr_move < fat->cluster_byte_size) {
   16c1e:	8b 55 e4             	mov    -0x1c(%ebp),%edx
   16c21:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c24:	01 c2                	add    %eax,%edx
   16c26:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c29:	8b 40 20             	mov    0x20(%eax),%eax
   16c2c:	39 c2                	cmp    %eax,%edx
   16c2e:	73 08                	jae    16c38 <fatfs_seek+0x71>
            curr_pos += curr_move;
   16c30:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c33:	01 45 f0             	add    %eax,-0x10(%ebp)
            break;
   16c36:	eb 54                	jmp    16c8c <fatfs_seek+0xc5>
        }

        curr_move = fat->cluster_byte_size - c_off;
   16c38:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16c3b:	8b 40 20             	mov    0x20(%eax),%eax
   16c3e:	2b 45 e4             	sub    -0x1c(%ebp),%eax
   16c41:	89 45 e0             	mov    %eax,-0x20(%ebp)
        curr_pos += curr_move;
   16c44:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c47:	01 45 f0             	add    %eax,-0x10(%ebp)
        offset_to_move -= curr_move;
   16c4a:	8b 45 e0             	mov    -0x20(%ebp),%eax
   16c4d:	29 45 ec             	sub    %eax,-0x14(%ebp)

        curr_cluster = cluster_get_next(fat, curr_cluster);
   16c50:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c54:	83 ec 08             	sub    $0x8,%esp
   16c57:	50                   	push   %eax
   16c58:	ff 75 e8             	pushl  -0x18(%ebp)
   16c5b:	e8 b0 ed ff ff       	call   15a10 <cluster_get_next>
   16c60:	83 c4 10             	add    $0x10,%esp
   16c63:	66 89 45 f6          	mov    %ax,-0xa(%ebp)
        if (!cluster_is_valid(curr_cluster)) {
   16c67:	0f b7 45 f6          	movzwl -0xa(%ebp),%eax
   16c6b:	83 ec 0c             	sub    $0xc,%esp
   16c6e:	50                   	push   %eax
   16c6f:	e8 73 ed ff ff       	call   159e7 <cluster_is_valid>
   16c74:	83 c4 10             	add    $0x10,%esp
   16c77:	85 c0                	test   %eax,%eax
   16c79:	75 07                	jne    16c82 <fatfs_seek+0xbb>
            return -1;
   16c7b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16c80:	eb 22                	jmp    16ca4 <fatfs_seek+0xdd>
    while (offset_to_move > 0) {
   16c82:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16c86:	0f 85 79 ff ff ff    	jne    16c05 <fatfs_seek+0x3e>
        }
    }

    file->pos = curr_pos;
   16c8c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16c8f:	8b 45 08             	mov    0x8(%ebp),%eax
   16c92:	89 50 30             	mov    %edx,0x30(%eax)
    file->cblk = curr_cluster;
   16c95:	0f b7 55 f6          	movzwl -0xa(%ebp),%edx
   16c99:	8b 45 08             	mov    0x8(%ebp),%eax
   16c9c:	89 50 38             	mov    %edx,0x38(%eax)
    return 0;
   16c9f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16ca4:	c9                   	leave  
   16ca5:	c3                   	ret    

00016ca6 <fatfs_stat>:

int fatfs_stat (file_t * file, struct stat *st) {
   16ca6:	55                   	push   %ebp
   16ca7:	89 e5                	mov    %esp,%ebp
    return -1;
   16ca9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16cae:	5d                   	pop    %ebp
   16caf:	c3                   	ret    

00016cb0 <fatfs_opendir>:


int fatfs_opendir (struct _fs_t * fs,const char * name, DIR * dir) {
   16cb0:	55                   	push   %ebp
   16cb1:	89 e5                	mov    %esp,%ebp
    dir->index = 0;
   16cb3:	8b 45 10             	mov    0x10(%ebp),%eax
   16cb6:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    return 0;
   16cbc:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16cc1:	5d                   	pop    %ebp
   16cc2:	c3                   	ret    

00016cc3 <fatfs_readdir>:


int fatfs_readdir (struct _fs_t * fs,DIR* dir, struct dirent * dirent) {
   16cc3:	55                   	push   %ebp
   16cc4:	89 e5                	mov    %esp,%ebp
   16cc6:	83 ec 18             	sub    $0x18,%esp
    fat_t * fat = (fat_t *)fs->data;
   16cc9:	8b 45 08             	mov    0x8(%ebp),%eax
   16ccc:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16cd2:	89 45 f4             	mov    %eax,-0xc(%ebp)

    while (dir->index < fat->root_ent_cnt) {
   16cd5:	e9 be 00 00 00       	jmp    16d98 <fatfs_readdir+0xd5>
        diritem_t * item = read_dir_entry(fat, dir->index);
   16cda:	8b 45 0c             	mov    0xc(%ebp),%eax
   16cdd:	8b 00                	mov    (%eax),%eax
   16cdf:	83 ec 08             	sub    $0x8,%esp
   16ce2:	50                   	push   %eax
   16ce3:	ff 75 f4             	pushl  -0xc(%ebp)
   16ce6:	e8 bc f2 ff ff       	call   15fa7 <read_dir_entry>
   16ceb:	83 c4 10             	add    $0x10,%esp
   16cee:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (item == (diritem_t *)0) {
   16cf1:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   16cf5:	75 0a                	jne    16d01 <fatfs_readdir+0x3e>
            return -1;
   16cf7:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16cfc:	e9 b4 00 00 00       	jmp    16db5 <fatfs_readdir+0xf2>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16d01:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d04:	0f b6 00             	movzbl (%eax),%eax
   16d07:	84 c0                	test   %al,%al
   16d09:	0f 84 a0 00 00 00    	je     16daf <fatfs_readdir+0xec>
            break;
        }

        if (item->DIR_Name[0] != DIRITEM_NAME_FREE) {
   16d0f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d12:	0f b6 00             	movzbl (%eax),%eax
   16d15:	3c e5                	cmp    $0xe5,%al
   16d17:	74 72                	je     16d8b <fatfs_readdir+0xc8>
            file_type_t type = diritem_get_type(item);
   16d19:	83 ec 0c             	sub    $0xc,%esp
   16d1c:	ff 75 f0             	pushl  -0x10(%ebp)
   16d1f:	e8 3f f2 ff ff       	call   15f63 <diritem_get_type>
   16d24:	83 c4 10             	add    $0x10,%esp
   16d27:	89 45 ec             	mov    %eax,-0x14(%ebp)
            if ((type == FILE_NORMAL) || (type == FILE_DIR)) {
   16d2a:	83 7d ec 02          	cmpl   $0x2,-0x14(%ebp)
   16d2e:	74 06                	je     16d36 <fatfs_readdir+0x73>
   16d30:	83 7d ec 03          	cmpl   $0x3,-0x14(%ebp)
   16d34:	75 55                	jne    16d8b <fatfs_readdir+0xc8>
                dirent->index = dir->index++;
   16d36:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d39:	8b 00                	mov    (%eax),%eax
   16d3b:	8d 48 01             	lea    0x1(%eax),%ecx
   16d3e:	8b 55 0c             	mov    0xc(%ebp),%edx
   16d41:	89 0a                	mov    %ecx,(%edx)
   16d43:	8b 55 10             	mov    0x10(%ebp),%edx
   16d46:	89 02                	mov    %eax,(%edx)
                dirent->type = diritem_get_type(item);
   16d48:	83 ec 0c             	sub    $0xc,%esp
   16d4b:	ff 75 f0             	pushl  -0x10(%ebp)
   16d4e:	e8 10 f2 ff ff       	call   15f63 <diritem_get_type>
   16d53:	83 c4 10             	add    $0x10,%esp
   16d56:	89 c2                	mov    %eax,%edx
   16d58:	8b 45 10             	mov    0x10(%ebp),%eax
   16d5b:	89 50 04             	mov    %edx,0x4(%eax)
                dirent->size = item->DIR_FileSize;
   16d5e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16d61:	8b 40 1c             	mov    0x1c(%eax),%eax
   16d64:	89 c2                	mov    %eax,%edx
   16d66:	8b 45 10             	mov    0x10(%ebp),%eax
   16d69:	89 90 08 01 00 00    	mov    %edx,0x108(%eax)
                diritem_get_name(item, dirent->name);
   16d6f:	8b 45 10             	mov    0x10(%ebp),%eax
   16d72:	83 c0 08             	add    $0x8,%eax
   16d75:	83 ec 08             	sub    $0x8,%esp
   16d78:	50                   	push   %eax
   16d79:	ff 75 f0             	pushl  -0x10(%ebp)
   16d7c:	e8 4f f1 ff ff       	call   15ed0 <diritem_get_name>
   16d81:	83 c4 10             	add    $0x10,%esp
                return 0;
   16d84:	b8 00 00 00 00       	mov    $0x0,%eax
   16d89:	eb 2a                	jmp    16db5 <fatfs_readdir+0xf2>
            }
        }

        dir->index++;
   16d8b:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d8e:	8b 00                	mov    (%eax),%eax
   16d90:	8d 50 01             	lea    0x1(%eax),%edx
   16d93:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d96:	89 10                	mov    %edx,(%eax)
    while (dir->index < fat->root_ent_cnt) {
   16d98:	8b 45 0c             	mov    0xc(%ebp),%eax
   16d9b:	8b 00                	mov    (%eax),%eax
   16d9d:	89 c2                	mov    %eax,%edx
   16d9f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16da2:	8b 40 14             	mov    0x14(%eax),%eax
   16da5:	39 c2                	cmp    %eax,%edx
   16da7:	0f 82 2d ff ff ff    	jb     16cda <fatfs_readdir+0x17>
   16dad:	eb 01                	jmp    16db0 <fatfs_readdir+0xed>
            break;
   16daf:	90                   	nop
    }

    return -1;
   16db0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16db5:	c9                   	leave  
   16db6:	c3                   	ret    

00016db7 <fatfs_closedir>:


int fatfs_closedir (struct _fs_t * fs,DIR *dir) {
   16db7:	55                   	push   %ebp
   16db8:	89 e5                	mov    %esp,%ebp
    return 0;
   16dba:	b8 00 00 00 00       	mov    $0x0,%eax
}
   16dbf:	5d                   	pop    %ebp
   16dc0:	c3                   	ret    

00016dc1 <fatfs_unlink>:


int fatfs_unlink (struct _fs_t * fs, const char * path) {
   16dc1:	55                   	push   %ebp
   16dc2:	89 e5                	mov    %esp,%ebp
   16dc4:	83 ec 38             	sub    $0x38,%esp
    fat_t * fat = (fat_t *)fs->data;
   16dc7:	8b 45 08             	mov    0x8(%ebp),%eax
   16dca:	8b 80 08 02 00 00    	mov    0x208(%eax),%eax
   16dd0:	89 45 f0             	mov    %eax,-0x10(%ebp)

    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16dd3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   16dda:	e9 b3 00 00 00       	jmp    16e92 <fatfs_unlink+0xd1>
        diritem_t * item = read_dir_entry(fat, i);
   16ddf:	83 ec 08             	sub    $0x8,%esp
   16de2:	ff 75 f4             	pushl  -0xc(%ebp)
   16de5:	ff 75 f0             	pushl  -0x10(%ebp)
   16de8:	e8 ba f1 ff ff       	call   15fa7 <read_dir_entry>
   16ded:	83 c4 10             	add    $0x10,%esp
   16df0:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (item == (diritem_t *)0) {
   16df3:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   16df7:	75 0a                	jne    16e03 <fatfs_unlink+0x42>
            return -1;
   16df9:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   16dfe:	e9 a8 00 00 00       	jmp    16eab <fatfs_unlink+0xea>
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_END) {
   16e03:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e06:	0f b6 00             	movzbl (%eax),%eax
   16e09:	84 c0                	test   %al,%al
   16e0b:	0f 84 94 00 00 00    	je     16ea5 <fatfs_unlink+0xe4>
            break;
        }

        if (item->DIR_Name[0] == DIRITEM_NAME_FREE) {
   16e11:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e14:	0f b6 00             	movzbl (%eax),%eax
   16e17:	3c e5                	cmp    $0xe5,%al
   16e19:	74 72                	je     16e8d <fatfs_unlink+0xcc>
            continue;
        }

        if (diritem_name_match(item, path)) {
   16e1b:	83 ec 08             	sub    $0x8,%esp
   16e1e:	ff 75 0c             	pushl  0xc(%ebp)
   16e21:	ff 75 ec             	pushl  -0x14(%ebp)
   16e24:	e8 e2 ef ff ff       	call   15e0b <diritem_name_match>
   16e29:	83 c4 10             	add    $0x10,%esp
   16e2c:	85 c0                	test   %eax,%eax
   16e2e:	74 5e                	je     16e8e <fatfs_unlink+0xcd>
            int cluster = (item->DIR_FstClusHI << 16) | item->DIR_FstClusL0;
   16e30:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e33:	0f b7 40 14          	movzwl 0x14(%eax),%eax
   16e37:	0f b7 c0             	movzwl %ax,%eax
   16e3a:	c1 e0 10             	shl    $0x10,%eax
   16e3d:	89 c2                	mov    %eax,%edx
   16e3f:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16e42:	0f b7 40 1a          	movzwl 0x1a(%eax),%eax
   16e46:	0f b7 c0             	movzwl %ax,%eax
   16e49:	09 d0                	or     %edx,%eax
   16e4b:	89 45 e8             	mov    %eax,-0x18(%ebp)
            cluster_free_chain(fat, cluster);
   16e4e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   16e51:	0f b7 c0             	movzwl %ax,%eax
   16e54:	83 ec 08             	sub    $0x8,%esp
   16e57:	50                   	push   %eax
   16e58:	ff 75 f0             	pushl  -0x10(%ebp)
   16e5b:	e8 9d ed ff ff       	call   15bfd <cluster_free_chain>
   16e60:	83 c4 10             	add    $0x10,%esp

            diritem_t item;
            kernel_memset(&item, 0, sizeof(diritem_t));
   16e63:	83 ec 04             	sub    $0x4,%esp
   16e66:	6a 20                	push   $0x20
   16e68:	6a 00                	push   $0x0
   16e6a:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16e6d:	50                   	push   %eax
   16e6e:	e8 09 16 00 00       	call   1847c <kernel_memset>
   16e73:	83 c4 10             	add    $0x10,%esp
            return write_dir_entry(fat, &item, i);
   16e76:	83 ec 04             	sub    $0x4,%esp
   16e79:	ff 75 f4             	pushl  -0xc(%ebp)
   16e7c:	8d 45 c8             	lea    -0x38(%ebp),%eax
   16e7f:	50                   	push   %eax
   16e80:	ff 75 f0             	pushl  -0x10(%ebp)
   16e83:	e8 9f f1 ff ff       	call   16027 <write_dir_entry>
   16e88:	83 c4 10             	add    $0x10,%esp
   16e8b:	eb 1e                	jmp    16eab <fatfs_unlink+0xea>
            continue;
   16e8d:	90                   	nop
    for (int i = 0; i < fat->root_ent_cnt; i++) {
   16e8e:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   16e92:	8b 45 f0             	mov    -0x10(%ebp),%eax
   16e95:	8b 50 14             	mov    0x14(%eax),%edx
   16e98:	8b 45 f4             	mov    -0xc(%ebp),%eax
   16e9b:	39 c2                	cmp    %eax,%edx
   16e9d:	0f 87 3c ff ff ff    	ja     16ddf <fatfs_unlink+0x1e>
   16ea3:	eb 01                	jmp    16ea6 <fatfs_unlink+0xe5>
            break;
   16ea5:	90                   	nop
        }
    }

    return -1;
   16ea6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   16eab:	c9                   	leave  
   16eac:	c3                   	ret    

00016ead <file_alloc>:
#include "ipc/mutex.h"

static file_t file_table[FILE_TABLE_SIZE];       
static mutex_t file_alloc_mutex;                 

file_t * file_alloc (void) {
   16ead:	55                   	push   %ebp
   16eae:	89 e5                	mov    %esp,%ebp
   16eb0:	83 ec 18             	sub    $0x18,%esp
    file_t * file = (file_t *)0;
   16eb3:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

    mutex_lock(&file_alloc_mutex);
   16eba:	83 ec 0c             	sub    $0xc,%esp
   16ebd:	68 a0 c8 05 00       	push   $0x5c8a0
   16ec2:	e8 98 0e 00 00       	call   17d5f <mutex_lock>
   16ec7:	83 c4 10             	add    $0x10,%esp
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16eca:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)
   16ed1:	eb 47                	jmp    16f1a <file_alloc+0x6d>
        file_t * p_file = file_table + i;
   16ed3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   16ed6:	89 d0                	mov    %edx,%eax
   16ed8:	c1 e0 03             	shl    $0x3,%eax
   16edb:	01 d0                	add    %edx,%eax
   16edd:	c1 e0 03             	shl    $0x3,%eax
   16ee0:	05 a0 88 03 00       	add    $0x388a0,%eax
   16ee5:	89 45 ec             	mov    %eax,-0x14(%ebp)
        if (p_file->ref == 0) {
   16ee8:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16eeb:	8b 40 28             	mov    0x28(%eax),%eax
   16eee:	85 c0                	test   %eax,%eax
   16ef0:	75 24                	jne    16f16 <file_alloc+0x69>
			kernel_memset(p_file, 0, sizeof(file_t));
   16ef2:	83 ec 04             	sub    $0x4,%esp
   16ef5:	6a 48                	push   $0x48
   16ef7:	6a 00                	push   $0x0
   16ef9:	ff 75 ec             	pushl  -0x14(%ebp)
   16efc:	e8 7b 15 00 00       	call   1847c <kernel_memset>
   16f01:	83 c4 10             	add    $0x10,%esp
            p_file->ref = 1;
   16f04:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f07:	c7 40 28 01 00 00 00 	movl   $0x1,0x28(%eax)
			file = p_file;
   16f0e:	8b 45 ec             	mov    -0x14(%ebp),%eax
   16f11:	89 45 f4             	mov    %eax,-0xc(%ebp)
            break;
   16f14:	eb 0d                	jmp    16f23 <file_alloc+0x76>
    for (int i = 0; i < FILE_TABLE_SIZE; i++) {
   16f16:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)
   16f1a:	81 7d f0 ff 07 00 00 	cmpl   $0x7ff,-0x10(%ebp)
   16f21:	7e b0                	jle    16ed3 <file_alloc+0x26>
        }
    }
    mutex_unlock(&file_alloc_mutex);
   16f23:	83 ec 0c             	sub    $0xc,%esp
   16f26:	68 a0 c8 05 00       	push   $0x5c8a0
   16f2b:	e8 c6 0e 00 00       	call   17df6 <mutex_unlock>
   16f30:	83 c4 10             	add    $0x10,%esp
    return file;
   16f33:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   16f36:	c9                   	leave  
   16f37:	c3                   	ret    

00016f38 <file_free>:


void file_free (file_t * file) {
   16f38:	55                   	push   %ebp
   16f39:	89 e5                	mov    %esp,%ebp
   16f3b:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16f3e:	83 ec 0c             	sub    $0xc,%esp
   16f41:	68 a0 c8 05 00       	push   $0x5c8a0
   16f46:	e8 14 0e 00 00       	call   17d5f <mutex_lock>
   16f4b:	83 c4 10             	add    $0x10,%esp
    if (file->ref) {
   16f4e:	8b 45 08             	mov    0x8(%ebp),%eax
   16f51:	8b 40 28             	mov    0x28(%eax),%eax
   16f54:	85 c0                	test   %eax,%eax
   16f56:	74 0f                	je     16f67 <file_free+0x2f>
        file->ref--;
   16f58:	8b 45 08             	mov    0x8(%ebp),%eax
   16f5b:	8b 40 28             	mov    0x28(%eax),%eax
   16f5e:	8d 50 ff             	lea    -0x1(%eax),%edx
   16f61:	8b 45 08             	mov    0x8(%ebp),%eax
   16f64:	89 50 28             	mov    %edx,0x28(%eax)
    }
    mutex_unlock(&file_alloc_mutex);
   16f67:	83 ec 0c             	sub    $0xc,%esp
   16f6a:	68 a0 c8 05 00       	push   $0x5c8a0
   16f6f:	e8 82 0e 00 00       	call   17df6 <mutex_unlock>
   16f74:	83 c4 10             	add    $0x10,%esp
}
   16f77:	90                   	nop
   16f78:	c9                   	leave  
   16f79:	c3                   	ret    

00016f7a <file_inc_ref>:


void file_inc_ref (file_t * file) {
   16f7a:	55                   	push   %ebp
   16f7b:	89 e5                	mov    %esp,%ebp
   16f7d:	83 ec 08             	sub    $0x8,%esp
    mutex_lock(&file_alloc_mutex);
   16f80:	83 ec 0c             	sub    $0xc,%esp
   16f83:	68 a0 c8 05 00       	push   $0x5c8a0
   16f88:	e8 d2 0d 00 00       	call   17d5f <mutex_lock>
   16f8d:	83 c4 10             	add    $0x10,%esp
	file->ref++;
   16f90:	8b 45 08             	mov    0x8(%ebp),%eax
   16f93:	8b 40 28             	mov    0x28(%eax),%eax
   16f96:	8d 50 01             	lea    0x1(%eax),%edx
   16f99:	8b 45 08             	mov    0x8(%ebp),%eax
   16f9c:	89 50 28             	mov    %edx,0x28(%eax)
    mutex_unlock(&file_alloc_mutex);
   16f9f:	83 ec 0c             	sub    $0xc,%esp
   16fa2:	68 a0 c8 05 00       	push   $0x5c8a0
   16fa7:	e8 4a 0e 00 00       	call   17df6 <mutex_unlock>
   16fac:	83 c4 10             	add    $0x10,%esp
}
   16faf:	90                   	nop
   16fb0:	c9                   	leave  
   16fb1:	c3                   	ret    

00016fb2 <file_table_init>:

void file_table_init (void) {
   16fb2:	55                   	push   %ebp
   16fb3:	89 e5                	mov    %esp,%ebp
   16fb5:	83 ec 08             	sub    $0x8,%esp
	 
	kernel_memset(&file_table, 0, sizeof(file_table));
   16fb8:	83 ec 04             	sub    $0x4,%esp
   16fbb:	68 00 40 02 00       	push   $0x24000
   16fc0:	6a 00                	push   $0x0
   16fc2:	68 a0 88 03 00       	push   $0x388a0
   16fc7:	e8 b0 14 00 00       	call   1847c <kernel_memset>
   16fcc:	83 c4 10             	add    $0x10,%esp
	mutex_init(&file_alloc_mutex);
   16fcf:	83 ec 0c             	sub    $0xc,%esp
   16fd2:	68 a0 c8 05 00       	push   $0x5c8a0
   16fd7:	e8 55 0d 00 00       	call   17d31 <mutex_init>
   16fdc:	83 c4 10             	add    $0x10,%esp
}
   16fdf:	90                   	nop
   16fe0:	c9                   	leave  
   16fe1:	c3                   	ret    

00016fe2 <list_node_next>:
{
   16fe2:	55                   	push   %ebp
   16fe3:	89 e5                	mov    %esp,%ebp
    return node->next;
   16fe5:	8b 45 08             	mov    0x8(%ebp),%eax
   16fe8:	8b 40 04             	mov    0x4(%eax),%eax
}
   16feb:	5d                   	pop    %ebp
   16fec:	c3                   	ret    

00016fed <list_first>:
{
   16fed:	55                   	push   %ebp
   16fee:	89 e5                	mov    %esp,%ebp
    return list->first;
   16ff0:	8b 45 08             	mov    0x8(%ebp),%eax
   16ff3:	8b 00                	mov    (%eax),%eax
}
   16ff5:	5d                   	pop    %ebp
   16ff6:	c3                   	ret    

00016ff7 <is_fd_bad>:
static fs_t * root_fs;				

extern fs_op_t devfs_op;
extern fs_op_t fatfs_op;

static int is_fd_bad (int file) {
   16ff7:	55                   	push   %ebp
   16ff8:	89 e5                	mov    %esp,%ebp
	if ((file < 0) && (file >= TASK_OFILE_NR)) {
   16ffa:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   16ffe:	79 0d                	jns    1700d <is_fd_bad+0x16>
   17000:	83 7d 08 7f          	cmpl   $0x7f,0x8(%ebp)
   17004:	7e 07                	jle    1700d <is_fd_bad+0x16>
		return 1;
   17006:	b8 01 00 00 00       	mov    $0x1,%eax
   1700b:	eb 05                	jmp    17012 <is_fd_bad+0x1b>
	}

	return 0;
   1700d:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17012:	5d                   	pop    %ebp
   17013:	c3                   	ret    

00017014 <get_fs_op>:


static fs_op_t * get_fs_op (fs_type_t type, int major) {
   17014:	55                   	push   %ebp
   17015:	89 e5                	mov    %esp,%ebp
	switch (type) {
   17017:	8b 45 08             	mov    0x8(%ebp),%eax
   1701a:	85 c0                	test   %eax,%eax
   1701c:	74 07                	je     17025 <get_fs_op+0x11>
   1701e:	83 f8 01             	cmp    $0x1,%eax
   17021:	74 09                	je     1702c <get_fs_op+0x18>
   17023:	eb 0e                	jmp    17033 <get_fs_op+0x1f>
	case FS_FAT16:
		return &fatfs_op;
   17025:	b8 40 a1 01 00       	mov    $0x1a140,%eax
   1702a:	eb 0c                	jmp    17038 <get_fs_op+0x24>
	case FS_DEVFS:
		return &devfs_op;
   1702c:	b8 00 a1 01 00       	mov    $0x1a100,%eax
   17031:	eb 05                	jmp    17038 <get_fs_op+0x24>
	default:
		return (fs_op_t *)0;
   17033:	b8 00 00 00 00       	mov    $0x0,%eax
	}
}
   17038:	5d                   	pop    %ebp
   17039:	c3                   	ret    

0001703a <mount>:


static fs_t * mount (fs_type_t type, char * mount_point, int dev_major, int dev_minor) {
   1703a:	55                   	push   %ebp
   1703b:	89 e5                	mov    %esp,%ebp
   1703d:	83 ec 28             	sub    $0x28,%esp
	fs_t * fs = (fs_t *)0;
   17040:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)

	log_printf("mount file system, name: %s, dev: %x", mount_point, dev_major);
   17047:	83 ec 04             	sub    $0x4,%esp
   1704a:	ff 75 10             	pushl  0x10(%ebp)
   1704d:	ff 75 0c             	pushl  0xc(%ebp)
   17050:	68 e4 9b 01 00       	push   $0x19be4
   17055:	e8 cc 19 00 00       	call   18a26 <log_printf>
   1705a:	83 c4 10             	add    $0x10,%esp

 	list_node_t * curr = list_first(&mounted_list);
   1705d:	83 ec 0c             	sub    $0xc,%esp
   17060:	68 c0 c8 05 00       	push   $0x5c8c0
   17065:	e8 83 ff ff ff       	call   16fed <list_first>
   1706a:	83 c4 10             	add    $0x10,%esp
   1706d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   17070:	eb 59                	jmp    170cb <mount+0x91>
		fs_t * fs = list_node_parent(curr, fs_t, node);
   17072:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17076:	74 0a                	je     17082 <mount+0x48>
   17078:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1707b:	2d 10 02 00 00       	sub    $0x210,%eax
   17080:	eb 05                	jmp    17087 <mount+0x4d>
   17082:	b8 00 00 00 00       	mov    $0x0,%eax
   17087:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (kernel_strncmp(fs->mount_point, mount_point, FS_MOUNTP_SIZE) == 0) {
   1708a:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   1708d:	83 ec 04             	sub    $0x4,%esp
   17090:	68 00 02 00 00       	push   $0x200
   17095:	ff 75 0c             	pushl  0xc(%ebp)
   17098:	50                   	push   %eax
   17099:	e8 11 13 00 00       	call   183af <kernel_strncmp>
   1709e:	83 c4 10             	add    $0x10,%esp
   170a1:	85 c0                	test   %eax,%eax
   170a3:	75 15                	jne    170ba <mount+0x80>
			log_printf("fs alreay mounted.");
   170a5:	83 ec 0c             	sub    $0xc,%esp
   170a8:	68 09 9c 01 00       	push   $0x19c09
   170ad:	e8 74 19 00 00       	call   18a26 <log_printf>
   170b2:	83 c4 10             	add    $0x10,%esp
			goto mount_failed;
   170b5:	e9 21 01 00 00       	jmp    171db <mount+0x1a1>
		}
		curr = list_node_next(curr);
   170ba:	83 ec 0c             	sub    $0xc,%esp
   170bd:	ff 75 f0             	pushl  -0x10(%ebp)
   170c0:	e8 1d ff ff ff       	call   16fe2 <list_node_next>
   170c5:	83 c4 10             	add    $0x10,%esp
   170c8:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (curr) {
   170cb:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   170cf:	75 a1                	jne    17072 <mount+0x38>
	}

	list_node_t * free_node = list_remove_first(&free_list);
   170d1:	83 ec 0c             	sub    $0xc,%esp
   170d4:	68 cc c8 05 00       	push   $0x5c8cc
   170d9:	e8 1c 18 00 00       	call   188fa <list_remove_first>
   170de:	83 c4 10             	add    $0x10,%esp
   170e1:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!free_node) {
   170e4:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   170e8:	75 15                	jne    170ff <mount+0xc5>
		log_printf("no free fs, mount failed.");
   170ea:	83 ec 0c             	sub    $0xc,%esp
   170ed:	68 1c 9c 01 00       	push   $0x19c1c
   170f2:	e8 2f 19 00 00       	call   18a26 <log_printf>
   170f7:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   170fa:	e9 dc 00 00 00       	jmp    171db <mount+0x1a1>
	}
	fs = list_node_parent(free_node, fs_t, node);
   170ff:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17103:	74 0a                	je     1710f <mount+0xd5>
   17105:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17108:	2d 10 02 00 00       	sub    $0x210,%eax
   1710d:	eb 05                	jmp    17114 <mount+0xda>
   1710f:	b8 00 00 00 00       	mov    $0x0,%eax
   17114:	89 45 f4             	mov    %eax,-0xc(%ebp)

	fs_op_t * op = get_fs_op(type, dev_major);
   17117:	83 ec 08             	sub    $0x8,%esp
   1711a:	ff 75 10             	pushl  0x10(%ebp)
   1711d:	ff 75 08             	pushl  0x8(%ebp)
   17120:	e8 ef fe ff ff       	call   17014 <get_fs_op>
   17125:	83 c4 10             	add    $0x10,%esp
   17128:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (!op) {
   1712b:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   1712f:	75 18                	jne    17149 <mount+0x10f>
		log_printf("unsupported fs type: %d", type);
   17131:	83 ec 08             	sub    $0x8,%esp
   17134:	ff 75 08             	pushl  0x8(%ebp)
   17137:	68 36 9c 01 00       	push   $0x19c36
   1713c:	e8 e5 18 00 00       	call   18a26 <log_printf>
   17141:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   17144:	e9 92 00 00 00       	jmp    171db <mount+0x1a1>
	}

	kernel_memset(fs, 0, sizeof(fs_t));
   17149:	83 ec 04             	sub    $0x4,%esp
   1714c:	68 60 02 00 00       	push   $0x260
   17151:	6a 00                	push   $0x0
   17153:	ff 75 f4             	pushl  -0xc(%ebp)
   17156:	e8 21 13 00 00       	call   1847c <kernel_memset>
   1715b:	83 c4 10             	add    $0x10,%esp
	kernel_strncpy(fs->mount_point, mount_point, FS_MOUNTP_SIZE);
   1715e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17161:	83 ec 04             	sub    $0x4,%esp
   17164:	68 00 02 00 00       	push   $0x200
   17169:	ff 75 0c             	pushl  0xc(%ebp)
   1716c:	50                   	push   %eax
   1716d:	e8 92 11 00 00       	call   18304 <kernel_strncpy>
   17172:	83 c4 10             	add    $0x10,%esp
	fs->op = op;
   17175:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17178:	8b 55 e8             	mov    -0x18(%ebp),%edx
   1717b:	89 90 04 02 00 00    	mov    %edx,0x204(%eax)
	fs->mutex = (mutex_t *)0;
   17181:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17184:	c7 80 5c 02 00 00 00 	movl   $0x0,0x25c(%eax)
   1718b:	00 00 00 

	if (op->mount(fs, dev_major, dev_minor) < 0) {
   1718e:	8b 45 e8             	mov    -0x18(%ebp),%eax
   17191:	8b 00                	mov    (%eax),%eax
   17193:	83 ec 04             	sub    $0x4,%esp
   17196:	ff 75 14             	pushl  0x14(%ebp)
   17199:	ff 75 10             	pushl  0x10(%ebp)
   1719c:	ff 75 f4             	pushl  -0xc(%ebp)
   1719f:	ff d0                	call   *%eax
   171a1:	83 c4 10             	add    $0x10,%esp
   171a4:	85 c0                	test   %eax,%eax
   171a6:	79 15                	jns    171bd <mount+0x183>
		log_printf("mount fs %s failed", mount_point);
   171a8:	83 ec 08             	sub    $0x8,%esp
   171ab:	ff 75 0c             	pushl  0xc(%ebp)
   171ae:	68 4e 9c 01 00       	push   $0x19c4e
   171b3:	e8 6e 18 00 00       	call   18a26 <log_printf>
   171b8:	83 c4 10             	add    $0x10,%esp
		goto mount_failed;
   171bb:	eb 1e                	jmp    171db <mount+0x1a1>
	}
	list_insert_last(&mounted_list, &fs->node);
   171bd:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171c0:	05 10 02 00 00       	add    $0x210,%eax
   171c5:	83 ec 08             	sub    $0x8,%esp
   171c8:	50                   	push   %eax
   171c9:	68 c0 c8 05 00       	push   $0x5c8c0
   171ce:	e8 c3 16 00 00       	call   18896 <list_insert_last>
   171d3:	83 c4 10             	add    $0x10,%esp
	return fs;
   171d6:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171d9:	eb 24                	jmp    171ff <mount+0x1c5>
mount_failed:
	if (fs) {
   171db:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   171df:	74 19                	je     171fa <mount+0x1c0>
		list_insert_first(&free_list, &fs->node);
   171e1:	8b 45 f4             	mov    -0xc(%ebp),%eax
   171e4:	05 10 02 00 00       	add    $0x210,%eax
   171e9:	83 ec 08             	sub    $0x8,%esp
   171ec:	50                   	push   %eax
   171ed:	68 cc c8 05 00       	push   $0x5c8cc
   171f2:	e8 40 16 00 00       	call   18837 <list_insert_first>
   171f7:	83 c4 10             	add    $0x10,%esp
	}
	return (fs_t *)0;
   171fa:	b8 00 00 00 00       	mov    $0x0,%eax
}
   171ff:	c9                   	leave  
   17200:	c3                   	ret    

00017201 <mount_list_init>:


static void mount_list_init (void) {
   17201:	55                   	push   %ebp
   17202:	89 e5                	mov    %esp,%ebp
   17204:	83 ec 18             	sub    $0x18,%esp
	list_init(&free_list);
   17207:	83 ec 0c             	sub    $0xc,%esp
   1720a:	68 cc c8 05 00       	push   $0x5c8cc
   1720f:	e8 fe 15 00 00       	call   18812 <list_init>
   17214:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17217:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   1721e:	eb 28                	jmp    17248 <mount_list_init+0x47>
		list_insert_first(&free_list, &fs_tbl[i].node);
   17220:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17223:	69 c0 60 02 00 00    	imul   $0x260,%eax,%eax
   17229:	05 10 02 00 00       	add    $0x210,%eax
   1722e:	05 e0 c8 05 00       	add    $0x5c8e0,%eax
   17233:	83 ec 08             	sub    $0x8,%esp
   17236:	50                   	push   %eax
   17237:	68 cc c8 05 00       	push   $0x5c8cc
   1723c:	e8 f6 15 00 00       	call   18837 <list_insert_first>
   17241:	83 c4 10             	add    $0x10,%esp
	for (int i = 0; i < FS_TABLE_SIZE; i++) {
   17244:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   17248:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)
   1724c:	7e d2                	jle    17220 <mount_list_init+0x1f>
	}
	list_init(&mounted_list);
   1724e:	83 ec 0c             	sub    $0xc,%esp
   17251:	68 c0 c8 05 00       	push   $0x5c8c0
   17256:	e8 b7 15 00 00       	call   18812 <list_init>
   1725b:	83 c4 10             	add    $0x10,%esp
}
   1725e:	90                   	nop
   1725f:	c9                   	leave  
   17260:	c3                   	ret    

00017261 <fs_init>:


void fs_init (void) {
   17261:	55                   	push   %ebp
   17262:	89 e5                	mov    %esp,%ebp
   17264:	83 ec 18             	sub    $0x18,%esp
	mount_list_init();
   17267:	e8 95 ff ff ff       	call   17201 <mount_list_init>
    file_table_init();
   1726c:	e8 41 fd ff ff       	call   16fb2 <file_table_init>

	disk_init();
   17271:	e8 96 d4 ff ff       	call   1470c <disk_init>

	fs_t * fs = mount(FS_DEVFS, "/dev", 0, 0);
   17276:	6a 00                	push   $0x0
   17278:	6a 00                	push   $0x0
   1727a:	68 61 9c 01 00       	push   $0x19c61
   1727f:	6a 01                	push   $0x1
   17281:	e8 b4 fd ff ff       	call   1703a <mount>
   17286:	83 c4 10             	add    $0x10,%esp
   17289:	89 45 f4             	mov    %eax,-0xc(%ebp)
	ASSERT(fs != (fs_t *)0);
   1728c:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17290:	75 19                	jne    172ab <fs_init+0x4a>
   17292:	68 66 9c 01 00       	push   $0x19c66
   17297:	68 60 9d 01 00       	push   $0x19d60
   1729c:	6a 6e                	push   $0x6e
   1729e:	68 78 9c 01 00       	push   $0x19c78
   172a3:	e8 21 15 00 00       	call   187c9 <panic>
   172a8:	83 c4 10             	add    $0x10,%esp

	root_fs = mount(FS_FAT16, "/home", ROOT_DEV);
   172ab:	68 b1 00 00 00       	push   $0xb1
   172b0:	6a 02                	push   $0x2
   172b2:	68 b2 9c 01 00       	push   $0x19cb2
   172b7:	6a 00                	push   $0x0
   172b9:	e8 7c fd ff ff       	call   1703a <mount>
   172be:	83 c4 10             	add    $0x10,%esp
   172c1:	a3 a0 e0 05 00       	mov    %eax,0x5e0a0
	ASSERT(root_fs != (fs_t *)0);
   172c6:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   172cb:	85 c0                	test   %eax,%eax
   172cd:	75 19                	jne    172e8 <fs_init+0x87>
   172cf:	68 b8 9c 01 00       	push   $0x19cb8
   172d4:	68 60 9d 01 00       	push   $0x19d60
   172d9:	6a 71                	push   $0x71
   172db:	68 78 9c 01 00       	push   $0x19c78
   172e0:	e8 e4 14 00 00       	call   187c9 <panic>
   172e5:	83 c4 10             	add    $0x10,%esp
}
   172e8:	90                   	nop
   172e9:	c9                   	leave  
   172ea:	c3                   	ret    

000172eb <path_to_num>:


int path_to_num (const char * path, int * num) {
   172eb:	55                   	push   %ebp
   172ec:	89 e5                	mov    %esp,%ebp
   172ee:	83 ec 10             	sub    $0x10,%esp
	int n = 0;
   172f1:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

	const char * c = path;
   172f8:	8b 45 08             	mov    0x8(%ebp),%eax
   172fb:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*c && *c != '/') {
   172fe:	eb 23                	jmp    17323 <path_to_num+0x38>
		n = n * 10 + *c - '0';
   17300:	8b 55 fc             	mov    -0x4(%ebp),%edx
   17303:	89 d0                	mov    %edx,%eax
   17305:	c1 e0 02             	shl    $0x2,%eax
   17308:	01 d0                	add    %edx,%eax
   1730a:	01 c0                	add    %eax,%eax
   1730c:	89 c2                	mov    %eax,%edx
   1730e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17311:	0f b6 00             	movzbl (%eax),%eax
   17314:	0f be c0             	movsbl %al,%eax
   17317:	01 d0                	add    %edx,%eax
   17319:	83 e8 30             	sub    $0x30,%eax
   1731c:	89 45 fc             	mov    %eax,-0x4(%ebp)
		c++;
   1731f:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c && *c != '/') {
   17323:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17326:	0f b6 00             	movzbl (%eax),%eax
   17329:	84 c0                	test   %al,%al
   1732b:	74 0a                	je     17337 <path_to_num+0x4c>
   1732d:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17330:	0f b6 00             	movzbl (%eax),%eax
   17333:	3c 2f                	cmp    $0x2f,%al
   17335:	75 c9                	jne    17300 <path_to_num+0x15>
	}
	*num = n;
   17337:	8b 45 0c             	mov    0xc(%ebp),%eax
   1733a:	8b 55 fc             	mov    -0x4(%ebp),%edx
   1733d:	89 10                	mov    %edx,(%eax)
	return 0;
   1733f:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17344:	c9                   	leave  
   17345:	c3                   	ret    

00017346 <path_begin_with>:


int path_begin_with (const char * path, const char * str) {
   17346:	55                   	push   %ebp
   17347:	89 e5                	mov    %esp,%ebp
   17349:	83 ec 10             	sub    $0x10,%esp
	const char * s1 = path, * s2 = str;
   1734c:	8b 45 08             	mov    0x8(%ebp),%eax
   1734f:	89 45 fc             	mov    %eax,-0x4(%ebp)
   17352:	8b 45 0c             	mov    0xc(%ebp),%eax
   17355:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   17358:	eb 08                	jmp    17362 <path_begin_with+0x1c>
		s1++;
   1735a:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
		s2++;
   1735e:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*s1 && *s2 && (*s1 == *s2)) {
   17362:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17365:	0f b6 00             	movzbl (%eax),%eax
   17368:	84 c0                	test   %al,%al
   1736a:	74 1a                	je     17386 <path_begin_with+0x40>
   1736c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1736f:	0f b6 00             	movzbl (%eax),%eax
   17372:	84 c0                	test   %al,%al
   17374:	74 10                	je     17386 <path_begin_with+0x40>
   17376:	8b 45 fc             	mov    -0x4(%ebp),%eax
   17379:	0f b6 10             	movzbl (%eax),%edx
   1737c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1737f:	0f b6 00             	movzbl (%eax),%eax
   17382:	38 c2                	cmp    %al,%dl
   17384:	74 d4                	je     1735a <path_begin_with+0x14>
	}

	return *s2 == '\0';
   17386:	8b 45 f8             	mov    -0x8(%ebp),%eax
   17389:	0f b6 00             	movzbl (%eax),%eax
   1738c:	84 c0                	test   %al,%al
   1738e:	0f 94 c0             	sete   %al
   17391:	0f b6 c0             	movzbl %al,%eax
}
   17394:	c9                   	leave  
   17395:	c3                   	ret    

00017396 <path_next_child>:


const char * path_next_child (const char * path) {
   17396:	55                   	push   %ebp
   17397:	89 e5                	mov    %esp,%ebp
   17399:	83 ec 10             	sub    $0x10,%esp
   const char * c = path;
   1739c:	8b 45 08             	mov    0x8(%ebp),%eax
   1739f:	89 45 fc             	mov    %eax,-0x4(%ebp)

    while (*c && (*c++ == '/')) {}
   173a2:	90                   	nop
   173a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173a6:	0f b6 00             	movzbl (%eax),%eax
   173a9:	84 c0                	test   %al,%al
   173ab:	74 10                	je     173bd <path_next_child+0x27>
   173ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173b0:	8d 50 01             	lea    0x1(%eax),%edx
   173b3:	89 55 fc             	mov    %edx,-0x4(%ebp)
   173b6:	0f b6 00             	movzbl (%eax),%eax
   173b9:	3c 2f                	cmp    $0x2f,%al
   173bb:	74 e6                	je     173a3 <path_next_child+0xd>
    while (*c && (*c++ != '/')) {}
   173bd:	90                   	nop
   173be:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173c1:	0f b6 00             	movzbl (%eax),%eax
   173c4:	84 c0                	test   %al,%al
   173c6:	74 10                	je     173d8 <path_next_child+0x42>
   173c8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173cb:	8d 50 01             	lea    0x1(%eax),%edx
   173ce:	89 55 fc             	mov    %edx,-0x4(%ebp)
   173d1:	0f b6 00             	movzbl (%eax),%eax
   173d4:	3c 2f                	cmp    $0x2f,%al
   173d6:	75 e6                	jne    173be <path_next_child+0x28>
    return *c ? c : (const char *)0;
   173d8:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173db:	0f b6 00             	movzbl (%eax),%eax
   173de:	84 c0                	test   %al,%al
   173e0:	74 05                	je     173e7 <path_next_child+0x51>
   173e2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   173e5:	eb 05                	jmp    173ec <path_next_child+0x56>
   173e7:	b8 00 00 00 00       	mov    $0x0,%eax
}
   173ec:	c9                   	leave  
   173ed:	c3                   	ret    

000173ee <fs_protect>:

static void fs_protect (fs_t * fs) {
   173ee:	55                   	push   %ebp
   173ef:	89 e5                	mov    %esp,%ebp
   173f1:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   173f4:	8b 45 08             	mov    0x8(%ebp),%eax
   173f7:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   173fd:	85 c0                	test   %eax,%eax
   173ff:	74 15                	je     17416 <fs_protect+0x28>
		mutex_lock(fs->mutex);
   17401:	8b 45 08             	mov    0x8(%ebp),%eax
   17404:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   1740a:	83 ec 0c             	sub    $0xc,%esp
   1740d:	50                   	push   %eax
   1740e:	e8 4c 09 00 00       	call   17d5f <mutex_lock>
   17413:	83 c4 10             	add    $0x10,%esp
	}
}
   17416:	90                   	nop
   17417:	c9                   	leave  
   17418:	c3                   	ret    

00017419 <fs_unprotect>:

static void fs_unprotect (fs_t * fs) {
   17419:	55                   	push   %ebp
   1741a:	89 e5                	mov    %esp,%ebp
   1741c:	83 ec 08             	sub    $0x8,%esp
	if (fs->mutex) {
   1741f:	8b 45 08             	mov    0x8(%ebp),%eax
   17422:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17428:	85 c0                	test   %eax,%eax
   1742a:	74 15                	je     17441 <fs_unprotect+0x28>
		mutex_unlock(fs->mutex);
   1742c:	8b 45 08             	mov    0x8(%ebp),%eax
   1742f:	8b 80 5c 02 00 00    	mov    0x25c(%eax),%eax
   17435:	83 ec 0c             	sub    $0xc,%esp
   17438:	50                   	push   %eax
   17439:	e8 b8 09 00 00       	call   17df6 <mutex_unlock>
   1743e:	83 c4 10             	add    $0x10,%esp
	}
}
   17441:	90                   	nop
   17442:	c9                   	leave  
   17443:	c3                   	ret    

00017444 <sys_open>:


int sys_open(const char *name, int flags, ...) {
   17444:	55                   	push   %ebp
   17445:	89 e5                	mov    %esp,%ebp
   17447:	83 ec 28             	sub    $0x28,%esp
	file_t * file = file_alloc();
   1744a:	e8 5e fa ff ff       	call   16ead <file_alloc>
   1744f:	89 45 ec             	mov    %eax,-0x14(%ebp)
	if (!file) {
   17452:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17456:	75 0a                	jne    17462 <sys_open+0x1e>
		return -1;
   17458:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1745d:	e9 62 01 00 00       	jmp    175c4 <sys_open+0x180>
	}

	int fd = task_alloc_fd(file);
   17462:	83 ec 0c             	sub    $0xc,%esp
   17465:	ff 75 ec             	pushl  -0x14(%ebp)
   17468:	e8 d8 a2 ff ff       	call   11745 <task_alloc_fd>
   1746d:	83 c4 10             	add    $0x10,%esp
   17470:	89 45 e8             	mov    %eax,-0x18(%ebp)
	if (fd < 0) {
   17473:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   17477:	0f 88 1f 01 00 00    	js     1759c <sys_open+0x158>
		goto sys_open_failed;
	}


	fs_t * fs = (fs_t *)0;
   1747d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
	list_node_t * node = list_first(&mounted_list);
   17484:	83 ec 0c             	sub    $0xc,%esp
   17487:	68 c0 c8 05 00       	push   $0x5c8c0
   1748c:	e8 5c fb ff ff       	call   16fed <list_first>
   17491:	83 c4 10             	add    $0x10,%esp
   17494:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   17497:	eb 47                	jmp    174e0 <sys_open+0x9c>
		fs_t * curr = list_node_parent(node, fs_t, node);
   17499:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   1749d:	74 0a                	je     174a9 <sys_open+0x65>
   1749f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   174a2:	2d 10 02 00 00       	sub    $0x210,%eax
   174a7:	eb 05                	jmp    174ae <sys_open+0x6a>
   174a9:	b8 00 00 00 00       	mov    $0x0,%eax
   174ae:	89 45 e4             	mov    %eax,-0x1c(%ebp)
		if (path_begin_with(name, curr->mount_point)) {
   174b1:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   174b4:	83 ec 08             	sub    $0x8,%esp
   174b7:	50                   	push   %eax
   174b8:	ff 75 08             	pushl  0x8(%ebp)
   174bb:	e8 86 fe ff ff       	call   17346 <path_begin_with>
   174c0:	83 c4 10             	add    $0x10,%esp
   174c3:	85 c0                	test   %eax,%eax
   174c5:	74 08                	je     174cf <sys_open+0x8b>
			fs = curr;
   174c7:	8b 45 e4             	mov    -0x1c(%ebp),%eax
   174ca:	89 45 f4             	mov    %eax,-0xc(%ebp)
			break;
   174cd:	eb 17                	jmp    174e6 <sys_open+0xa2>
		}
		node = list_node_next(node);
   174cf:	83 ec 0c             	sub    $0xc,%esp
   174d2:	ff 75 f0             	pushl  -0x10(%ebp)
   174d5:	e8 08 fb ff ff       	call   16fe2 <list_node_next>
   174da:	83 c4 10             	add    $0x10,%esp
   174dd:	89 45 f0             	mov    %eax,-0x10(%ebp)
	while (node) {
   174e0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   174e4:	75 b3                	jne    17499 <sys_open+0x55>
	}

	if (fs) {
   174e6:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   174ea:	74 13                	je     174ff <sys_open+0xbb>
		name = path_next_child(name);
   174ec:	83 ec 0c             	sub    $0xc,%esp
   174ef:	ff 75 08             	pushl  0x8(%ebp)
   174f2:	e8 9f fe ff ff       	call   17396 <path_next_child>
   174f7:	83 c4 10             	add    $0x10,%esp
   174fa:	89 45 08             	mov    %eax,0x8(%ebp)
   174fd:	eb 08                	jmp    17507 <sys_open+0xc3>
	} else {
		fs = root_fs;
   174ff:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17504:	89 45 f4             	mov    %eax,-0xc(%ebp)
	}

	file->mode = flags;
   17507:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1750a:	8b 55 0c             	mov    0xc(%ebp),%edx
   1750d:	89 50 40             	mov    %edx,0x40(%eax)
	file->fs = fs;
   17510:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17513:	8b 55 f4             	mov    -0xc(%ebp),%edx
   17516:	89 50 44             	mov    %edx,0x44(%eax)
	kernel_strncpy(file->file_name, name, FILE_NAME_SIZE);
   17519:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1751c:	83 ec 04             	sub    $0x4,%esp
   1751f:	6a 20                	push   $0x20
   17521:	ff 75 08             	pushl  0x8(%ebp)
   17524:	50                   	push   %eax
   17525:	e8 da 0d 00 00       	call   18304 <kernel_strncpy>
   1752a:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   1752d:	83 ec 0c             	sub    $0xc,%esp
   17530:	ff 75 f4             	pushl  -0xc(%ebp)
   17533:	e8 b6 fe ff ff       	call   173ee <fs_protect>
   17538:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->open(fs, name, file);
   1753b:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1753e:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17544:	8b 40 08             	mov    0x8(%eax),%eax
   17547:	83 ec 04             	sub    $0x4,%esp
   1754a:	ff 75 ec             	pushl  -0x14(%ebp)
   1754d:	ff 75 08             	pushl  0x8(%ebp)
   17550:	ff 75 f4             	pushl  -0xc(%ebp)
   17553:	ff d0                	call   *%eax
   17555:	83 c4 10             	add    $0x10,%esp
   17558:	89 45 e0             	mov    %eax,-0x20(%ebp)
	if (err < 0) {
   1755b:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)
   1755f:	79 28                	jns    17589 <sys_open+0x145>
		fs_unprotect(fs);
   17561:	83 ec 0c             	sub    $0xc,%esp
   17564:	ff 75 f4             	pushl  -0xc(%ebp)
   17567:	e8 ad fe ff ff       	call   17419 <fs_unprotect>
   1756c:	83 c4 10             	add    $0x10,%esp

		log_printf("open %s failed.", name);
   1756f:	83 ec 08             	sub    $0x8,%esp
   17572:	ff 75 08             	pushl  0x8(%ebp)
   17575:	68 cd 9c 01 00       	push   $0x19ccd
   1757a:	e8 a7 14 00 00       	call   18a26 <log_printf>
   1757f:	83 c4 10             	add    $0x10,%esp
		return -1;
   17582:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17587:	eb 3b                	jmp    175c4 <sys_open+0x180>
	}
	fs_unprotect(fs);
   17589:	83 ec 0c             	sub    $0xc,%esp
   1758c:	ff 75 f4             	pushl  -0xc(%ebp)
   1758f:	e8 85 fe ff ff       	call   17419 <fs_unprotect>
   17594:	83 c4 10             	add    $0x10,%esp

	return fd;
   17597:	8b 45 e8             	mov    -0x18(%ebp),%eax
   1759a:	eb 28                	jmp    175c4 <sys_open+0x180>
		goto sys_open_failed;
   1759c:	90                   	nop

sys_open_failed:
	file_free(file);
   1759d:	83 ec 0c             	sub    $0xc,%esp
   175a0:	ff 75 ec             	pushl  -0x14(%ebp)
   175a3:	e8 90 f9 ff ff       	call   16f38 <file_free>
   175a8:	83 c4 10             	add    $0x10,%esp
	if (fd >= 0) {
   175ab:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)
   175af:	78 0e                	js     175bf <sys_open+0x17b>
		task_remove_fd(fd);
   175b1:	83 ec 0c             	sub    $0xc,%esp
   175b4:	ff 75 e8             	pushl  -0x18(%ebp)
   175b7:	e8 dc a1 ff ff       	call   11798 <task_remove_fd>
   175bc:	83 c4 10             	add    $0x10,%esp
	}
	return -1;
   175bf:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   175c4:	c9                   	leave  
   175c5:	c3                   	ret    

000175c6 <sys_dup>:


int sys_dup (int file) {
   175c6:	55                   	push   %ebp
   175c7:	89 e5                	mov    %esp,%ebp
   175c9:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   175cc:	ff 75 08             	pushl  0x8(%ebp)
   175cf:	e8 23 fa ff ff       	call   16ff7 <is_fd_bad>
   175d4:	83 c4 04             	add    $0x4,%esp
   175d7:	85 c0                	test   %eax,%eax
   175d9:	74 1a                	je     175f5 <sys_dup+0x2f>
        log_printf("file(%d) is not valid.", file);
   175db:	83 ec 08             	sub    $0x8,%esp
   175de:	ff 75 08             	pushl  0x8(%ebp)
   175e1:	68 dd 9c 01 00       	push   $0x19cdd
   175e6:	e8 3b 14 00 00       	call   18a26 <log_printf>
   175eb:	83 c4 10             	add    $0x10,%esp
		return -1;
   175ee:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   175f3:	eb 6d                	jmp    17662 <sys_dup+0x9c>
	}

	file_t * p_file = task_file(file);
   175f5:	83 ec 0c             	sub    $0xc,%esp
   175f8:	ff 75 08             	pushl  0x8(%ebp)
   175fb:	e8 13 a1 ff ff       	call   11713 <task_file>
   17600:	83 c4 10             	add    $0x10,%esp
   17603:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17606:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1760a:	75 17                	jne    17623 <sys_dup+0x5d>
		log_printf("file not opened");
   1760c:	83 ec 0c             	sub    $0xc,%esp
   1760f:	68 f4 9c 01 00       	push   $0x19cf4
   17614:	e8 0d 14 00 00       	call   18a26 <log_printf>
   17619:	83 c4 10             	add    $0x10,%esp
		return -1;
   1761c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17621:	eb 3f                	jmp    17662 <sys_dup+0x9c>
	}

	int fd = task_alloc_fd(p_file);	
   17623:	83 ec 0c             	sub    $0xc,%esp
   17626:	ff 75 f4             	pushl  -0xc(%ebp)
   17629:	e8 17 a1 ff ff       	call   11745 <task_alloc_fd>
   1762e:	83 c4 10             	add    $0x10,%esp
   17631:	89 45 f0             	mov    %eax,-0x10(%ebp)
	if (fd >= 0) {
   17634:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17638:	78 13                	js     1764d <sys_dup+0x87>
		file_inc_ref(p_file);
   1763a:	83 ec 0c             	sub    $0xc,%esp
   1763d:	ff 75 f4             	pushl  -0xc(%ebp)
   17640:	e8 35 f9 ff ff       	call   16f7a <file_inc_ref>
   17645:	83 c4 10             	add    $0x10,%esp
		return fd;
   17648:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1764b:	eb 15                	jmp    17662 <sys_dup+0x9c>
	}

	log_printf("No task file avaliable");
   1764d:	83 ec 0c             	sub    $0xc,%esp
   17650:	68 04 9d 01 00       	push   $0x19d04
   17655:	e8 cc 13 00 00       	call   18a26 <log_printf>
   1765a:	83 c4 10             	add    $0x10,%esp
    return -1;
   1765d:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   17662:	c9                   	leave  
   17663:	c3                   	ret    

00017664 <sys_ioctl>:

int sys_ioctl(int fd, int cmd, int arg0, int arg1) {
   17664:	55                   	push   %ebp
   17665:	89 e5                	mov    %esp,%ebp
   17667:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(fd)) {
   1766a:	ff 75 08             	pushl  0x8(%ebp)
   1766d:	e8 85 f9 ff ff       	call   16ff7 <is_fd_bad>
   17672:	83 c4 04             	add    $0x4,%esp
   17675:	85 c0                	test   %eax,%eax
   17677:	74 07                	je     17680 <sys_ioctl+0x1c>
		return 0;
   17679:	b8 00 00 00 00       	mov    $0x0,%eax
   1767e:	eb 66                	jmp    176e6 <sys_ioctl+0x82>
	}

	file_t * pfile = task_file(fd);
   17680:	83 ec 0c             	sub    $0xc,%esp
   17683:	ff 75 08             	pushl  0x8(%ebp)
   17686:	e8 88 a0 ff ff       	call   11713 <task_file>
   1768b:	83 c4 10             	add    $0x10,%esp
   1768e:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17691:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17695:	75 07                	jne    1769e <sys_ioctl+0x3a>
		return 0;
   17697:	b8 00 00 00 00       	mov    $0x0,%eax
   1769c:	eb 48                	jmp    176e6 <sys_ioctl+0x82>
	}

	fs_t * fs = pfile->fs;
   1769e:	8b 45 f4             	mov    -0xc(%ebp),%eax
   176a1:	8b 40 44             	mov    0x44(%eax),%eax
   176a4:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   176a7:	83 ec 0c             	sub    $0xc,%esp
   176aa:	ff 75 f0             	pushl  -0x10(%ebp)
   176ad:	e8 3c fd ff ff       	call   173ee <fs_protect>
   176b2:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->ioctl(pfile, cmd, arg0, arg1);
   176b5:	8b 45 f0             	mov    -0x10(%ebp),%eax
   176b8:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   176be:	8b 40 20             	mov    0x20(%eax),%eax
   176c1:	ff 75 14             	pushl  0x14(%ebp)
   176c4:	ff 75 10             	pushl  0x10(%ebp)
   176c7:	ff 75 0c             	pushl  0xc(%ebp)
   176ca:	ff 75 f4             	pushl  -0xc(%ebp)
   176cd:	ff d0                	call   *%eax
   176cf:	83 c4 10             	add    $0x10,%esp
   176d2:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   176d5:	83 ec 0c             	sub    $0xc,%esp
   176d8:	ff 75 f0             	pushl  -0x10(%ebp)
   176db:	e8 39 fd ff ff       	call   17419 <fs_unprotect>
   176e0:	83 c4 10             	add    $0x10,%esp
	return err;
   176e3:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   176e6:	c9                   	leave  
   176e7:	c3                   	ret    

000176e8 <sys_read>:


int sys_read(int file, char *ptr, int len) {
   176e8:	55                   	push   %ebp
   176e9:	89 e5                	mov    %esp,%ebp
   176eb:	83 ec 18             	sub    $0x18,%esp
    if (is_fd_bad(file) || !ptr || !len) {
   176ee:	ff 75 08             	pushl  0x8(%ebp)
   176f1:	e8 01 f9 ff ff       	call   16ff7 <is_fd_bad>
   176f6:	83 c4 04             	add    $0x4,%esp
   176f9:	85 c0                	test   %eax,%eax
   176fb:	75 0c                	jne    17709 <sys_read+0x21>
   176fd:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   17701:	74 06                	je     17709 <sys_read+0x21>
   17703:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   17707:	75 0a                	jne    17713 <sys_read+0x2b>
		return 0;
   17709:	b8 00 00 00 00       	mov    $0x0,%eax
   1770e:	e9 98 00 00 00       	jmp    177ab <sys_read+0xc3>
	}

	file_t * p_file = task_file(file);
   17713:	83 ec 0c             	sub    $0xc,%esp
   17716:	ff 75 08             	pushl  0x8(%ebp)
   17719:	e8 f5 9f ff ff       	call   11713 <task_file>
   1771e:	83 c4 10             	add    $0x10,%esp
   17721:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   17724:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17728:	75 17                	jne    17741 <sys_read+0x59>
		log_printf("file not opened");
   1772a:	83 ec 0c             	sub    $0xc,%esp
   1772d:	68 f4 9c 01 00       	push   $0x19cf4
   17732:	e8 ef 12 00 00       	call   18a26 <log_printf>
   17737:	83 c4 10             	add    $0x10,%esp
		return -1;
   1773a:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1773f:	eb 6a                	jmp    177ab <sys_read+0xc3>
	}

	if (p_file->mode == O_WRONLY) {
   17741:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17744:	8b 40 40             	mov    0x40(%eax),%eax
   17747:	83 f8 01             	cmp    $0x1,%eax
   1774a:	75 17                	jne    17763 <sys_read+0x7b>
		log_printf("file is write only");
   1774c:	83 ec 0c             	sub    $0xc,%esp
   1774f:	68 1b 9d 01 00       	push   $0x19d1b
   17754:	e8 cd 12 00 00       	call   18a26 <log_printf>
   17759:	83 c4 10             	add    $0x10,%esp
		return -1;
   1775c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17761:	eb 48                	jmp    177ab <sys_read+0xc3>
	}

	fs_t * fs = p_file->fs;
   17763:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17766:	8b 40 44             	mov    0x44(%eax),%eax
   17769:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   1776c:	83 ec 0c             	sub    $0xc,%esp
   1776f:	ff 75 f0             	pushl  -0x10(%ebp)
   17772:	e8 77 fc ff ff       	call   173ee <fs_protect>
   17777:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->read(ptr, len, p_file);
   1777a:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1777d:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17783:	8b 40 0c             	mov    0xc(%eax),%eax
   17786:	83 ec 04             	sub    $0x4,%esp
   17789:	ff 75 f4             	pushl  -0xc(%ebp)
   1778c:	ff 75 10             	pushl  0x10(%ebp)
   1778f:	ff 75 0c             	pushl  0xc(%ebp)
   17792:	ff d0                	call   *%eax
   17794:	83 c4 10             	add    $0x10,%esp
   17797:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   1779a:	83 ec 0c             	sub    $0xc,%esp
   1779d:	ff 75 f0             	pushl  -0x10(%ebp)
   177a0:	e8 74 fc ff ff       	call   17419 <fs_unprotect>
   177a5:	83 c4 10             	add    $0x10,%esp
	return err;
   177a8:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   177ab:	c9                   	leave  
   177ac:	c3                   	ret    

000177ad <sys_write>:


int sys_write(int file, char *ptr, int len) {
   177ad:	55                   	push   %ebp
   177ae:	89 e5                	mov    %esp,%ebp
   177b0:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file) || !ptr || !len) {
   177b3:	ff 75 08             	pushl  0x8(%ebp)
   177b6:	e8 3c f8 ff ff       	call   16ff7 <is_fd_bad>
   177bb:	83 c4 04             	add    $0x4,%esp
   177be:	85 c0                	test   %eax,%eax
   177c0:	75 0c                	jne    177ce <sys_write+0x21>
   177c2:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   177c6:	74 06                	je     177ce <sys_write+0x21>
   177c8:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   177cc:	75 0a                	jne    177d8 <sys_write+0x2b>
		return 0;
   177ce:	b8 00 00 00 00       	mov    $0x0,%eax
   177d3:	e9 97 00 00 00       	jmp    1786f <sys_write+0xc2>
	}

	file_t * p_file = task_file(file);
   177d8:	83 ec 0c             	sub    $0xc,%esp
   177db:	ff 75 08             	pushl  0x8(%ebp)
   177de:	e8 30 9f ff ff       	call   11713 <task_file>
   177e3:	83 c4 10             	add    $0x10,%esp
   177e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   177e9:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   177ed:	75 17                	jne    17806 <sys_write+0x59>
		log_printf("file not opened");
   177ef:	83 ec 0c             	sub    $0xc,%esp
   177f2:	68 f4 9c 01 00       	push   $0x19cf4
   177f7:	e8 2a 12 00 00       	call   18a26 <log_printf>
   177fc:	83 c4 10             	add    $0x10,%esp
		return -1;
   177ff:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17804:	eb 69                	jmp    1786f <sys_write+0xc2>
	}

	if (p_file->mode == O_RDONLY) {
   17806:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17809:	8b 40 40             	mov    0x40(%eax),%eax
   1780c:	85 c0                	test   %eax,%eax
   1780e:	75 17                	jne    17827 <sys_write+0x7a>
		log_printf("file is write only");
   17810:	83 ec 0c             	sub    $0xc,%esp
   17813:	68 1b 9d 01 00       	push   $0x19d1b
   17818:	e8 09 12 00 00       	call   18a26 <log_printf>
   1781d:	83 c4 10             	add    $0x10,%esp
		return -1;
   17820:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17825:	eb 48                	jmp    1786f <sys_write+0xc2>
	}

	fs_t * fs = p_file->fs;
   17827:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1782a:	8b 40 44             	mov    0x44(%eax),%eax
   1782d:	89 45 f0             	mov    %eax,-0x10(%ebp)
	fs_protect(fs);
   17830:	83 ec 0c             	sub    $0xc,%esp
   17833:	ff 75 f0             	pushl  -0x10(%ebp)
   17836:	e8 b3 fb ff ff       	call   173ee <fs_protect>
   1783b:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->write(ptr, len, p_file);
   1783e:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17841:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17847:	8b 40 10             	mov    0x10(%eax),%eax
   1784a:	83 ec 04             	sub    $0x4,%esp
   1784d:	ff 75 f4             	pushl  -0xc(%ebp)
   17850:	ff 75 10             	pushl  0x10(%ebp)
   17853:	ff 75 0c             	pushl  0xc(%ebp)
   17856:	ff d0                	call   *%eax
   17858:	83 c4 10             	add    $0x10,%esp
   1785b:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   1785e:	83 ec 0c             	sub    $0xc,%esp
   17861:	ff 75 f0             	pushl  -0x10(%ebp)
   17864:	e8 b0 fb ff ff       	call   17419 <fs_unprotect>
   17869:	83 c4 10             	add    $0x10,%esp
	return err;
   1786c:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   1786f:	c9                   	leave  
   17870:	c3                   	ret    

00017871 <sys_lseek>:


int sys_lseek(int file, int ptr, int dir) {
   17871:	55                   	push   %ebp
   17872:	89 e5                	mov    %esp,%ebp
   17874:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17877:	ff 75 08             	pushl  0x8(%ebp)
   1787a:	e8 78 f7 ff ff       	call   16ff7 <is_fd_bad>
   1787f:	83 c4 04             	add    $0x4,%esp
   17882:	85 c0                	test   %eax,%eax
   17884:	74 07                	je     1788d <sys_lseek+0x1c>
		return -1;
   17886:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   1788b:	eb 77                	jmp    17904 <sys_lseek+0x93>
	}

	file_t * p_file = task_file(file);
   1788d:	83 ec 0c             	sub    $0xc,%esp
   17890:	ff 75 08             	pushl  0x8(%ebp)
   17893:	e8 7b 9e ff ff       	call   11713 <task_file>
   17898:	83 c4 10             	add    $0x10,%esp
   1789b:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (!p_file) {
   1789e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   178a2:	75 17                	jne    178bb <sys_lseek+0x4a>
		log_printf("file not opened");
   178a4:	83 ec 0c             	sub    $0xc,%esp
   178a7:	68 f4 9c 01 00       	push   $0x19cf4
   178ac:	e8 75 11 00 00       	call   18a26 <log_printf>
   178b1:	83 c4 10             	add    $0x10,%esp
		return -1;
   178b4:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   178b9:	eb 49                	jmp    17904 <sys_lseek+0x93>
	}

	fs_t * fs = p_file->fs;
   178bb:	8b 45 f4             	mov    -0xc(%ebp),%eax
   178be:	8b 40 44             	mov    0x44(%eax),%eax
   178c1:	89 45 f0             	mov    %eax,-0x10(%ebp)

	fs_protect(fs);
   178c4:	83 ec 0c             	sub    $0xc,%esp
   178c7:	ff 75 f0             	pushl  -0x10(%ebp)
   178ca:	e8 1f fb ff ff       	call   173ee <fs_protect>
   178cf:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->seek(p_file, ptr, dir);
   178d2:	8b 45 f0             	mov    -0x10(%ebp),%eax
   178d5:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   178db:	8b 40 18             	mov    0x18(%eax),%eax
   178de:	8b 55 0c             	mov    0xc(%ebp),%edx
   178e1:	83 ec 04             	sub    $0x4,%esp
   178e4:	ff 75 10             	pushl  0x10(%ebp)
   178e7:	52                   	push   %edx
   178e8:	ff 75 f4             	pushl  -0xc(%ebp)
   178eb:	ff d0                	call   *%eax
   178ed:	83 c4 10             	add    $0x10,%esp
   178f0:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   178f3:	83 ec 0c             	sub    $0xc,%esp
   178f6:	ff 75 f0             	pushl  -0x10(%ebp)
   178f9:	e8 1b fb ff ff       	call   17419 <fs_unprotect>
   178fe:	83 c4 10             	add    $0x10,%esp
	return err;
   17901:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17904:	c9                   	leave  
   17905:	c3                   	ret    

00017906 <sys_close>:


int sys_close(int file) {
   17906:	55                   	push   %ebp
   17907:	89 e5                	mov    %esp,%ebp
   17909:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   1790c:	ff 75 08             	pushl  0x8(%ebp)
   1790f:	e8 e3 f6 ff ff       	call   16ff7 <is_fd_bad>
   17914:	83 c4 04             	add    $0x4,%esp
   17917:	85 c0                	test   %eax,%eax
   17919:	74 1a                	je     17935 <sys_close+0x2f>
		log_printf("file error");
   1791b:	83 ec 0c             	sub    $0xc,%esp
   1791e:	68 2e 9d 01 00       	push   $0x19d2e
   17923:	e8 fe 10 00 00       	call   18a26 <log_printf>
   17928:	83 c4 10             	add    $0x10,%esp
		return -1;
   1792b:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17930:	e9 cb 00 00 00       	jmp    17a00 <sys_close+0xfa>
	}

	file_t * p_file = task_file(file);
   17935:	83 ec 0c             	sub    $0xc,%esp
   17938:	ff 75 08             	pushl  0x8(%ebp)
   1793b:	e8 d3 9d ff ff       	call   11713 <task_file>
   17940:	83 c4 10             	add    $0x10,%esp
   17943:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17946:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1794a:	75 1d                	jne    17969 <sys_close+0x63>
		log_printf("file not opened. %d", file);
   1794c:	83 ec 08             	sub    $0x8,%esp
   1794f:	ff 75 08             	pushl  0x8(%ebp)
   17952:	68 39 9d 01 00       	push   $0x19d39
   17957:	e8 ca 10 00 00       	call   18a26 <log_printf>
   1795c:	83 c4 10             	add    $0x10,%esp
		return -1;
   1795f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17964:	e9 97 00 00 00       	jmp    17a00 <sys_close+0xfa>
	}

	ASSERT(p_file->ref > 0);
   17969:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1796c:	8b 40 28             	mov    0x28(%eax),%eax
   1796f:	85 c0                	test   %eax,%eax
   17971:	7f 1c                	jg     1798f <sys_close+0x89>
   17973:	68 4d 9d 01 00       	push   $0x19d4d
   17978:	68 68 9d 01 00       	push   $0x19d68
   1797d:	68 51 01 00 00       	push   $0x151
   17982:	68 78 9c 01 00       	push   $0x19c78
   17987:	e8 3d 0e 00 00       	call   187c9 <panic>
   1798c:	83 c4 10             	add    $0x10,%esp

	if (p_file->ref-- == 1) {
   1798f:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17992:	8b 40 28             	mov    0x28(%eax),%eax
   17995:	8d 48 ff             	lea    -0x1(%eax),%ecx
   17998:	8b 55 f4             	mov    -0xc(%ebp),%edx
   1799b:	89 4a 28             	mov    %ecx,0x28(%edx)
   1799e:	83 f8 01             	cmp    $0x1,%eax
   179a1:	75 4a                	jne    179ed <sys_close+0xe7>
		fs_t * fs = p_file->fs;
   179a3:	8b 45 f4             	mov    -0xc(%ebp),%eax
   179a6:	8b 40 44             	mov    0x44(%eax),%eax
   179a9:	89 45 f0             	mov    %eax,-0x10(%ebp)

		fs_protect(fs);
   179ac:	83 ec 0c             	sub    $0xc,%esp
   179af:	ff 75 f0             	pushl  -0x10(%ebp)
   179b2:	e8 37 fa ff ff       	call   173ee <fs_protect>
   179b7:	83 c4 10             	add    $0x10,%esp
		fs->op->close(p_file);
   179ba:	8b 45 f0             	mov    -0x10(%ebp),%eax
   179bd:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   179c3:	8b 40 14             	mov    0x14(%eax),%eax
   179c6:	83 ec 0c             	sub    $0xc,%esp
   179c9:	ff 75 f4             	pushl  -0xc(%ebp)
   179cc:	ff d0                	call   *%eax
   179ce:	83 c4 10             	add    $0x10,%esp
		fs_unprotect(fs);
   179d1:	83 ec 0c             	sub    $0xc,%esp
   179d4:	ff 75 f0             	pushl  -0x10(%ebp)
   179d7:	e8 3d fa ff ff       	call   17419 <fs_unprotect>
   179dc:	83 c4 10             	add    $0x10,%esp
	    file_free(p_file);
   179df:	83 ec 0c             	sub    $0xc,%esp
   179e2:	ff 75 f4             	pushl  -0xc(%ebp)
   179e5:	e8 4e f5 ff ff       	call   16f38 <file_free>
   179ea:	83 c4 10             	add    $0x10,%esp
	}

	task_remove_fd(file);
   179ed:	83 ec 0c             	sub    $0xc,%esp
   179f0:	ff 75 08             	pushl  0x8(%ebp)
   179f3:	e8 a0 9d ff ff       	call   11798 <task_remove_fd>
   179f8:	83 c4 10             	add    $0x10,%esp
	return 0;
   179fb:	b8 00 00 00 00       	mov    $0x0,%eax
}
   17a00:	c9                   	leave  
   17a01:	c3                   	ret    

00017a02 <sys_isatty>:



int sys_isatty(int file) {
   17a02:	55                   	push   %ebp
   17a03:	89 e5                	mov    %esp,%ebp
   17a05:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17a08:	ff 75 08             	pushl  0x8(%ebp)
   17a0b:	e8 e7 f5 ff ff       	call   16ff7 <is_fd_bad>
   17a10:	83 c4 04             	add    $0x4,%esp
   17a13:	85 c0                	test   %eax,%eax
   17a15:	74 07                	je     17a1e <sys_isatty+0x1c>
		return 0;
   17a17:	b8 00 00 00 00       	mov    $0x0,%eax
   17a1c:	eb 2d                	jmp    17a4b <sys_isatty+0x49>
	}

	file_t * pfile = task_file(file);
   17a1e:	83 ec 0c             	sub    $0xc,%esp
   17a21:	ff 75 08             	pushl  0x8(%ebp)
   17a24:	e8 ea 9c ff ff       	call   11713 <task_file>
   17a29:	83 c4 10             	add    $0x10,%esp
   17a2c:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (pfile == (file_t *)0) {
   17a2f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a33:	75 07                	jne    17a3c <sys_isatty+0x3a>
		return 0;
   17a35:	b8 00 00 00 00       	mov    $0x0,%eax
   17a3a:	eb 0f                	jmp    17a4b <sys_isatty+0x49>
	}

	return pfile->type == FILE_TTY;
   17a3c:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a3f:	8b 40 20             	mov    0x20(%eax),%eax
   17a42:	83 f8 01             	cmp    $0x1,%eax
   17a45:	0f 94 c0             	sete   %al
   17a48:	0f b6 c0             	movzbl %al,%eax
}
   17a4b:	c9                   	leave  
   17a4c:	c3                   	ret    

00017a4d <sys_fstat>:


int sys_fstat(int file, struct stat *st) {
   17a4d:	55                   	push   %ebp
   17a4e:	89 e5                	mov    %esp,%ebp
   17a50:	83 ec 18             	sub    $0x18,%esp
	if (is_fd_bad(file)) {
   17a53:	ff 75 08             	pushl  0x8(%ebp)
   17a56:	e8 9c f5 ff ff       	call   16ff7 <is_fd_bad>
   17a5b:	83 c4 04             	add    $0x4,%esp
   17a5e:	85 c0                	test   %eax,%eax
   17a60:	74 07                	je     17a69 <sys_fstat+0x1c>
		return -1;
   17a62:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a67:	eb 75                	jmp    17ade <sys_fstat+0x91>
	}

	file_t * p_file = task_file(file);
   17a69:	83 ec 0c             	sub    $0xc,%esp
   17a6c:	ff 75 08             	pushl  0x8(%ebp)
   17a6f:	e8 9f 9c ff ff       	call   11713 <task_file>
   17a74:	83 c4 10             	add    $0x10,%esp
   17a77:	89 45 f4             	mov    %eax,-0xc(%ebp)
	if (p_file == (file_t *)0) {
   17a7a:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17a7e:	75 07                	jne    17a87 <sys_fstat+0x3a>
		return -1;
   17a80:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   17a85:	eb 57                	jmp    17ade <sys_fstat+0x91>
	}

	fs_t * fs = p_file->fs;
   17a87:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17a8a:	8b 40 44             	mov    0x44(%eax),%eax
   17a8d:	89 45 f0             	mov    %eax,-0x10(%ebp)

    kernel_memset(st, 0, sizeof(struct stat));
   17a90:	83 ec 04             	sub    $0x4,%esp
   17a93:	6a 48                	push   $0x48
   17a95:	6a 00                	push   $0x0
   17a97:	ff 75 0c             	pushl  0xc(%ebp)
   17a9a:	e8 dd 09 00 00       	call   1847c <kernel_memset>
   17a9f:	83 c4 10             	add    $0x10,%esp

	fs_protect(fs);
   17aa2:	83 ec 0c             	sub    $0xc,%esp
   17aa5:	ff 75 f0             	pushl  -0x10(%ebp)
   17aa8:	e8 41 f9 ff ff       	call   173ee <fs_protect>
   17aad:	83 c4 10             	add    $0x10,%esp
	int err = fs->op->stat(p_file, st);
   17ab0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17ab3:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17ab9:	8b 40 1c             	mov    0x1c(%eax),%eax
   17abc:	83 ec 08             	sub    $0x8,%esp
   17abf:	ff 75 0c             	pushl  0xc(%ebp)
   17ac2:	ff 75 f4             	pushl  -0xc(%ebp)
   17ac5:	ff d0                	call   *%eax
   17ac7:	83 c4 10             	add    $0x10,%esp
   17aca:	89 45 ec             	mov    %eax,-0x14(%ebp)
	fs_unprotect(fs);
   17acd:	83 ec 0c             	sub    $0xc,%esp
   17ad0:	ff 75 f0             	pushl  -0x10(%ebp)
   17ad3:	e8 41 f9 ff ff       	call   17419 <fs_unprotect>
   17ad8:	83 c4 10             	add    $0x10,%esp
	return err;
   17adb:	8b 45 ec             	mov    -0x14(%ebp),%eax
}
   17ade:	c9                   	leave  
   17adf:	c3                   	ret    

00017ae0 <sys_opendir>:

int sys_opendir(const char * name, DIR * dir) {
   17ae0:	55                   	push   %ebp
   17ae1:	89 e5                	mov    %esp,%ebp
   17ae3:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17ae6:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17aeb:	83 ec 0c             	sub    $0xc,%esp
   17aee:	50                   	push   %eax
   17aef:	e8 fa f8 ff ff       	call   173ee <fs_protect>
   17af4:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->opendir(root_fs, name, dir);
   17af7:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17afc:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b02:	8b 40 24             	mov    0x24(%eax),%eax
   17b05:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17b0b:	83 ec 04             	sub    $0x4,%esp
   17b0e:	ff 75 0c             	pushl  0xc(%ebp)
   17b11:	ff 75 08             	pushl  0x8(%ebp)
   17b14:	52                   	push   %edx
   17b15:	ff d0                	call   *%eax
   17b17:	83 c4 10             	add    $0x10,%esp
   17b1a:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17b1d:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b22:	83 ec 0c             	sub    $0xc,%esp
   17b25:	50                   	push   %eax
   17b26:	e8 ee f8 ff ff       	call   17419 <fs_unprotect>
   17b2b:	83 c4 10             	add    $0x10,%esp
	return err;
   17b2e:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17b31:	c9                   	leave  
   17b32:	c3                   	ret    

00017b33 <sys_readdir>:

int sys_readdir(DIR* dir, struct dirent * dirent) {
   17b33:	55                   	push   %ebp
   17b34:	89 e5                	mov    %esp,%ebp
   17b36:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17b39:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b3e:	83 ec 0c             	sub    $0xc,%esp
   17b41:	50                   	push   %eax
   17b42:	e8 a7 f8 ff ff       	call   173ee <fs_protect>
   17b47:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->readdir(root_fs, dir, dirent);
   17b4a:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b4f:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17b55:	8b 40 28             	mov    0x28(%eax),%eax
   17b58:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17b5e:	83 ec 04             	sub    $0x4,%esp
   17b61:	ff 75 0c             	pushl  0xc(%ebp)
   17b64:	ff 75 08             	pushl  0x8(%ebp)
   17b67:	52                   	push   %edx
   17b68:	ff d0                	call   *%eax
   17b6a:	83 c4 10             	add    $0x10,%esp
   17b6d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17b70:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b75:	83 ec 0c             	sub    $0xc,%esp
   17b78:	50                   	push   %eax
   17b79:	e8 9b f8 ff ff       	call   17419 <fs_unprotect>
   17b7e:	83 c4 10             	add    $0x10,%esp
	return err;
   17b81:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17b84:	c9                   	leave  
   17b85:	c3                   	ret    

00017b86 <sys_closedir>:

int sys_closedir(DIR *dir) {
   17b86:	55                   	push   %ebp
   17b87:	89 e5                	mov    %esp,%ebp
   17b89:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17b8c:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17b91:	83 ec 0c             	sub    $0xc,%esp
   17b94:	50                   	push   %eax
   17b95:	e8 54 f8 ff ff       	call   173ee <fs_protect>
   17b9a:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->closedir(root_fs, dir);
   17b9d:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17ba2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17ba8:	8b 40 2c             	mov    0x2c(%eax),%eax
   17bab:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17bb1:	83 ec 08             	sub    $0x8,%esp
   17bb4:	ff 75 08             	pushl  0x8(%ebp)
   17bb7:	52                   	push   %edx
   17bb8:	ff d0                	call   *%eax
   17bba:	83 c4 10             	add    $0x10,%esp
   17bbd:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17bc0:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bc5:	83 ec 0c             	sub    $0xc,%esp
   17bc8:	50                   	push   %eax
   17bc9:	e8 4b f8 ff ff       	call   17419 <fs_unprotect>
   17bce:	83 c4 10             	add    $0x10,%esp
	return err;
   17bd1:	8b 45 f4             	mov    -0xc(%ebp),%eax
}
   17bd4:	c9                   	leave  
   17bd5:	c3                   	ret    

00017bd6 <sys_unlink>:

int sys_unlink (const char * path) {
   17bd6:	55                   	push   %ebp
   17bd7:	89 e5                	mov    %esp,%ebp
   17bd9:	83 ec 18             	sub    $0x18,%esp
	fs_protect(root_fs);
   17bdc:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17be1:	83 ec 0c             	sub    $0xc,%esp
   17be4:	50                   	push   %eax
   17be5:	e8 04 f8 ff ff       	call   173ee <fs_protect>
   17bea:	83 c4 10             	add    $0x10,%esp
	int err = root_fs->op->unlink(root_fs, path);
   17bed:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17bf2:	8b 80 04 02 00 00    	mov    0x204(%eax),%eax
   17bf8:	8b 40 30             	mov    0x30(%eax),%eax
   17bfb:	8b 15 a0 e0 05 00    	mov    0x5e0a0,%edx
   17c01:	83 ec 08             	sub    $0x8,%esp
   17c04:	ff 75 08             	pushl  0x8(%ebp)
   17c07:	52                   	push   %edx
   17c08:	ff d0                	call   *%eax
   17c0a:	83 c4 10             	add    $0x10,%esp
   17c0d:	89 45 f4             	mov    %eax,-0xc(%ebp)
	fs_unprotect(root_fs);
   17c10:	a1 a0 e0 05 00       	mov    0x5e0a0,%eax
   17c15:	83 ec 0c             	sub    $0xc,%esp
   17c18:	50                   	push   %eax
   17c19:	e8 fb f7 ff ff       	call   17419 <fs_unprotect>
   17c1e:	83 c4 10             	add    $0x10,%esp
	return err;
   17c21:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17c24:	c9                   	leave  
   17c25:	c3                   	ret    

00017c26 <kernel_init>:
#include "fs/fs.h"

static boot_info_t * init_boot_info;         


void kernel_init (boot_info_t * boot_info) {
   17c26:	55                   	push   %ebp
   17c27:	89 e5                	mov    %esp,%ebp
   17c29:	83 ec 08             	sub    $0x8,%esp
    init_boot_info = boot_info;
   17c2c:	8b 45 08             	mov    0x8(%ebp),%eax
   17c2f:	a3 a4 e0 05 00       	mov    %eax,0x5e0a4

     
    cpu_init();
   17c34:	e8 0d ab ff ff       	call   12746 <cpu_init>
    irq_init();
   17c39:	e8 c0 b1 ff ff       	call   12dfe <irq_init>
    log_init();
   17c3e:	e8 b4 0d 00 00       	call   189f7 <log_init>

     
    memory_init(boot_info);
   17c43:	83 ec 0c             	sub    $0xc,%esp
   17c46:	ff 75 08             	pushl  0x8(%ebp)
   17c49:	e8 d4 90 ff ff       	call   10d22 <memory_init>
   17c4e:	83 c4 10             	add    $0x10,%esp
    fs_init();
   17c51:	e8 0b f6 ff ff       	call   17261 <fs_init>

    time_init();
   17c56:	e8 ff d4 ff ff       	call   1515a <time_init>

    task_manager_init();
   17c5b:	e8 c6 98 ff ff       	call   11526 <task_manager_init>
}
   17c60:	90                   	nop
   17c61:	c9                   	leave  
   17c62:	c3                   	ret    

00017c63 <move_to_first_task>:


void move_to_first_task(void) {
   17c63:	55                   	push   %ebp
   17c64:	89 e5                	mov    %esp,%ebp
   17c66:	56                   	push   %esi
   17c67:	53                   	push   %ebx
   17c68:	83 ec 10             	sub    $0x10,%esp
     
     
     
     
    task_t * curr = task_current();
   17c6b:	e8 99 9a ff ff       	call   11709 <task_current>
   17c70:	89 45 f4             	mov    %eax,-0xc(%ebp)
    ASSERT(curr != 0);
   17c73:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   17c77:	75 19                	jne    17c92 <move_to_first_task+0x2f>
   17c79:	68 74 9d 01 00       	push   $0x19d74
   17c7e:	68 20 9e 01 00       	push   $0x19e20
   17c83:	6a 2d                	push   $0x2d
   17c85:	68 80 9d 01 00       	push   $0x19d80
   17c8a:	e8 3a 0b 00 00       	call   187c9 <panic>
   17c8f:	83 c4 10             	add    $0x10,%esp

    tss_t * tss = &(curr->tss);
   17c92:	8b 45 f4             	mov    -0xc(%ebp),%eax
   17c95:	05 44 02 00 00       	add    $0x244,%eax
   17c9a:	89 45 f0             	mov    %eax,-0x10(%ebp)
        "push %[ss]\n\t"			 
        "push %[esp]\n\t"			 
        "push %[eflags]\n\t"            
        "push %[cs]\n\t"			 
        "push %[eip]\n\t"		     
        "iret\n\t"::[ss]"r"(tss->ss),  [esp]"r"(tss->esp), [eflags]"r"(tss->eflags),
   17c9d:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17ca0:	8b 40 50             	mov    0x50(%eax),%eax
   17ca3:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17ca6:	8b 52 38             	mov    0x38(%edx),%edx
   17ca9:	8b 4d f0             	mov    -0x10(%ebp),%ecx
   17cac:	8b 49 24             	mov    0x24(%ecx),%ecx
        [cs]"r"(tss->cs), [eip]"r"(tss->eip));
   17caf:	8b 5d f0             	mov    -0x10(%ebp),%ebx
   17cb2:	8b 5b 4c             	mov    0x4c(%ebx),%ebx
   17cb5:	8b 75 f0             	mov    -0x10(%ebp),%esi
   17cb8:	8b 76 20             	mov    0x20(%esi),%esi
    __asm__ __volatile__(
   17cbb:	50                   	push   %eax
   17cbc:	52                   	push   %edx
   17cbd:	51                   	push   %ecx
   17cbe:	53                   	push   %ebx
   17cbf:	56                   	push   %esi
   17cc0:	cf                   	iret   
}
   17cc1:	90                   	nop
   17cc2:	8d 65 f8             	lea    -0x8(%ebp),%esp
   17cc5:	5b                   	pop    %ebx
   17cc6:	5e                   	pop    %esi
   17cc7:	5d                   	pop    %ebp
   17cc8:	c3                   	ret    

00017cc9 <init_main>:

void init_main(void) {
   17cc9:	55                   	push   %ebp
   17cca:	89 e5                	mov    %esp,%ebp
   17ccc:	83 ec 08             	sub    $0x8,%esp
    log_printf("==============================");
   17ccf:	83 ec 0c             	sub    $0xc,%esp
   17cd2:	68 c0 9d 01 00       	push   $0x19dc0
   17cd7:	e8 4a 0d 00 00       	call   18a26 <log_printf>
   17cdc:	83 c4 10             	add    $0x10,%esp
    log_printf("Kernel is running....");
   17cdf:	83 ec 0c             	sub    $0xc,%esp
   17ce2:	68 df 9d 01 00       	push   $0x19ddf
   17ce7:	e8 3a 0d 00 00       	call   18a26 <log_printf>
   17cec:	83 c4 10             	add    $0x10,%esp
    log_printf("Version: %s, name: %s", OS_VERSION, "little x86 os");
   17cef:	83 ec 04             	sub    $0x4,%esp
   17cf2:	68 f5 9d 01 00       	push   $0x19df5
   17cf7:	68 03 9e 01 00       	push   $0x19e03
   17cfc:	68 09 9e 01 00       	push   $0x19e09
   17d01:	e8 20 0d 00 00       	call   18a26 <log_printf>
   17d06:	83 c4 10             	add    $0x10,%esp
    log_printf("==============================");
   17d09:	83 ec 0c             	sub    $0xc,%esp
   17d0c:	68 c0 9d 01 00       	push   $0x19dc0
   17d11:	e8 10 0d 00 00       	call   18a26 <log_printf>
   17d16:	83 c4 10             	add    $0x10,%esp

     
    task_first_init();
   17d19:	e8 05 97 ff ff       	call   11423 <task_first_init>
    move_to_first_task();
   17d1e:	e8 40 ff ff ff       	call   17c63 <move_to_first_task>
}
   17d23:	90                   	nop
   17d24:	c9                   	leave  
   17d25:	c3                   	ret    

00017d26 <list_count>:
{
   17d26:	55                   	push   %ebp
   17d27:	89 e5                	mov    %esp,%ebp
    return list->count;
   17d29:	8b 45 08             	mov    0x8(%ebp),%eax
   17d2c:	8b 40 08             	mov    0x8(%eax),%eax
}
   17d2f:	5d                   	pop    %ebp
   17d30:	c3                   	ret    

00017d31 <mutex_init>:

#include "cpu/irq.h"
#include "ipc/mutex.h"


void mutex_init (mutex_t * mutex) {
   17d31:	55                   	push   %ebp
   17d32:	89 e5                	mov    %esp,%ebp
   17d34:	83 ec 08             	sub    $0x8,%esp
    mutex->locked_count = 0;
   17d37:	8b 45 08             	mov    0x8(%ebp),%eax
   17d3a:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
    mutex->owner = (task_t *)0;
   17d41:	8b 45 08             	mov    0x8(%ebp),%eax
   17d44:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    list_init(&mutex->wait_list);
   17d4a:	8b 45 08             	mov    0x8(%ebp),%eax
   17d4d:	83 c0 08             	add    $0x8,%eax
   17d50:	83 ec 0c             	sub    $0xc,%esp
   17d53:	50                   	push   %eax
   17d54:	e8 b9 0a 00 00       	call   18812 <list_init>
   17d59:	83 c4 10             	add    $0x10,%esp
}
   17d5c:	90                   	nop
   17d5d:	c9                   	leave  
   17d5e:	c3                   	ret    

00017d5f <mutex_lock>:


void mutex_lock (mutex_t * mutex) {
   17d5f:	55                   	push   %ebp
   17d60:	89 e5                	mov    %esp,%ebp
   17d62:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17d65:	e8 a4 b3 ff ff       	call   1310e <irq_enter_protection>
   17d6a:	89 45 f4             	mov    %eax,-0xc(%ebp)

    task_t * curr = task_current();
   17d6d:	e8 97 99 ff ff       	call   11709 <task_current>
   17d72:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->locked_count == 0) {
   17d75:	8b 45 08             	mov    0x8(%ebp),%eax
   17d78:	8b 40 04             	mov    0x4(%eax),%eax
   17d7b:	85 c0                	test   %eax,%eax
   17d7d:	75 14                	jne    17d93 <mutex_lock+0x34>
         
        mutex->locked_count = 1;
   17d7f:	8b 45 08             	mov    0x8(%ebp),%eax
   17d82:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
        mutex->owner = curr;
   17d89:	8b 45 08             	mov    0x8(%ebp),%eax
   17d8c:	8b 55 f0             	mov    -0x10(%ebp),%edx
   17d8f:	89 10                	mov    %edx,(%eax)
   17d91:	eb 52                	jmp    17de5 <mutex_lock+0x86>
    } else if (mutex->owner == curr) {
   17d93:	8b 45 08             	mov    0x8(%ebp),%eax
   17d96:	8b 00                	mov    (%eax),%eax
   17d98:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17d9b:	75 11                	jne    17dae <mutex_lock+0x4f>
         
        mutex->locked_count++;
   17d9d:	8b 45 08             	mov    0x8(%ebp),%eax
   17da0:	8b 40 04             	mov    0x4(%eax),%eax
   17da3:	8d 50 01             	lea    0x1(%eax),%edx
   17da6:	8b 45 08             	mov    0x8(%ebp),%eax
   17da9:	89 50 04             	mov    %edx,0x4(%eax)
   17dac:	eb 37                	jmp    17de5 <mutex_lock+0x86>
    } else {
         
        task_t * curr = task_current();
   17dae:	e8 56 99 ff ff       	call   11709 <task_current>
   17db3:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_block(curr);
   17db6:	83 ec 0c             	sub    $0xc,%esp
   17db9:	ff 75 ec             	pushl  -0x14(%ebp)
   17dbc:	e8 7a 98 ff ff       	call   1163b <task_set_block>
   17dc1:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&mutex->wait_list, &curr->wait_node);
   17dc4:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17dc7:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17dcd:	8b 45 08             	mov    0x8(%ebp),%eax
   17dd0:	83 c0 08             	add    $0x8,%eax
   17dd3:	83 ec 08             	sub    $0x8,%esp
   17dd6:	52                   	push   %edx
   17dd7:	50                   	push   %eax
   17dd8:	e8 b9 0a 00 00       	call   18896 <list_insert_last>
   17ddd:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17de0:	e8 3b 9a ff ff       	call   11820 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17de5:	83 ec 0c             	sub    $0xc,%esp
   17de8:	ff 75 f4             	pushl  -0xc(%ebp)
   17deb:	e8 36 b3 ff ff       	call   13126 <irq_leave_protection>
   17df0:	83 c4 10             	add    $0x10,%esp
}
   17df3:	90                   	nop
   17df4:	c9                   	leave  
   17df5:	c3                   	ret    

00017df6 <mutex_unlock>:


void mutex_unlock (mutex_t * mutex) {
   17df6:	55                   	push   %ebp
   17df7:	89 e5                	mov    %esp,%ebp
   17df9:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17dfc:	e8 0d b3 ff ff       	call   1310e <irq_enter_protection>
   17e01:	89 45 f4             	mov    %eax,-0xc(%ebp)

     
    task_t * curr = task_current();
   17e04:	e8 00 99 ff ff       	call   11709 <task_current>
   17e09:	89 45 f0             	mov    %eax,-0x10(%ebp)
    if (mutex->owner == curr) {
   17e0c:	8b 45 08             	mov    0x8(%ebp),%eax
   17e0f:	8b 00                	mov    (%eax),%eax
   17e11:	39 45 f0             	cmp    %eax,-0x10(%ebp)
   17e14:	0f 85 8a 00 00 00    	jne    17ea4 <mutex_unlock+0xae>
        if (--mutex->locked_count == 0) {
   17e1a:	8b 45 08             	mov    0x8(%ebp),%eax
   17e1d:	8b 40 04             	mov    0x4(%eax),%eax
   17e20:	8d 50 ff             	lea    -0x1(%eax),%edx
   17e23:	8b 45 08             	mov    0x8(%ebp),%eax
   17e26:	89 50 04             	mov    %edx,0x4(%eax)
   17e29:	8b 45 08             	mov    0x8(%ebp),%eax
   17e2c:	8b 40 04             	mov    0x4(%eax),%eax
   17e2f:	85 c0                	test   %eax,%eax
   17e31:	75 71                	jne    17ea4 <mutex_unlock+0xae>
             
            mutex->owner = (task_t *)0;
   17e33:	8b 45 08             	mov    0x8(%ebp),%eax
   17e36:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

             
            if (list_count(&mutex->wait_list)) {
   17e3c:	8b 45 08             	mov    0x8(%ebp),%eax
   17e3f:	83 c0 08             	add    $0x8,%eax
   17e42:	83 ec 0c             	sub    $0xc,%esp
   17e45:	50                   	push   %eax
   17e46:	e8 db fe ff ff       	call   17d26 <list_count>
   17e4b:	83 c4 10             	add    $0x10,%esp
   17e4e:	85 c0                	test   %eax,%eax
   17e50:	74 52                	je     17ea4 <mutex_unlock+0xae>
                list_node_t * task_node = list_remove_first(&mutex->wait_list);
   17e52:	8b 45 08             	mov    0x8(%ebp),%eax
   17e55:	83 c0 08             	add    $0x8,%eax
   17e58:	83 ec 0c             	sub    $0xc,%esp
   17e5b:	50                   	push   %eax
   17e5c:	e8 99 0a 00 00       	call   188fa <list_remove_first>
   17e61:	83 c4 10             	add    $0x10,%esp
   17e64:	89 45 ec             	mov    %eax,-0x14(%ebp)
                task_t * task = list_node_parent(task_node, task_t, wait_node);
   17e67:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)
   17e6b:	74 0a                	je     17e77 <mutex_unlock+0x81>
   17e6d:	8b 45 ec             	mov    -0x14(%ebp),%eax
   17e70:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17e75:	eb 05                	jmp    17e7c <mutex_unlock+0x86>
   17e77:	b8 00 00 00 00       	mov    $0x0,%eax
   17e7c:	89 45 e8             	mov    %eax,-0x18(%ebp)
                task_set_ready(task);
   17e7f:	83 ec 0c             	sub    $0xc,%esp
   17e82:	ff 75 e8             	pushl  -0x18(%ebp)
   17e85:	e8 7d 97 ff ff       	call   11607 <task_set_ready>
   17e8a:	83 c4 10             	add    $0x10,%esp

                 
                mutex->locked_count = 1;
   17e8d:	8b 45 08             	mov    0x8(%ebp),%eax
   17e90:	c7 40 04 01 00 00 00 	movl   $0x1,0x4(%eax)
                mutex->owner = task;
   17e97:	8b 45 08             	mov    0x8(%ebp),%eax
   17e9a:	8b 55 e8             	mov    -0x18(%ebp),%edx
   17e9d:	89 10                	mov    %edx,(%eax)

                task_dispatch();
   17e9f:	e8 7c 99 ff ff       	call   11820 <task_dispatch>
            }
        }
    }

    irq_leave_protection(irq_state);
   17ea4:	83 ec 0c             	sub    $0xc,%esp
   17ea7:	ff 75 f4             	pushl  -0xc(%ebp)
   17eaa:	e8 77 b2 ff ff       	call   13126 <irq_leave_protection>
   17eaf:	83 c4 10             	add    $0x10,%esp
}
   17eb2:	90                   	nop
   17eb3:	c9                   	leave  
   17eb4:	c3                   	ret    

00017eb5 <list_count>:
{
   17eb5:	55                   	push   %ebp
   17eb6:	89 e5                	mov    %esp,%ebp
    return list->count;
   17eb8:	8b 45 08             	mov    0x8(%ebp),%eax
   17ebb:	8b 40 08             	mov    0x8(%eax),%eax
}
   17ebe:	5d                   	pop    %ebp
   17ebf:	c3                   	ret    

00017ec0 <sem_init>:
#include "cpu/irq.h"
#include "core/task.h"
#include "ipc/sem.h"


void sem_init (sem_t * sem, int init_count) {
   17ec0:	55                   	push   %ebp
   17ec1:	89 e5                	mov    %esp,%ebp
   17ec3:	83 ec 08             	sub    $0x8,%esp
    sem->count = init_count;
   17ec6:	8b 45 08             	mov    0x8(%ebp),%eax
   17ec9:	8b 55 0c             	mov    0xc(%ebp),%edx
   17ecc:	89 10                	mov    %edx,(%eax)
    list_init(&sem->wait_list);
   17ece:	8b 45 08             	mov    0x8(%ebp),%eax
   17ed1:	83 c0 04             	add    $0x4,%eax
   17ed4:	83 ec 0c             	sub    $0xc,%esp
   17ed7:	50                   	push   %eax
   17ed8:	e8 35 09 00 00       	call   18812 <list_init>
   17edd:	83 c4 10             	add    $0x10,%esp
}
   17ee0:	90                   	nop
   17ee1:	c9                   	leave  
   17ee2:	c3                   	ret    

00017ee3 <sem_wait>:


void sem_wait (sem_t * sem) {
   17ee3:	55                   	push   %ebp
   17ee4:	89 e5                	mov    %esp,%ebp
   17ee6:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17ee9:	e8 20 b2 ff ff       	call   1310e <irq_enter_protection>
   17eee:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (sem->count > 0) {
   17ef1:	8b 45 08             	mov    0x8(%ebp),%eax
   17ef4:	8b 00                	mov    (%eax),%eax
   17ef6:	85 c0                	test   %eax,%eax
   17ef8:	7e 0f                	jle    17f09 <sem_wait+0x26>
        sem->count--;
   17efa:	8b 45 08             	mov    0x8(%ebp),%eax
   17efd:	8b 00                	mov    (%eax),%eax
   17eff:	8d 50 ff             	lea    -0x1(%eax),%edx
   17f02:	8b 45 08             	mov    0x8(%ebp),%eax
   17f05:	89 10                	mov    %edx,(%eax)
   17f07:	eb 37                	jmp    17f40 <sem_wait+0x5d>
    } else {
         
        task_t * curr = task_current();
   17f09:	e8 fb 97 ff ff       	call   11709 <task_current>
   17f0e:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_set_block(curr);
   17f11:	83 ec 0c             	sub    $0xc,%esp
   17f14:	ff 75 f0             	pushl  -0x10(%ebp)
   17f17:	e8 1f 97 ff ff       	call   1163b <task_set_block>
   17f1c:	83 c4 10             	add    $0x10,%esp
        list_insert_last(&sem->wait_list, &curr->wait_node);
   17f1f:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f22:	8d 90 b8 02 00 00    	lea    0x2b8(%eax),%edx
   17f28:	8b 45 08             	mov    0x8(%ebp),%eax
   17f2b:	83 c0 04             	add    $0x4,%eax
   17f2e:	83 ec 08             	sub    $0x8,%esp
   17f31:	52                   	push   %edx
   17f32:	50                   	push   %eax
   17f33:	e8 5e 09 00 00       	call   18896 <list_insert_last>
   17f38:	83 c4 10             	add    $0x10,%esp
        task_dispatch();
   17f3b:	e8 e0 98 ff ff       	call   11820 <task_dispatch>
    }

    irq_leave_protection(irq_state);
   17f40:	83 ec 0c             	sub    $0xc,%esp
   17f43:	ff 75 f4             	pushl  -0xc(%ebp)
   17f46:	e8 db b1 ff ff       	call   13126 <irq_leave_protection>
   17f4b:	83 c4 10             	add    $0x10,%esp
}
   17f4e:	90                   	nop
   17f4f:	c9                   	leave  
   17f50:	c3                   	ret    

00017f51 <sem_notify>:


void sem_notify (sem_t * sem) {
   17f51:	55                   	push   %ebp
   17f52:	89 e5                	mov    %esp,%ebp
   17f54:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17f57:	e8 b2 b1 ff ff       	call   1310e <irq_enter_protection>
   17f5c:	89 45 f4             	mov    %eax,-0xc(%ebp)

    if (list_count(&sem->wait_list)) {
   17f5f:	8b 45 08             	mov    0x8(%ebp),%eax
   17f62:	83 c0 04             	add    $0x4,%eax
   17f65:	83 ec 0c             	sub    $0xc,%esp
   17f68:	50                   	push   %eax
   17f69:	e8 47 ff ff ff       	call   17eb5 <list_count>
   17f6e:	83 c4 10             	add    $0x10,%esp
   17f71:	85 c0                	test   %eax,%eax
   17f73:	74 42                	je     17fb7 <sem_notify+0x66>
         
        list_node_t * node = list_remove_first(&sem->wait_list);
   17f75:	8b 45 08             	mov    0x8(%ebp),%eax
   17f78:	83 c0 04             	add    $0x4,%eax
   17f7b:	83 ec 0c             	sub    $0xc,%esp
   17f7e:	50                   	push   %eax
   17f7f:	e8 76 09 00 00       	call   188fa <list_remove_first>
   17f84:	83 c4 10             	add    $0x10,%esp
   17f87:	89 45 f0             	mov    %eax,-0x10(%ebp)
        task_t * task = list_node_parent(node, task_t, wait_node);
   17f8a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   17f8e:	74 0a                	je     17f9a <sem_notify+0x49>
   17f90:	8b 45 f0             	mov    -0x10(%ebp),%eax
   17f93:	2d b8 02 00 00       	sub    $0x2b8,%eax
   17f98:	eb 05                	jmp    17f9f <sem_notify+0x4e>
   17f9a:	b8 00 00 00 00       	mov    $0x0,%eax
   17f9f:	89 45 ec             	mov    %eax,-0x14(%ebp)
        task_set_ready(task);
   17fa2:	83 ec 0c             	sub    $0xc,%esp
   17fa5:	ff 75 ec             	pushl  -0x14(%ebp)
   17fa8:	e8 5a 96 ff ff       	call   11607 <task_set_ready>
   17fad:	83 c4 10             	add    $0x10,%esp

        task_dispatch();
   17fb0:	e8 6b 98 ff ff       	call   11820 <task_dispatch>
   17fb5:	eb 0d                	jmp    17fc4 <sem_notify+0x73>
    } else {
        sem->count++;
   17fb7:	8b 45 08             	mov    0x8(%ebp),%eax
   17fba:	8b 00                	mov    (%eax),%eax
   17fbc:	8d 50 01             	lea    0x1(%eax),%edx
   17fbf:	8b 45 08             	mov    0x8(%ebp),%eax
   17fc2:	89 10                	mov    %edx,(%eax)
    }

    irq_leave_protection(irq_state);
   17fc4:	83 ec 0c             	sub    $0xc,%esp
   17fc7:	ff 75 f4             	pushl  -0xc(%ebp)
   17fca:	e8 57 b1 ff ff       	call   13126 <irq_leave_protection>
   17fcf:	83 c4 10             	add    $0x10,%esp
}
   17fd2:	90                   	nop
   17fd3:	c9                   	leave  
   17fd4:	c3                   	ret    

00017fd5 <sem_count>:


int sem_count (sem_t * sem) {
   17fd5:	55                   	push   %ebp
   17fd6:	89 e5                	mov    %esp,%ebp
   17fd8:	83 ec 18             	sub    $0x18,%esp
    irq_state_t  irq_state = irq_enter_protection();
   17fdb:	e8 2e b1 ff ff       	call   1310e <irq_enter_protection>
   17fe0:	89 45 f4             	mov    %eax,-0xc(%ebp)
    int count = sem->count;
   17fe3:	8b 45 08             	mov    0x8(%ebp),%eax
   17fe6:	8b 00                	mov    (%eax),%eax
   17fe8:	89 45 f0             	mov    %eax,-0x10(%ebp)
    irq_leave_protection(irq_state);
   17feb:	83 ec 0c             	sub    $0xc,%esp
   17fee:	ff 75 f4             	pushl  -0xc(%ebp)
   17ff1:	e8 30 b1 ff ff       	call   13126 <irq_leave_protection>
   17ff6:	83 c4 10             	add    $0x10,%esp
    return count;
   17ff9:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
   17ffc:	c9                   	leave  
   17ffd:	c3                   	ret    

00017ffe <bitmap_byte_count>:

#include "tools/bitmap.h"
#include "tools/klib.h"


int bitmap_byte_count (int bit_count) {
   17ffe:	55                   	push   %ebp
   17fff:	89 e5                	mov    %esp,%ebp
    return (bit_count + 8 - 1) / 8;          
   18001:	8b 45 08             	mov    0x8(%ebp),%eax
   18004:	83 c0 07             	add    $0x7,%eax
   18007:	8d 50 07             	lea    0x7(%eax),%edx
   1800a:	85 c0                	test   %eax,%eax
   1800c:	0f 48 c2             	cmovs  %edx,%eax
   1800f:	c1 f8 03             	sar    $0x3,%eax
}
   18012:	5d                   	pop    %ebp
   18013:	c3                   	ret    

00018014 <bitmap_init>:


void bitmap_init (bitmap_t * bitmap, uint8_t * bits, int count, int init_bit) {
   18014:	55                   	push   %ebp
   18015:	89 e5                	mov    %esp,%ebp
   18017:	83 ec 18             	sub    $0x18,%esp
    bitmap->bit_count = count;
   1801a:	8b 45 08             	mov    0x8(%ebp),%eax
   1801d:	8b 55 10             	mov    0x10(%ebp),%edx
   18020:	89 10                	mov    %edx,(%eax)
    bitmap->bits = bits;
   18022:	8b 45 08             	mov    0x8(%ebp),%eax
   18025:	8b 55 0c             	mov    0xc(%ebp),%edx
   18028:	89 50 04             	mov    %edx,0x4(%eax)

    int bytes = bitmap_byte_count(bitmap->bit_count);
   1802b:	8b 45 08             	mov    0x8(%ebp),%eax
   1802e:	8b 00                	mov    (%eax),%eax
   18030:	50                   	push   %eax
   18031:	e8 c8 ff ff ff       	call   17ffe <bitmap_byte_count>
   18036:	83 c4 04             	add    $0x4,%esp
   18039:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_memset(bitmap->bits, init_bit ? 0xFF: 0, bytes);
   1803c:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   18040:	74 07                	je     18049 <bitmap_init+0x35>
   18042:	ba ff 00 00 00       	mov    $0xff,%edx
   18047:	eb 05                	jmp    1804e <bitmap_init+0x3a>
   18049:	ba 00 00 00 00       	mov    $0x0,%edx
   1804e:	8b 45 08             	mov    0x8(%ebp),%eax
   18051:	8b 40 04             	mov    0x4(%eax),%eax
   18054:	83 ec 04             	sub    $0x4,%esp
   18057:	ff 75 f4             	pushl  -0xc(%ebp)
   1805a:	52                   	push   %edx
   1805b:	50                   	push   %eax
   1805c:	e8 1b 04 00 00       	call   1847c <kernel_memset>
   18061:	83 c4 10             	add    $0x10,%esp
}
   18064:	90                   	nop
   18065:	c9                   	leave  
   18066:	c3                   	ret    

00018067 <bitmap_set_bit>:


void bitmap_set_bit (bitmap_t * bitmap, int index, int count, int bit) {
   18067:	55                   	push   %ebp
   18068:	89 e5                	mov    %esp,%ebp
   1806a:	56                   	push   %esi
   1806b:	53                   	push   %ebx
   1806c:	83 ec 10             	sub    $0x10,%esp
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   1806f:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
   18076:	e9 a2 00 00 00       	jmp    1811d <bitmap_set_bit+0xb6>
         
        if (bit) {
   1807b:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)
   1807f:	74 4a                	je     180cb <bitmap_set_bit+0x64>
            bitmap->bits[index / 8] |= 1 << (index % 8);
   18081:	8b 45 08             	mov    0x8(%ebp),%eax
   18084:	8b 50 04             	mov    0x4(%eax),%edx
   18087:	8b 45 0c             	mov    0xc(%ebp),%eax
   1808a:	8d 48 07             	lea    0x7(%eax),%ecx
   1808d:	85 c0                	test   %eax,%eax
   1808f:	0f 48 c1             	cmovs  %ecx,%eax
   18092:	c1 f8 03             	sar    $0x3,%eax
   18095:	89 c3                	mov    %eax,%ebx
   18097:	89 d8                	mov    %ebx,%eax
   18099:	01 d0                	add    %edx,%eax
   1809b:	0f b6 00             	movzbl (%eax),%eax
   1809e:	89 c6                	mov    %eax,%esi
   180a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   180a3:	99                   	cltd   
   180a4:	c1 ea 1d             	shr    $0x1d,%edx
   180a7:	01 d0                	add    %edx,%eax
   180a9:	83 e0 07             	and    $0x7,%eax
   180ac:	29 d0                	sub    %edx,%eax
   180ae:	ba 01 00 00 00       	mov    $0x1,%edx
   180b3:	89 c1                	mov    %eax,%ecx
   180b5:	d3 e2                	shl    %cl,%edx
   180b7:	89 d0                	mov    %edx,%eax
   180b9:	89 f2                	mov    %esi,%edx
   180bb:	09 c2                	or     %eax,%edx
   180bd:	8b 45 08             	mov    0x8(%ebp),%eax
   180c0:	8b 40 04             	mov    0x4(%eax),%eax
   180c3:	89 d9                	mov    %ebx,%ecx
   180c5:	01 c8                	add    %ecx,%eax
   180c7:	88 10                	mov    %dl,(%eax)
   180c9:	eb 4a                	jmp    18115 <bitmap_set_bit+0xae>
        } else {
            bitmap->bits[index / 8] &= ~(1 << (index % 8));
   180cb:	8b 45 08             	mov    0x8(%ebp),%eax
   180ce:	8b 50 04             	mov    0x4(%eax),%edx
   180d1:	8b 45 0c             	mov    0xc(%ebp),%eax
   180d4:	8d 48 07             	lea    0x7(%eax),%ecx
   180d7:	85 c0                	test   %eax,%eax
   180d9:	0f 48 c1             	cmovs  %ecx,%eax
   180dc:	c1 f8 03             	sar    $0x3,%eax
   180df:	89 c3                	mov    %eax,%ebx
   180e1:	89 d8                	mov    %ebx,%eax
   180e3:	01 d0                	add    %edx,%eax
   180e5:	0f b6 00             	movzbl (%eax),%eax
   180e8:	89 c6                	mov    %eax,%esi
   180ea:	8b 45 0c             	mov    0xc(%ebp),%eax
   180ed:	99                   	cltd   
   180ee:	c1 ea 1d             	shr    $0x1d,%edx
   180f1:	01 d0                	add    %edx,%eax
   180f3:	83 e0 07             	and    $0x7,%eax
   180f6:	29 d0                	sub    %edx,%eax
   180f8:	ba 01 00 00 00       	mov    $0x1,%edx
   180fd:	89 c1                	mov    %eax,%ecx
   180ff:	d3 e2                	shl    %cl,%edx
   18101:	89 d0                	mov    %edx,%eax
   18103:	f7 d0                	not    %eax
   18105:	89 f2                	mov    %esi,%edx
   18107:	21 c2                	and    %eax,%edx
   18109:	8b 45 08             	mov    0x8(%ebp),%eax
   1810c:	8b 40 04             	mov    0x4(%eax),%eax
   1810f:	89 d9                	mov    %ebx,%ecx
   18111:	01 c8                	add    %ecx,%eax
   18113:	88 10                	mov    %dl,(%eax)
    for (int i = 0; (i < count) && (index < bitmap->bit_count); i++, index++) {
   18115:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   18119:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
   1811d:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18120:	3b 45 10             	cmp    0x10(%ebp),%eax
   18123:	7d 0e                	jge    18133 <bitmap_set_bit+0xcc>
   18125:	8b 45 08             	mov    0x8(%ebp),%eax
   18128:	8b 00                	mov    (%eax),%eax
   1812a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1812d:	0f 8c 48 ff ff ff    	jl     1807b <bitmap_set_bit+0x14>
        }
    }
} 
   18133:	90                   	nop
   18134:	83 c4 10             	add    $0x10,%esp
   18137:	5b                   	pop    %ebx
   18138:	5e                   	pop    %esi
   18139:	5d                   	pop    %ebp
   1813a:	c3                   	ret    

0001813b <bitmap_get_bit>:


int bitmap_get_bit (bitmap_t * bitmap, int index) {
   1813b:	55                   	push   %ebp
   1813c:	89 e5                	mov    %esp,%ebp
   1813e:	53                   	push   %ebx
     
     
    return (bitmap->bits[index / 8] & (1 << (index % 8))) ? 1 : 0;
   1813f:	8b 45 08             	mov    0x8(%ebp),%eax
   18142:	8b 50 04             	mov    0x4(%eax),%edx
   18145:	8b 45 0c             	mov    0xc(%ebp),%eax
   18148:	8d 48 07             	lea    0x7(%eax),%ecx
   1814b:	85 c0                	test   %eax,%eax
   1814d:	0f 48 c1             	cmovs  %ecx,%eax
   18150:	c1 f8 03             	sar    $0x3,%eax
   18153:	01 d0                	add    %edx,%eax
   18155:	0f b6 00             	movzbl (%eax),%eax
   18158:	0f b6 d8             	movzbl %al,%ebx
   1815b:	8b 45 0c             	mov    0xc(%ebp),%eax
   1815e:	99                   	cltd   
   1815f:	c1 ea 1d             	shr    $0x1d,%edx
   18162:	01 d0                	add    %edx,%eax
   18164:	83 e0 07             	and    $0x7,%eax
   18167:	29 d0                	sub    %edx,%eax
   18169:	89 c1                	mov    %eax,%ecx
   1816b:	d3 fb                	sar    %cl,%ebx
   1816d:	89 d8                	mov    %ebx,%eax
   1816f:	83 e0 01             	and    $0x1,%eax
}
   18172:	5b                   	pop    %ebx
   18173:	5d                   	pop    %ebp
   18174:	c3                   	ret    

00018175 <bitmap_is_set>:


int bitmap_is_set (bitmap_t * bitmap, int index) {
   18175:	55                   	push   %ebp
   18176:	89 e5                	mov    %esp,%ebp
    return bitmap_get_bit(bitmap, index) ? 1 : 0;
   18178:	ff 75 0c             	pushl  0xc(%ebp)
   1817b:	ff 75 08             	pushl  0x8(%ebp)
   1817e:	e8 b8 ff ff ff       	call   1813b <bitmap_get_bit>
   18183:	83 c4 08             	add    $0x8,%esp
   18186:	85 c0                	test   %eax,%eax
   18188:	0f 95 c0             	setne  %al
   1818b:	0f b6 c0             	movzbl %al,%eax
}
   1818e:	c9                   	leave  
   1818f:	c3                   	ret    

00018190 <bitmap_alloc_nbits>:


int bitmap_alloc_nbits (bitmap_t * bitmap, int bit, int count) {
   18190:	55                   	push   %ebp
   18191:	89 e5                	mov    %esp,%ebp
   18193:	83 ec 10             	sub    $0x10,%esp
    int search_idx = 0;
   18196:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    int ok_idx = -1;
   1819d:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)

    while (search_idx < bitmap->bit_count) {
   181a4:	e9 85 00 00 00       	jmp    1822e <bitmap_alloc_nbits+0x9e>
         
        if (bitmap_get_bit(bitmap, search_idx) != bit) {
   181a9:	ff 75 fc             	pushl  -0x4(%ebp)
   181ac:	ff 75 08             	pushl  0x8(%ebp)
   181af:	e8 87 ff ff ff       	call   1813b <bitmap_get_bit>
   181b4:	83 c4 08             	add    $0x8,%esp
   181b7:	39 45 0c             	cmp    %eax,0xc(%ebp)
   181ba:	74 06                	je     181c2 <bitmap_alloc_nbits+0x32>
             
            search_idx++;
   181bc:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
            continue;
   181c0:	eb 6c                	jmp    1822e <bitmap_alloc_nbits+0x9e>
        }

         
        ok_idx = search_idx;
   181c2:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181c5:	89 45 f8             	mov    %eax,-0x8(%ebp)

         
        int i;
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   181c8:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
   181cf:	eb 27                	jmp    181f8 <bitmap_alloc_nbits+0x68>
            if (bitmap_get_bit(bitmap, search_idx++) != bit) {
   181d1:	8b 45 fc             	mov    -0x4(%ebp),%eax
   181d4:	8d 50 01             	lea    0x1(%eax),%edx
   181d7:	89 55 fc             	mov    %edx,-0x4(%ebp)
   181da:	50                   	push   %eax
   181db:	ff 75 08             	pushl  0x8(%ebp)
   181de:	e8 58 ff ff ff       	call   1813b <bitmap_get_bit>
   181e3:	83 c4 08             	add    $0x8,%esp
   181e6:	39 45 0c             	cmp    %eax,0xc(%ebp)
   181e9:	74 09                	je     181f4 <bitmap_alloc_nbits+0x64>
                 
                ok_idx = -1;
   181eb:	c7 45 f8 ff ff ff ff 	movl   $0xffffffff,-0x8(%ebp)
                break;
   181f2:	eb 16                	jmp    1820a <bitmap_alloc_nbits+0x7a>
        for (i = 1; (i < count) && (search_idx < bitmap->bit_count); i++) {
   181f4:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
   181f8:	8b 45 f4             	mov    -0xc(%ebp),%eax
   181fb:	3b 45 10             	cmp    0x10(%ebp),%eax
   181fe:	7d 0a                	jge    1820a <bitmap_alloc_nbits+0x7a>
   18200:	8b 45 08             	mov    0x8(%ebp),%eax
   18203:	8b 00                	mov    (%eax),%eax
   18205:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18208:	7c c7                	jl     181d1 <bitmap_alloc_nbits+0x41>
            }
        }

         
        if (i >= count) {
   1820a:	8b 45 f4             	mov    -0xc(%ebp),%eax
   1820d:	3b 45 10             	cmp    0x10(%ebp),%eax
   18210:	7c 1c                	jl     1822e <bitmap_alloc_nbits+0x9e>
            bitmap_set_bit(bitmap, ok_idx, count, ~bit);
   18212:	8b 45 0c             	mov    0xc(%ebp),%eax
   18215:	f7 d0                	not    %eax
   18217:	50                   	push   %eax
   18218:	ff 75 10             	pushl  0x10(%ebp)
   1821b:	ff 75 f8             	pushl  -0x8(%ebp)
   1821e:	ff 75 08             	pushl  0x8(%ebp)
   18221:	e8 41 fe ff ff       	call   18067 <bitmap_set_bit>
   18226:	83 c4 10             	add    $0x10,%esp
            return ok_idx;
   18229:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1822c:	eb 13                	jmp    18241 <bitmap_alloc_nbits+0xb1>
    while (search_idx < bitmap->bit_count) {
   1822e:	8b 45 08             	mov    0x8(%ebp),%eax
   18231:	8b 00                	mov    (%eax),%eax
   18233:	39 45 fc             	cmp    %eax,-0x4(%ebp)
   18236:	0f 8c 6d ff ff ff    	jl     181a9 <bitmap_alloc_nbits+0x19>
        }
    }

    return -1;
   1823c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
}
   18241:	c9                   	leave  
   18242:	c3                   	ret    

00018243 <hlt>:
static inline void hlt(void) {
   18243:	55                   	push   %ebp
   18244:	89 e5                	mov    %esp,%ebp
    __asm__ __volatile__("hlt");
   18246:	f4                   	hlt    
}
   18247:	90                   	nop
   18248:	5d                   	pop    %ebp
   18249:	c3                   	ret    

0001824a <strings_count>:
#include "tools/klib.h"
#include "tools/log.h"
#include "comm/cpu_instr.h"


int strings_count (char ** start) {
   1824a:	55                   	push   %ebp
   1824b:	89 e5                	mov    %esp,%ebp
   1824d:	83 ec 10             	sub    $0x10,%esp
    int count = 0;
   18250:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)

    if (start) {
   18257:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1825b:	74 15                	je     18272 <strings_count+0x28>
        while (*start++) {
   1825d:	eb 04                	jmp    18263 <strings_count+0x19>
            count++;
   1825f:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
        while (*start++) {
   18263:	8b 45 08             	mov    0x8(%ebp),%eax
   18266:	8d 50 04             	lea    0x4(%eax),%edx
   18269:	89 55 08             	mov    %edx,0x8(%ebp)
   1826c:	8b 00                	mov    (%eax),%eax
   1826e:	85 c0                	test   %eax,%eax
   18270:	75 ed                	jne    1825f <strings_count+0x15>
        }
    }
    return count;
   18272:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18275:	c9                   	leave  
   18276:	c3                   	ret    

00018277 <get_file_name>:



char * get_file_name (char * name) {
   18277:	55                   	push   %ebp
   18278:	89 e5                	mov    %esp,%ebp
   1827a:	83 ec 10             	sub    $0x10,%esp
    char * s = name;
   1827d:	8b 45 08             	mov    0x8(%ebp),%eax
   18280:	89 45 fc             	mov    %eax,-0x4(%ebp)

     
    while (*s != '\0') {
   18283:	eb 04                	jmp    18289 <get_file_name+0x12>
        s++;
   18285:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)
    while (*s != '\0') {
   18289:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1828c:	0f b6 00             	movzbl (%eax),%eax
   1828f:	84 c0                	test   %al,%al
   18291:	75 f2                	jne    18285 <get_file_name+0xe>
    }

     
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   18293:	eb 04                	jmp    18299 <get_file_name+0x22>
        s--;
   18295:	83 6d fc 01          	subl   $0x1,-0x4(%ebp)
    while ((*s != '\\') && (*s != '/') && (s >= name)) {
   18299:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1829c:	0f b6 00             	movzbl (%eax),%eax
   1829f:	3c 5c                	cmp    $0x5c,%al
   182a1:	74 12                	je     182b5 <get_file_name+0x3e>
   182a3:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182a6:	0f b6 00             	movzbl (%eax),%eax
   182a9:	3c 2f                	cmp    $0x2f,%al
   182ab:	74 08                	je     182b5 <get_file_name+0x3e>
   182ad:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182b0:	3b 45 08             	cmp    0x8(%ebp),%eax
   182b3:	73 e0                	jae    18295 <get_file_name+0x1e>
    }
    return s + 1;
   182b5:	8b 45 fc             	mov    -0x4(%ebp),%eax
   182b8:	83 c0 01             	add    $0x1,%eax
}
   182bb:	c9                   	leave  
   182bc:	c3                   	ret    

000182bd <kernel_strcpy>:

void kernel_strcpy (char * dest, const char * src) {
   182bd:	55                   	push   %ebp
   182be:	89 e5                	mov    %esp,%ebp
    if (!dest || !src) {
   182c0:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   182c4:	74 3b                	je     18301 <kernel_strcpy+0x44>
   182c6:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   182ca:	74 35                	je     18301 <kernel_strcpy+0x44>
        return;
    }

    while (*dest && *src) {
   182cc:	eb 17                	jmp    182e5 <kernel_strcpy+0x28>
        *dest++ = *src++;
   182ce:	8b 55 0c             	mov    0xc(%ebp),%edx
   182d1:	8d 42 01             	lea    0x1(%edx),%eax
   182d4:	89 45 0c             	mov    %eax,0xc(%ebp)
   182d7:	8b 45 08             	mov    0x8(%ebp),%eax
   182da:	8d 48 01             	lea    0x1(%eax),%ecx
   182dd:	89 4d 08             	mov    %ecx,0x8(%ebp)
   182e0:	0f b6 12             	movzbl (%edx),%edx
   182e3:	88 10                	mov    %dl,(%eax)
    while (*dest && *src) {
   182e5:	8b 45 08             	mov    0x8(%ebp),%eax
   182e8:	0f b6 00             	movzbl (%eax),%eax
   182eb:	84 c0                	test   %al,%al
   182ed:	74 0a                	je     182f9 <kernel_strcpy+0x3c>
   182ef:	8b 45 0c             	mov    0xc(%ebp),%eax
   182f2:	0f b6 00             	movzbl (%eax),%eax
   182f5:	84 c0                	test   %al,%al
   182f7:	75 d5                	jne    182ce <kernel_strcpy+0x11>
    }
    *dest = '\0';
   182f9:	8b 45 08             	mov    0x8(%ebp),%eax
   182fc:	c6 00 00             	movb   $0x0,(%eax)
   182ff:	eb 01                	jmp    18302 <kernel_strcpy+0x45>
        return;
   18301:	90                   	nop
}
   18302:	5d                   	pop    %ebp
   18303:	c3                   	ret    

00018304 <kernel_strncpy>:

void kernel_strncpy(char * dest, const char * src, int size) {
   18304:	55                   	push   %ebp
   18305:	89 e5                	mov    %esp,%ebp
   18307:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   1830a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1830e:	74 61                	je     18371 <kernel_strncpy+0x6d>
   18310:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   18314:	74 5b                	je     18371 <kernel_strncpy+0x6d>
   18316:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1831a:	74 55                	je     18371 <kernel_strncpy+0x6d>
        return;
    }

    char * d = dest;
   1831c:	8b 45 08             	mov    0x8(%ebp),%eax
   1831f:	89 45 fc             	mov    %eax,-0x4(%ebp)
    const char * s = src;
   18322:	8b 45 0c             	mov    0xc(%ebp),%eax
   18325:	89 45 f8             	mov    %eax,-0x8(%ebp)

    while ((size-- > 0) && (*s)) {
   18328:	eb 17                	jmp    18341 <kernel_strncpy+0x3d>
        *d++ = *s++;
   1832a:	8b 55 f8             	mov    -0x8(%ebp),%edx
   1832d:	8d 42 01             	lea    0x1(%edx),%eax
   18330:	89 45 f8             	mov    %eax,-0x8(%ebp)
   18333:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18336:	8d 48 01             	lea    0x1(%eax),%ecx
   18339:	89 4d fc             	mov    %ecx,-0x4(%ebp)
   1833c:	0f b6 12             	movzbl (%edx),%edx
   1833f:	88 10                	mov    %dl,(%eax)
    while ((size-- > 0) && (*s)) {
   18341:	8b 45 10             	mov    0x10(%ebp),%eax
   18344:	8d 50 ff             	lea    -0x1(%eax),%edx
   18347:	89 55 10             	mov    %edx,0x10(%ebp)
   1834a:	85 c0                	test   %eax,%eax
   1834c:	7e 0a                	jle    18358 <kernel_strncpy+0x54>
   1834e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18351:	0f b6 00             	movzbl (%eax),%eax
   18354:	84 c0                	test   %al,%al
   18356:	75 d2                	jne    1832a <kernel_strncpy+0x26>
    }
    if (size == 0) {
   18358:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   1835c:	75 0b                	jne    18369 <kernel_strncpy+0x65>
        *(d - 1) = '\0';
   1835e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18361:	83 e8 01             	sub    $0x1,%eax
   18364:	c6 00 00             	movb   $0x0,(%eax)
   18367:	eb 09                	jmp    18372 <kernel_strncpy+0x6e>
    } else {
        *d = '\0';
   18369:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1836c:	c6 00 00             	movb   $0x0,(%eax)
   1836f:	eb 01                	jmp    18372 <kernel_strncpy+0x6e>
        return;
   18371:	90                   	nop
    }
}
   18372:	c9                   	leave  
   18373:	c3                   	ret    

00018374 <kernel_strlen>:

int kernel_strlen(const char * str) {
   18374:	55                   	push   %ebp
   18375:	89 e5                	mov    %esp,%ebp
   18377:	83 ec 10             	sub    $0x10,%esp
    if (str == (const char *)0) {
   1837a:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1837e:	75 07                	jne    18387 <kernel_strlen+0x13>
        return 0;
   18380:	b8 00 00 00 00       	mov    $0x0,%eax
   18385:	eb 26                	jmp    183ad <kernel_strlen+0x39>
    }

	const char * c = str;
   18387:	8b 45 08             	mov    0x8(%ebp),%eax
   1838a:	89 45 fc             	mov    %eax,-0x4(%ebp)

	int len = 0;
   1838d:	c7 45 f8 00 00 00 00 	movl   $0x0,-0x8(%ebp)
	while (*c++) {
   18394:	eb 04                	jmp    1839a <kernel_strlen+0x26>
		len++;
   18396:	83 45 f8 01          	addl   $0x1,-0x8(%ebp)
	while (*c++) {
   1839a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1839d:	8d 50 01             	lea    0x1(%eax),%edx
   183a0:	89 55 fc             	mov    %edx,-0x4(%ebp)
   183a3:	0f b6 00             	movzbl (%eax),%eax
   183a6:	84 c0                	test   %al,%al
   183a8:	75 ec                	jne    18396 <kernel_strlen+0x22>
	}

	return len;
   183aa:	8b 45 f8             	mov    -0x8(%ebp),%eax
}
   183ad:	c9                   	leave  
   183ae:	c3                   	ret    

000183af <kernel_strncmp>:


int kernel_strncmp (const char * s1, const char * s2, int size) {
   183af:	55                   	push   %ebp
   183b0:	89 e5                	mov    %esp,%ebp
    if (!s1 || !s2) {
   183b2:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   183b6:	74 06                	je     183be <kernel_strncmp+0xf>
   183b8:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   183bc:	75 13                	jne    183d1 <kernel_strncmp+0x22>
        return -1;
   183be:	b8 ff ff ff ff       	mov    $0xffffffff,%eax
   183c3:	eb 66                	jmp    1842b <kernel_strncmp+0x7c>
    }

     
    while (*s1 && *s2 && (*s1 == *s2) && size) {
    	s1++;
   183c5:	83 45 08 01          	addl   $0x1,0x8(%ebp)
    	s2++;
   183c9:	83 45 0c 01          	addl   $0x1,0xc(%ebp)
    	size--;
   183cd:	83 6d 10 01          	subl   $0x1,0x10(%ebp)
    while (*s1 && *s2 && (*s1 == *s2) && size) {
   183d1:	8b 45 08             	mov    0x8(%ebp),%eax
   183d4:	0f b6 00             	movzbl (%eax),%eax
   183d7:	84 c0                	test   %al,%al
   183d9:	74 20                	je     183fb <kernel_strncmp+0x4c>
   183db:	8b 45 0c             	mov    0xc(%ebp),%eax
   183de:	0f b6 00             	movzbl (%eax),%eax
   183e1:	84 c0                	test   %al,%al
   183e3:	74 16                	je     183fb <kernel_strncmp+0x4c>
   183e5:	8b 45 08             	mov    0x8(%ebp),%eax
   183e8:	0f b6 10             	movzbl (%eax),%edx
   183eb:	8b 45 0c             	mov    0xc(%ebp),%eax
   183ee:	0f b6 00             	movzbl (%eax),%eax
   183f1:	38 c2                	cmp    %al,%dl
   183f3:	75 06                	jne    183fb <kernel_strncmp+0x4c>
   183f5:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   183f9:	75 ca                	jne    183c5 <kernel_strncmp+0x16>
    }

    return !((*s1 == '\0') || (*s2 == '\0') || (*s1 == *s2));
   183fb:	8b 45 08             	mov    0x8(%ebp),%eax
   183fe:	0f b6 00             	movzbl (%eax),%eax
   18401:	84 c0                	test   %al,%al
   18403:	74 21                	je     18426 <kernel_strncmp+0x77>
   18405:	8b 45 0c             	mov    0xc(%ebp),%eax
   18408:	0f b6 00             	movzbl (%eax),%eax
   1840b:	84 c0                	test   %al,%al
   1840d:	74 17                	je     18426 <kernel_strncmp+0x77>
   1840f:	8b 45 08             	mov    0x8(%ebp),%eax
   18412:	0f b6 10             	movzbl (%eax),%edx
   18415:	8b 45 0c             	mov    0xc(%ebp),%eax
   18418:	0f b6 00             	movzbl (%eax),%eax
   1841b:	38 c2                	cmp    %al,%dl
   1841d:	74 07                	je     18426 <kernel_strncmp+0x77>
   1841f:	b8 01 00 00 00       	mov    $0x1,%eax
   18424:	eb 05                	jmp    1842b <kernel_strncmp+0x7c>
   18426:	b8 00 00 00 00       	mov    $0x0,%eax
}
   1842b:	5d                   	pop    %ebp
   1842c:	c3                   	ret    

0001842d <kernel_memcpy>:

void kernel_memcpy (void * dest, void * src, int size) {
   1842d:	55                   	push   %ebp
   1842e:	89 e5                	mov    %esp,%ebp
   18430:	83 ec 10             	sub    $0x10,%esp
    if (!dest || !src || !size) {
   18433:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   18437:	74 40                	je     18479 <kernel_memcpy+0x4c>
   18439:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1843d:	74 3a                	je     18479 <kernel_memcpy+0x4c>
   1843f:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18443:	74 34                	je     18479 <kernel_memcpy+0x4c>
        return;
    }

    uint8_t * s = (uint8_t *)src;
   18445:	8b 45 0c             	mov    0xc(%ebp),%eax
   18448:	89 45 fc             	mov    %eax,-0x4(%ebp)
    uint8_t * d = (uint8_t *)dest;
   1844b:	8b 45 08             	mov    0x8(%ebp),%eax
   1844e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while (size--) {
   18451:	eb 17                	jmp    1846a <kernel_memcpy+0x3d>
        *d++ = *s++;
   18453:	8b 55 fc             	mov    -0x4(%ebp),%edx
   18456:	8d 42 01             	lea    0x1(%edx),%eax
   18459:	89 45 fc             	mov    %eax,-0x4(%ebp)
   1845c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1845f:	8d 48 01             	lea    0x1(%eax),%ecx
   18462:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   18465:	0f b6 12             	movzbl (%edx),%edx
   18468:	88 10                	mov    %dl,(%eax)
    while (size--) {
   1846a:	8b 45 10             	mov    0x10(%ebp),%eax
   1846d:	8d 50 ff             	lea    -0x1(%eax),%edx
   18470:	89 55 10             	mov    %edx,0x10(%ebp)
   18473:	85 c0                	test   %eax,%eax
   18475:	75 dc                	jne    18453 <kernel_memcpy+0x26>
   18477:	eb 01                	jmp    1847a <kernel_memcpy+0x4d>
        return;
   18479:	90                   	nop
    }
}
   1847a:	c9                   	leave  
   1847b:	c3                   	ret    

0001847c <kernel_memset>:

void kernel_memset(void * dest, uint8_t v, int size) {
   1847c:	55                   	push   %ebp
   1847d:	89 e5                	mov    %esp,%ebp
   1847f:	83 ec 14             	sub    $0x14,%esp
   18482:	8b 45 0c             	mov    0xc(%ebp),%eax
   18485:	88 45 ec             	mov    %al,-0x14(%ebp)
    if (!dest || !size) {
   18488:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   1848c:	74 2c                	je     184ba <kernel_memset+0x3e>
   1848e:	83 7d 10 00          	cmpl   $0x0,0x10(%ebp)
   18492:	74 26                	je     184ba <kernel_memset+0x3e>
        return;
    }

    uint8_t * d = (uint8_t *)dest;
   18494:	8b 45 08             	mov    0x8(%ebp),%eax
   18497:	89 45 fc             	mov    %eax,-0x4(%ebp)
    while (size--) {
   1849a:	eb 0f                	jmp    184ab <kernel_memset+0x2f>
        *d++ = v;
   1849c:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1849f:	8d 50 01             	lea    0x1(%eax),%edx
   184a2:	89 55 fc             	mov    %edx,-0x4(%ebp)
   184a5:	0f b6 55 ec          	movzbl -0x14(%ebp),%edx
   184a9:	88 10                	mov    %dl,(%eax)
    while (size--) {
   184ab:	8b 45 10             	mov    0x10(%ebp),%eax
   184ae:	8d 50 ff             	lea    -0x1(%eax),%edx
   184b1:	89 55 10             	mov    %edx,0x10(%ebp)
   184b4:	85 c0                	test   %eax,%eax
   184b6:	75 e4                	jne    1849c <kernel_memset+0x20>
   184b8:	eb 01                	jmp    184bb <kernel_memset+0x3f>
        return;
   184ba:	90                   	nop
    }
}
   184bb:	c9                   	leave  
   184bc:	c3                   	ret    

000184bd <kernel_memcmp>:

int kernel_memcmp (void * d1, void * d2, int size) {
   184bd:	55                   	push   %ebp
   184be:	89 e5                	mov    %esp,%ebp
   184c0:	83 ec 10             	sub    $0x10,%esp
    if (!d1 || !d2) {
   184c3:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
   184c7:	74 06                	je     184cf <kernel_memcmp+0x12>
   184c9:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   184cd:	75 07                	jne    184d6 <kernel_memcmp+0x19>
        return 1;
   184cf:	b8 01 00 00 00       	mov    $0x1,%eax
   184d4:	eb 43                	jmp    18519 <kernel_memcmp+0x5c>
    }

	uint8_t * p_d1 = (uint8_t *)d1;
   184d6:	8b 45 08             	mov    0x8(%ebp),%eax
   184d9:	89 45 fc             	mov    %eax,-0x4(%ebp)
	uint8_t * p_d2 = (uint8_t *)d2;
   184dc:	8b 45 0c             	mov    0xc(%ebp),%eax
   184df:	89 45 f8             	mov    %eax,-0x8(%ebp)
	while (size--) {
   184e2:	eb 23                	jmp    18507 <kernel_memcmp+0x4a>
		if (*p_d1++ != *p_d2++) {
   184e4:	8b 45 fc             	mov    -0x4(%ebp),%eax
   184e7:	8d 50 01             	lea    0x1(%eax),%edx
   184ea:	89 55 fc             	mov    %edx,-0x4(%ebp)
   184ed:	0f b6 08             	movzbl (%eax),%ecx
   184f0:	8b 45 f8             	mov    -0x8(%ebp),%eax
   184f3:	8d 50 01             	lea    0x1(%eax),%edx
   184f6:	89 55 f8             	mov    %edx,-0x8(%ebp)
   184f9:	0f b6 00             	movzbl (%eax),%eax
   184fc:	38 c1                	cmp    %al,%cl
   184fe:	74 07                	je     18507 <kernel_memcmp+0x4a>
			return 1;
   18500:	b8 01 00 00 00       	mov    $0x1,%eax
   18505:	eb 12                	jmp    18519 <kernel_memcmp+0x5c>
	while (size--) {
   18507:	8b 45 10             	mov    0x10(%ebp),%eax
   1850a:	8d 50 ff             	lea    -0x1(%eax),%edx
   1850d:	89 55 10             	mov    %edx,0x10(%ebp)
   18510:	85 c0                	test   %eax,%eax
   18512:	75 d0                	jne    184e4 <kernel_memcmp+0x27>
		}
	}

	return 0;
   18514:	b8 00 00 00 00       	mov    $0x0,%eax
}
   18519:	c9                   	leave  
   1851a:	c3                   	ret    

0001851b <kernel_itoa>:

void kernel_itoa(char * buf, int num, int base) {
   1851b:	55                   	push   %ebp
   1851c:	89 e5                	mov    %esp,%ebp
   1851e:	53                   	push   %ebx
   1851f:	83 ec 20             	sub    $0x20,%esp
     
    static const char * num2ch = {"FEDCBA9876543210123456789ABCDEF"};
    char * p = buf;
   18522:	8b 45 08             	mov    0x8(%ebp),%eax
   18525:	89 45 f8             	mov    %eax,-0x8(%ebp)
    int old_num = num;
   18528:	8b 45 0c             	mov    0xc(%ebp),%eax
   1852b:	89 45 e8             	mov    %eax,-0x18(%ebp)

     
    if ((base != 2) && (base != 8) && (base != 10) && (base != 16)) {
   1852e:	83 7d 10 02          	cmpl   $0x2,0x10(%ebp)
   18532:	74 1d                	je     18551 <kernel_itoa+0x36>
   18534:	83 7d 10 08          	cmpl   $0x8,0x10(%ebp)
   18538:	74 17                	je     18551 <kernel_itoa+0x36>
   1853a:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   1853e:	74 11                	je     18551 <kernel_itoa+0x36>
   18540:	83 7d 10 10          	cmpl   $0x10,0x10(%ebp)
   18544:	74 0b                	je     18551 <kernel_itoa+0x36>
        *p = '\0';
   18546:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18549:	c6 00 00             	movb   $0x0,(%eax)
        return;
   1854c:	e9 03 01 00 00       	jmp    18654 <kernel_itoa+0x139>
    }

     
    int signed_num = 0;
   18551:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
    if ((num < 0) && (base == 10)) {
   18558:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   1855c:	79 19                	jns    18577 <kernel_itoa+0x5c>
   1855e:	83 7d 10 0a          	cmpl   $0xa,0x10(%ebp)
   18562:	75 13                	jne    18577 <kernel_itoa+0x5c>
        *p++ = '-';
   18564:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18567:	8d 50 01             	lea    0x1(%eax),%edx
   1856a:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1856d:	c6 00 2d             	movb   $0x2d,(%eax)
        signed_num = 1;
   18570:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)
    }

    if (signed_num) {
   18577:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   1857b:	74 3b                	je     185b8 <kernel_itoa+0x9d>
        do {
            char ch = num2ch[num % base + 15];
   1857d:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   18583:	8b 45 0c             	mov    0xc(%ebp),%eax
   18586:	99                   	cltd   
   18587:	f7 7d 10             	idivl  0x10(%ebp)
   1858a:	89 d0                	mov    %edx,%eax
   1858c:	83 c0 0f             	add    $0xf,%eax
   1858f:	01 c8                	add    %ecx,%eax
   18591:	0f b6 00             	movzbl (%eax),%eax
   18594:	88 45 e6             	mov    %al,-0x1a(%ebp)
            *p++ = ch;
   18597:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1859a:	8d 50 01             	lea    0x1(%eax),%edx
   1859d:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185a0:	0f b6 55 e6          	movzbl -0x1a(%ebp),%edx
   185a4:	88 10                	mov    %dl,(%eax)
            num /= base;
   185a6:	8b 45 0c             	mov    0xc(%ebp),%eax
   185a9:	99                   	cltd   
   185aa:	f7 7d 10             	idivl  0x10(%ebp)
   185ad:	89 45 0c             	mov    %eax,0xc(%ebp)
        } while (num);
   185b0:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)
   185b4:	75 c7                	jne    1857d <kernel_itoa+0x62>
   185b6:	eb 4b                	jmp    18603 <kernel_itoa+0xe8>
    } else {
        uint32_t u_num = (uint32_t)num;
   185b8:	8b 45 0c             	mov    0xc(%ebp),%eax
   185bb:	89 45 f0             	mov    %eax,-0x10(%ebp)
        do {
            char ch = num2ch[u_num % base + 15];
   185be:	8b 0d 74 a1 01 00    	mov    0x1a174,%ecx
   185c4:	8b 5d 10             	mov    0x10(%ebp),%ebx
   185c7:	8b 45 f0             	mov    -0x10(%ebp),%eax
   185ca:	ba 00 00 00 00       	mov    $0x0,%edx
   185cf:	f7 f3                	div    %ebx
   185d1:	89 d0                	mov    %edx,%eax
   185d3:	83 c0 0f             	add    $0xf,%eax
   185d6:	01 c8                	add    %ecx,%eax
   185d8:	0f b6 00             	movzbl (%eax),%eax
   185db:	88 45 e7             	mov    %al,-0x19(%ebp)
            *p++ = ch;
   185de:	8b 45 f8             	mov    -0x8(%ebp),%eax
   185e1:	8d 50 01             	lea    0x1(%eax),%edx
   185e4:	89 55 f8             	mov    %edx,-0x8(%ebp)
   185e7:	0f b6 55 e7          	movzbl -0x19(%ebp),%edx
   185eb:	88 10                	mov    %dl,(%eax)
            u_num /= base;
   185ed:	8b 5d 10             	mov    0x10(%ebp),%ebx
   185f0:	8b 45 f0             	mov    -0x10(%ebp),%eax
   185f3:	ba 00 00 00 00       	mov    $0x0,%edx
   185f8:	f7 f3                	div    %ebx
   185fa:	89 45 f0             	mov    %eax,-0x10(%ebp)
        } while (u_num);
   185fd:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
   18601:	75 bb                	jne    185be <kernel_itoa+0xa3>
    }
    *p-- = '\0';
   18603:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18606:	8d 50 ff             	lea    -0x1(%eax),%edx
   18609:	89 55 f8             	mov    %edx,-0x8(%ebp)
   1860c:	c6 00 00             	movb   $0x0,(%eax)

     
    char * start = (!signed_num) ? buf : buf + 1;
   1860f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)
   18613:	74 08                	je     1861d <kernel_itoa+0x102>
   18615:	8b 45 08             	mov    0x8(%ebp),%eax
   18618:	83 c0 01             	add    $0x1,%eax
   1861b:	eb 03                	jmp    18620 <kernel_itoa+0x105>
   1861d:	8b 45 08             	mov    0x8(%ebp),%eax
   18620:	89 45 ec             	mov    %eax,-0x14(%ebp)
    while (start < p) {
   18623:	eb 27                	jmp    1864c <kernel_itoa+0x131>
        char ch = *start;
   18625:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18628:	0f b6 00             	movzbl (%eax),%eax
   1862b:	88 45 e5             	mov    %al,-0x1b(%ebp)
        *start = *p;
   1862e:	8b 45 f8             	mov    -0x8(%ebp),%eax
   18631:	0f b6 10             	movzbl (%eax),%edx
   18634:	8b 45 ec             	mov    -0x14(%ebp),%eax
   18637:	88 10                	mov    %dl,(%eax)
        *p-- = ch;
   18639:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1863c:	8d 50 ff             	lea    -0x1(%eax),%edx
   1863f:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18642:	0f b6 55 e5          	movzbl -0x1b(%ebp),%edx
   18646:	88 10                	mov    %dl,(%eax)
        start++;
   18648:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)
    while (start < p) {
   1864c:	8b 45 ec             	mov    -0x14(%ebp),%eax
   1864f:	3b 45 f8             	cmp    -0x8(%ebp),%eax
   18652:	72 d1                	jb     18625 <kernel_itoa+0x10a>
    }
}
   18654:	83 c4 20             	add    $0x20,%esp
   18657:	5b                   	pop    %ebx
   18658:	5d                   	pop    %ebp
   18659:	c3                   	ret    

0001865a <kernel_sprintf>:


void kernel_sprintf(char * buffer, const char * fmt, ...) {
   1865a:	55                   	push   %ebp
   1865b:	89 e5                	mov    %esp,%ebp
   1865d:	83 ec 18             	sub    $0x18,%esp
    va_list args;

    va_start(args, fmt);
   18660:	8d 45 10             	lea    0x10(%ebp),%eax
   18663:	89 45 f4             	mov    %eax,-0xc(%ebp)
    kernel_vsprintf(buffer, fmt, args);
   18666:	8b 45 f4             	mov    -0xc(%ebp),%eax
   18669:	83 ec 04             	sub    $0x4,%esp
   1866c:	50                   	push   %eax
   1866d:	ff 75 0c             	pushl  0xc(%ebp)
   18670:	ff 75 08             	pushl  0x8(%ebp)
   18673:	e8 06 00 00 00       	call   1867e <kernel_vsprintf>
   18678:	83 c4 10             	add    $0x10,%esp
    va_end(args);
}
   1867b:	90                   	nop
   1867c:	c9                   	leave  
   1867d:	c3                   	ret    

0001867e <kernel_vsprintf>:


void kernel_vsprintf(char * buffer, const char * fmt, va_list args) {
   1867e:	55                   	push   %ebp
   1867f:	89 e5                	mov    %esp,%ebp
   18681:	83 ec 20             	sub    $0x20,%esp
    enum {NORMAL, READ_FMT} state = NORMAL;
   18684:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
    char ch;
    char * curr = buffer;
   1868b:	8b 45 08             	mov    0x8(%ebp),%eax
   1868e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    while ((ch = *fmt++)) {
   18691:	e9 17 01 00 00       	jmp    187ad <kernel_vsprintf+0x12f>
        switch (state) {
   18696:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18699:	85 c0                	test   %eax,%eax
   1869b:	74 0a                	je     186a7 <kernel_vsprintf+0x29>
   1869d:	83 f8 01             	cmp    $0x1,%eax
   186a0:	74 2b                	je     186cd <kernel_vsprintf+0x4f>
   186a2:	e9 06 01 00 00       	jmp    187ad <kernel_vsprintf+0x12f>
             
            case NORMAL:
                if (ch == '%') {
   186a7:	80 7d ef 25          	cmpb   $0x25,-0x11(%ebp)
   186ab:	75 0c                	jne    186b9 <kernel_vsprintf+0x3b>
                    state = READ_FMT;
   186ad:	c7 45 fc 01 00 00 00 	movl   $0x1,-0x4(%ebp)
   186b4:	e9 f4 00 00 00       	jmp    187ad <kernel_vsprintf+0x12f>
                } else {
                    *curr++ = ch;
   186b9:	8b 45 f8             	mov    -0x8(%ebp),%eax
   186bc:	8d 50 01             	lea    0x1(%eax),%edx
   186bf:	89 55 f8             	mov    %edx,-0x8(%ebp)
   186c2:	0f b6 55 ef          	movzbl -0x11(%ebp),%edx
   186c6:	88 10                	mov    %dl,(%eax)
                }
                break;
   186c8:	e9 e0 00 00 00       	jmp    187ad <kernel_vsprintf+0x12f>
             
            case READ_FMT:
                if (ch == 'd') {
   186cd:	80 7d ef 64          	cmpb   $0x64,-0x11(%ebp)
   186d1:	75 31                	jne    18704 <kernel_vsprintf+0x86>
                    int num = va_arg(args, int);
   186d3:	8b 45 10             	mov    0x10(%ebp),%eax
   186d6:	8d 50 04             	lea    0x4(%eax),%edx
   186d9:	89 55 10             	mov    %edx,0x10(%ebp)
   186dc:	8b 00                	mov    (%eax),%eax
   186de:	89 45 e4             	mov    %eax,-0x1c(%ebp)
                    kernel_itoa(curr, num, 10);
   186e1:	6a 0a                	push   $0xa
   186e3:	ff 75 e4             	pushl  -0x1c(%ebp)
   186e6:	ff 75 f8             	pushl  -0x8(%ebp)
   186e9:	e8 2d fe ff ff       	call   1851b <kernel_itoa>
   186ee:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   186f1:	ff 75 f8             	pushl  -0x8(%ebp)
   186f4:	e8 7b fc ff ff       	call   18374 <kernel_strlen>
   186f9:	83 c4 04             	add    $0x4,%esp
   186fc:	01 45 f8             	add    %eax,-0x8(%ebp)
   186ff:	e9 a1 00 00 00       	jmp    187a5 <kernel_vsprintf+0x127>
                } else if (ch == 'x') {
   18704:	80 7d ef 78          	cmpb   $0x78,-0x11(%ebp)
   18708:	75 2e                	jne    18738 <kernel_vsprintf+0xba>
                    int num = va_arg(args, int);
   1870a:	8b 45 10             	mov    0x10(%ebp),%eax
   1870d:	8d 50 04             	lea    0x4(%eax),%edx
   18710:	89 55 10             	mov    %edx,0x10(%ebp)
   18713:	8b 00                	mov    (%eax),%eax
   18715:	89 45 e8             	mov    %eax,-0x18(%ebp)
                    kernel_itoa(curr, num, 16);
   18718:	6a 10                	push   $0x10
   1871a:	ff 75 e8             	pushl  -0x18(%ebp)
   1871d:	ff 75 f8             	pushl  -0x8(%ebp)
   18720:	e8 f6 fd ff ff       	call   1851b <kernel_itoa>
   18725:	83 c4 0c             	add    $0xc,%esp
                    curr += kernel_strlen(curr);
   18728:	ff 75 f8             	pushl  -0x8(%ebp)
   1872b:	e8 44 fc ff ff       	call   18374 <kernel_strlen>
   18730:	83 c4 04             	add    $0x4,%esp
   18733:	01 45 f8             	add    %eax,-0x8(%ebp)
   18736:	eb 6d                	jmp    187a5 <kernel_vsprintf+0x127>
                } else if (ch == 'c') {
   18738:	80 7d ef 63          	cmpb   $0x63,-0x11(%ebp)
   1873c:	75 1f                	jne    1875d <kernel_vsprintf+0xdf>
                    char c = va_arg(args, int);
   1873e:	8b 45 10             	mov    0x10(%ebp),%eax
   18741:	8d 50 04             	lea    0x4(%eax),%edx
   18744:	89 55 10             	mov    %edx,0x10(%ebp)
   18747:	8b 00                	mov    (%eax),%eax
   18749:	88 45 ee             	mov    %al,-0x12(%ebp)
                    *curr++ = c;
   1874c:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1874f:	8d 50 01             	lea    0x1(%eax),%edx
   18752:	89 55 f8             	mov    %edx,-0x8(%ebp)
   18755:	0f b6 55 ee          	movzbl -0x12(%ebp),%edx
   18759:	88 10                	mov    %dl,(%eax)
   1875b:	eb 48                	jmp    187a5 <kernel_vsprintf+0x127>
                } else if (ch == 's') {
   1875d:	80 7d ef 73          	cmpb   $0x73,-0x11(%ebp)
   18761:	75 42                	jne    187a5 <kernel_vsprintf+0x127>
                    const char * str = va_arg(args, char *);
   18763:	8b 45 10             	mov    0x10(%ebp),%eax
   18766:	8d 50 04             	lea    0x4(%eax),%edx
   18769:	89 55 10             	mov    %edx,0x10(%ebp)
   1876c:	8b 00                	mov    (%eax),%eax
   1876e:	89 45 f4             	mov    %eax,-0xc(%ebp)
                    int len = kernel_strlen(str);
   18771:	ff 75 f4             	pushl  -0xc(%ebp)
   18774:	e8 fb fb ff ff       	call   18374 <kernel_strlen>
   18779:	83 c4 04             	add    $0x4,%esp
   1877c:	89 45 f0             	mov    %eax,-0x10(%ebp)
                    while (len--) {
   1877f:	eb 17                	jmp    18798 <kernel_vsprintf+0x11a>
                        *curr++ = *str++;
   18781:	8b 55 f4             	mov    -0xc(%ebp),%edx
   18784:	8d 42 01             	lea    0x1(%edx),%eax
   18787:	89 45 f4             	mov    %eax,-0xc(%ebp)
   1878a:	8b 45 f8             	mov    -0x8(%ebp),%eax
   1878d:	8d 48 01             	lea    0x1(%eax),%ecx
   18790:	89 4d f8             	mov    %ecx,-0x8(%ebp)
   18793:	0f b6 12             	movzbl (%edx),%edx
   18796:	88 10                	mov    %dl,(%eax)
                    while (len--) {
   18798:	8b 45 f0             	mov    -0x10(%ebp),%eax
   1879b:	8d 50 ff             	lea    -0x1(%eax),%edx
   1879e:	89 55 f0             	mov    %edx,-0x10(%ebp)
   187a1:	85 c0                	test   %eax,%eax
   187a3:	75 dc                	jne    18781 <kernel_vsprintf+0x103>
                    }
                }
                state = NORMAL;
   187a5:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)
                break;
   187ac:	90                   	nop
    while ((ch = *fmt++)) {
   187ad:	8b 45 0c             	mov    0xc(%ebp),%eax
   187b0:	8d 50 01             	lea    0x1(%eax),%edx
   187b3:	89 55 0c             	mov    %edx,0xc(%ebp)
   187b6:	0f b6 00             	movzbl (%eax),%eax
   187b9:	88 45 ef             	mov    %al,-0x11(%ebp)
   187bc:	80 7d ef 00          	cmpb   $0x0,-0x11(%ebp)
   187c0:	0f 85 d0 fe ff ff    	jne    18696 <kernel_vsprintf+0x18>
        }
    }
}
   187c6:	90                   	nop
   187c7:	c9                   	leave  
   187c8:	c3                   	ret    

000187c9 <panic>:

void panic (const char * file, int line, const char * func, const char * cond) {
   187c9:	55                   	push   %ebp
   187ca:	89 e5                	mov    %esp,%ebp
   187cc:	83 ec 08             	sub    $0x8,%esp
    log_printf("assert failed! %s", cond);
   187cf:	83 ec 08             	sub    $0x8,%esp
   187d2:	ff 75 14             	pushl  0x14(%ebp)
   187d5:	68 34 9e 01 00       	push   $0x19e34
   187da:	e8 47 02 00 00       	call   18a26 <log_printf>
   187df:	83 c4 10             	add    $0x10,%esp
    log_printf("file: %s\nline %d\nfunc: %s\n", file, line, func);
   187e2:	ff 75 10             	pushl  0x10(%ebp)
   187e5:	ff 75 0c             	pushl  0xc(%ebp)
   187e8:	ff 75 08             	pushl  0x8(%ebp)
   187eb:	68 46 9e 01 00       	push   $0x19e46
   187f0:	e8 31 02 00 00       	call   18a26 <log_printf>
   187f5:	83 c4 10             	add    $0x10,%esp

    for (;;) {
        hlt();
   187f8:	e8 46 fa ff ff       	call   18243 <hlt>
   187fd:	eb f9                	jmp    187f8 <panic+0x2f>

000187ff <list_is_empty>:
{
   187ff:	55                   	push   %ebp
   18800:	89 e5                	mov    %esp,%ebp
    return list->count == 0;
   18802:	8b 45 08             	mov    0x8(%ebp),%eax
   18805:	8b 40 08             	mov    0x8(%eax),%eax
   18808:	85 c0                	test   %eax,%eax
   1880a:	0f 94 c0             	sete   %al
   1880d:	0f b6 c0             	movzbl %al,%eax
}
   18810:	5d                   	pop    %ebp
   18811:	c3                   	ret    

00018812 <list_init>:
﻿#include "tools/list.h"


void list_init(list_t *list) {
   18812:	55                   	push   %ebp
   18813:	89 e5                	mov    %esp,%ebp
    list->first = list->last = (list_node_t *)0;
   18815:	8b 45 08             	mov    0x8(%ebp),%eax
   18818:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1881f:	8b 45 08             	mov    0x8(%ebp),%eax
   18822:	8b 50 04             	mov    0x4(%eax),%edx
   18825:	8b 45 08             	mov    0x8(%ebp),%eax
   18828:	89 10                	mov    %edx,(%eax)
    list->count = 0;
   1882a:	8b 45 08             	mov    0x8(%ebp),%eax
   1882d:	c7 40 08 00 00 00 00 	movl   $0x0,0x8(%eax)
}
   18834:	90                   	nop
   18835:	5d                   	pop    %ebp
   18836:	c3                   	ret    

00018837 <list_insert_first>:


void list_insert_first(list_t *list, list_node_t *node) {
   18837:	55                   	push   %ebp
   18838:	89 e5                	mov    %esp,%ebp
     
    node->next = list->first;
   1883a:	8b 45 08             	mov    0x8(%ebp),%eax
   1883d:	8b 10                	mov    (%eax),%edx
   1883f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18842:	89 50 04             	mov    %edx,0x4(%eax)
    node->pre = (list_node_t *)0;
   18845:	8b 45 0c             	mov    0xc(%ebp),%eax
   18848:	c7 00 00 00 00 00    	movl   $0x0,(%eax)

     
    if (list_is_empty(list)) {
   1884e:	ff 75 08             	pushl  0x8(%ebp)
   18851:	e8 a9 ff ff ff       	call   187ff <list_is_empty>
   18856:	83 c4 04             	add    $0x4,%esp
   18859:	85 c0                	test   %eax,%eax
   1885b:	74 15                	je     18872 <list_insert_first+0x3b>
        list->last = list->first = node;
   1885d:	8b 45 08             	mov    0x8(%ebp),%eax
   18860:	8b 55 0c             	mov    0xc(%ebp),%edx
   18863:	89 10                	mov    %edx,(%eax)
   18865:	8b 45 08             	mov    0x8(%ebp),%eax
   18868:	8b 10                	mov    (%eax),%edx
   1886a:	8b 45 08             	mov    0x8(%ebp),%eax
   1886d:	89 50 04             	mov    %edx,0x4(%eax)
   18870:	eb 12                	jmp    18884 <list_insert_first+0x4d>
    } else {
         
        list->first->pre = node;
   18872:	8b 45 08             	mov    0x8(%ebp),%eax
   18875:	8b 00                	mov    (%eax),%eax
   18877:	8b 55 0c             	mov    0xc(%ebp),%edx
   1887a:	89 10                	mov    %edx,(%eax)

         
        list->first = node;
   1887c:	8b 45 08             	mov    0x8(%ebp),%eax
   1887f:	8b 55 0c             	mov    0xc(%ebp),%edx
   18882:	89 10                	mov    %edx,(%eax)
    }

    list->count++;
   18884:	8b 45 08             	mov    0x8(%ebp),%eax
   18887:	8b 40 08             	mov    0x8(%eax),%eax
   1888a:	8d 50 01             	lea    0x1(%eax),%edx
   1888d:	8b 45 08             	mov    0x8(%ebp),%eax
   18890:	89 50 08             	mov    %edx,0x8(%eax)
}
   18893:	90                   	nop
   18894:	c9                   	leave  
   18895:	c3                   	ret    

00018896 <list_insert_last>:


void list_insert_last(list_t *list, list_node_t *node) {
   18896:	55                   	push   %ebp
   18897:	89 e5                	mov    %esp,%ebp
     
    node->pre = list->last;
   18899:	8b 45 08             	mov    0x8(%ebp),%eax
   1889c:	8b 50 04             	mov    0x4(%eax),%edx
   1889f:	8b 45 0c             	mov    0xc(%ebp),%eax
   188a2:	89 10                	mov    %edx,(%eax)
    node->next = (list_node_t*)0;
   188a4:	8b 45 0c             	mov    0xc(%ebp),%eax
   188a7:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)

     
    if (list_is_empty(list)) {
   188ae:	ff 75 08             	pushl  0x8(%ebp)
   188b1:	e8 49 ff ff ff       	call   187ff <list_is_empty>
   188b6:	83 c4 04             	add    $0x4,%esp
   188b9:	85 c0                	test   %eax,%eax
   188bb:	74 16                	je     188d3 <list_insert_last+0x3d>
        list->first = list->last = node;
   188bd:	8b 45 08             	mov    0x8(%ebp),%eax
   188c0:	8b 55 0c             	mov    0xc(%ebp),%edx
   188c3:	89 50 04             	mov    %edx,0x4(%eax)
   188c6:	8b 45 08             	mov    0x8(%ebp),%eax
   188c9:	8b 50 04             	mov    0x4(%eax),%edx
   188cc:	8b 45 08             	mov    0x8(%ebp),%eax
   188cf:	89 10                	mov    %edx,(%eax)
   188d1:	eb 15                	jmp    188e8 <list_insert_last+0x52>
    } else {
         
        list->last->next = node;
   188d3:	8b 45 08             	mov    0x8(%ebp),%eax
   188d6:	8b 40 04             	mov    0x4(%eax),%eax
   188d9:	8b 55 0c             	mov    0xc(%ebp),%edx
   188dc:	89 50 04             	mov    %edx,0x4(%eax)

         
        list->last = node;
   188df:	8b 45 08             	mov    0x8(%ebp),%eax
   188e2:	8b 55 0c             	mov    0xc(%ebp),%edx
   188e5:	89 50 04             	mov    %edx,0x4(%eax)
    }

    list->count++;
   188e8:	8b 45 08             	mov    0x8(%ebp),%eax
   188eb:	8b 40 08             	mov    0x8(%eax),%eax
   188ee:	8d 50 01             	lea    0x1(%eax),%edx
   188f1:	8b 45 08             	mov    0x8(%ebp),%eax
   188f4:	89 50 08             	mov    %edx,0x8(%eax)
}
   188f7:	90                   	nop
   188f8:	c9                   	leave  
   188f9:	c3                   	ret    

000188fa <list_remove_first>:


list_node_t* list_remove_first(list_t *list) {
   188fa:	55                   	push   %ebp
   188fb:	89 e5                	mov    %esp,%ebp
   188fd:	83 ec 10             	sub    $0x10,%esp
     
    if (list_is_empty(list)) {
   18900:	ff 75 08             	pushl  0x8(%ebp)
   18903:	e8 f7 fe ff ff       	call   187ff <list_is_empty>
   18908:	83 c4 04             	add    $0x4,%esp
   1890b:	85 c0                	test   %eax,%eax
   1890d:	74 07                	je     18916 <list_remove_first+0x1c>
        return (list_node_t*)0;
   1890f:	b8 00 00 00 00       	mov    $0x0,%eax
   18914:	eb 5a                	jmp    18970 <list_remove_first+0x76>
    }

     
    list_node_t * remove_node = list->first;
   18916:	8b 45 08             	mov    0x8(%ebp),%eax
   18919:	8b 00                	mov    (%eax),%eax
   1891b:	89 45 fc             	mov    %eax,-0x4(%ebp)

     
    list->first = remove_node->next;
   1891e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18921:	8b 50 04             	mov    0x4(%eax),%edx
   18924:	8b 45 08             	mov    0x8(%ebp),%eax
   18927:	89 10                	mov    %edx,(%eax)
    if (list->first == (list_node_t *)0) {
   18929:	8b 45 08             	mov    0x8(%ebp),%eax
   1892c:	8b 00                	mov    (%eax),%eax
   1892e:	85 c0                	test   %eax,%eax
   18930:	75 0c                	jne    1893e <list_remove_first+0x44>
         
        list->last = (list_node_t*)0;
   18932:	8b 45 08             	mov    0x8(%ebp),%eax
   18935:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   1893c:	eb 0c                	jmp    1894a <list_remove_first+0x50>
    } else {
         
        remove_node->next->pre = (list_node_t *)0;
   1893e:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18941:	8b 40 04             	mov    0x4(%eax),%eax
   18944:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
    }

     
    remove_node->next = remove_node->pre = (list_node_t*)0;
   1894a:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1894d:	c7 00 00 00 00 00    	movl   $0x0,(%eax)
   18953:	8b 45 fc             	mov    -0x4(%ebp),%eax
   18956:	8b 10                	mov    (%eax),%edx
   18958:	8b 45 fc             	mov    -0x4(%ebp),%eax
   1895b:	89 50 04             	mov    %edx,0x4(%eax)

     
    list->count--;
   1895e:	8b 45 08             	mov    0x8(%ebp),%eax
   18961:	8b 40 08             	mov    0x8(%eax),%eax
   18964:	8d 50 ff             	lea    -0x1(%eax),%edx
   18967:	8b 45 08             	mov    0x8(%ebp),%eax
   1896a:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   1896d:	8b 45 fc             	mov    -0x4(%ebp),%eax
}
   18970:	c9                   	leave  
   18971:	c3                   	ret    

00018972 <list_remove>:


list_node_t * list_remove(list_t *list, list_node_t *remove_node) {
   18972:	55                   	push   %ebp
   18973:	89 e5                	mov    %esp,%ebp
     
    if (remove_node == list->first) {
   18975:	8b 45 08             	mov    0x8(%ebp),%eax
   18978:	8b 00                	mov    (%eax),%eax
   1897a:	39 45 0c             	cmp    %eax,0xc(%ebp)
   1897d:	75 0b                	jne    1898a <list_remove+0x18>
        list->first = remove_node->next;
   1897f:	8b 45 0c             	mov    0xc(%ebp),%eax
   18982:	8b 50 04             	mov    0x4(%eax),%edx
   18985:	8b 45 08             	mov    0x8(%ebp),%eax
   18988:	89 10                	mov    %edx,(%eax)
    }

     
    if (remove_node == list->last) {
   1898a:	8b 45 08             	mov    0x8(%ebp),%eax
   1898d:	8b 40 04             	mov    0x4(%eax),%eax
   18990:	39 45 0c             	cmp    %eax,0xc(%ebp)
   18993:	75 0b                	jne    189a0 <list_remove+0x2e>
        list->last = remove_node->pre;
   18995:	8b 45 0c             	mov    0xc(%ebp),%eax
   18998:	8b 10                	mov    (%eax),%edx
   1899a:	8b 45 08             	mov    0x8(%ebp),%eax
   1899d:	89 50 04             	mov    %edx,0x4(%eax)
    }

     
    if (remove_node->pre) {
   189a0:	8b 45 0c             	mov    0xc(%ebp),%eax
   189a3:	8b 00                	mov    (%eax),%eax
   189a5:	85 c0                	test   %eax,%eax
   189a7:	74 0e                	je     189b7 <list_remove+0x45>
        remove_node->pre->next = remove_node->next;
   189a9:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ac:	8b 00                	mov    (%eax),%eax
   189ae:	8b 55 0c             	mov    0xc(%ebp),%edx
   189b1:	8b 52 04             	mov    0x4(%edx),%edx
   189b4:	89 50 04             	mov    %edx,0x4(%eax)
    }

     
    if (remove_node->next) {
   189b7:	8b 45 0c             	mov    0xc(%ebp),%eax
   189ba:	8b 40 04             	mov    0x4(%eax),%eax
   189bd:	85 c0                	test   %eax,%eax
   189bf:	74 0d                	je     189ce <list_remove+0x5c>
        remove_node->next->pre = remove_node->pre;
   189c1:	8b 45 0c             	mov    0xc(%ebp),%eax
   189c4:	8b 40 04             	mov    0x4(%eax),%eax
   189c7:	8b 55 0c             	mov    0xc(%ebp),%edx
   189ca:	8b 12                	mov    (%edx),%edx
   189cc:	89 10                	mov    %edx,(%eax)
    }

     
    remove_node->pre = remove_node->next = (list_node_t*)0;
   189ce:	8b 45 0c             	mov    0xc(%ebp),%eax
   189d1:	c7 40 04 00 00 00 00 	movl   $0x0,0x4(%eax)
   189d8:	8b 45 0c             	mov    0xc(%ebp),%eax
   189db:	8b 50 04             	mov    0x4(%eax),%edx
   189de:	8b 45 0c             	mov    0xc(%ebp),%eax
   189e1:	89 10                	mov    %edx,(%eax)
    --list->count;
   189e3:	8b 45 08             	mov    0x8(%ebp),%eax
   189e6:	8b 40 08             	mov    0x8(%eax),%eax
   189e9:	8d 50 ff             	lea    -0x1(%eax),%edx
   189ec:	8b 45 08             	mov    0x8(%ebp),%eax
   189ef:	89 50 08             	mov    %edx,0x8(%eax)
    return remove_node;
   189f2:	8b 45 0c             	mov    0xc(%ebp),%eax
}
   189f5:	5d                   	pop    %ebp
   189f6:	c3                   	ret    

000189f7 <log_init>:

static mutex_t mutex;
static int log_dev_id;

void log_init(void)
{
   189f7:	55                   	push   %ebp
   189f8:	89 e5                	mov    %esp,%ebp
   189fa:	83 ec 08             	sub    $0x8,%esp
    mutex_init(&mutex);
   189fd:	83 ec 0c             	sub    $0xc,%esp
   18a00:	68 a8 e0 05 00       	push   $0x5e0a8
   18a05:	e8 27 f3 ff ff       	call   17d31 <mutex_init>
   18a0a:	83 c4 10             	add    $0x10,%esp

    log_dev_id = dev_open(DEV_TTY, 0, 0);
   18a0d:	83 ec 04             	sub    $0x4,%esp
   18a10:	6a 00                	push   $0x0
   18a12:	6a 00                	push   $0x0
   18a14:	6a 01                	push   $0x1
   18a16:	e8 69 b4 ff ff       	call   13e84 <dev_open>
   18a1b:	83 c4 10             	add    $0x10,%esp
   18a1e:	a3 bc e0 05 00       	mov    %eax,0x5e0bc

    // If serial is not faulty set it in normal operation mode
    // (not-loopback with IRQs enabled and OUT#1 and OUT#2 bits enabled)
    outb(COM1_PORT + 4, 0x0F);
#endif
}
   18a23:	90                   	nop
   18a24:	c9                   	leave  
   18a25:	c3                   	ret    

00018a26 <log_printf>:

void log_printf(const char *fmt, ...)
{
   18a26:	55                   	push   %ebp
   18a27:	89 e5                	mov    %esp,%ebp
   18a29:	81 ec 98 00 00 00    	sub    $0x98,%esp
    char str_buf[128];
    va_list args;

    kernel_memset(str_buf, '\0', sizeof(str_buf));
   18a2f:	83 ec 04             	sub    $0x4,%esp
   18a32:	68 80 00 00 00       	push   $0x80
   18a37:	6a 00                	push   $0x0
   18a39:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a3f:	50                   	push   %eax
   18a40:	e8 37 fa ff ff       	call   1847c <kernel_memset>
   18a45:	83 c4 10             	add    $0x10,%esp

    va_start(args, fmt);
   18a48:	8d 45 0c             	lea    0xc(%ebp),%eax
   18a4b:	89 85 74 ff ff ff    	mov    %eax,-0x8c(%ebp)
    kernel_vsprintf(str_buf, fmt, args);
   18a51:	8b 85 74 ff ff ff    	mov    -0x8c(%ebp),%eax
   18a57:	83 ec 04             	sub    $0x4,%esp
   18a5a:	50                   	push   %eax
   18a5b:	ff 75 08             	pushl  0x8(%ebp)
   18a5e:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a64:	50                   	push   %eax
   18a65:	e8 14 fc ff ff       	call   1867e <kernel_vsprintf>
   18a6a:	83 c4 10             	add    $0x10,%esp
    va_end(args);

    mutex_lock(&mutex);
   18a6d:	83 ec 0c             	sub    $0xc,%esp
   18a70:	68 a8 e0 05 00       	push   $0x5e0a8
   18a75:	e8 e5 f2 ff ff       	call   17d5f <mutex_lock>
   18a7a:	83 c4 10             	add    $0x10,%esp

    outb(COM1_PORT, '\r');
    outb(COM1_PORT, '\n');
#else
    // console_write(0, str_buf, kernel_strlen(str_buf));
    dev_write(log_dev_id, 0, "log:", 4);
   18a7d:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18a82:	6a 04                	push   $0x4
   18a84:	68 84 9e 01 00       	push   $0x19e84
   18a89:	6a 00                	push   $0x0
   18a8b:	50                   	push   %eax
   18a8c:	e8 8b b5 ff ff       	call   1401c <dev_write>
   18a91:	83 c4 10             	add    $0x10,%esp
    dev_write(log_dev_id, 0, str_buf, kernel_strlen(str_buf));
   18a94:	83 ec 0c             	sub    $0xc,%esp
   18a97:	8d 85 78 ff ff ff    	lea    -0x88(%ebp),%eax
   18a9d:	50                   	push   %eax
   18a9e:	e8 d1 f8 ff ff       	call   18374 <kernel_strlen>
   18aa3:	83 c4 10             	add    $0x10,%esp
   18aa6:	89 c2                	mov    %eax,%edx
   18aa8:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18aad:	52                   	push   %edx
   18aae:	8d 95 78 ff ff ff    	lea    -0x88(%ebp),%edx
   18ab4:	52                   	push   %edx
   18ab5:	6a 00                	push   $0x0
   18ab7:	50                   	push   %eax
   18ab8:	e8 5f b5 ff ff       	call   1401c <dev_write>
   18abd:	83 c4 10             	add    $0x10,%esp

    char c = '\n';
   18ac0:	c6 85 73 ff ff ff 0a 	movb   $0xa,-0x8d(%ebp)
    // console_write(0, &c, 1);
    dev_write(log_dev_id, 0, &c, 1);
   18ac7:	a1 bc e0 05 00       	mov    0x5e0bc,%eax
   18acc:	6a 01                	push   $0x1
   18ace:	8d 95 73 ff ff ff    	lea    -0x8d(%ebp),%edx
   18ad4:	52                   	push   %edx
   18ad5:	6a 00                	push   $0x0
   18ad7:	50                   	push   %eax
   18ad8:	e8 3f b5 ff ff       	call   1401c <dev_write>
   18add:	83 c4 10             	add    $0x10,%esp

#endif
    mutex_unlock(&mutex);
   18ae0:	83 ec 0c             	sub    $0xc,%esp
   18ae3:	68 a8 e0 05 00       	push   $0x5e0a8
   18ae8:	e8 09 f3 ff ff       	call   17df6 <mutex_unlock>
   18aed:	83 c4 10             	add    $0x10,%esp
}
   18af0:	90                   	nop
   18af1:	c9                   	leave  
   18af2:	c3                   	ret    

Disassembly of section .first_task:

80000000 <first_task_entry>:
 	.text
 	.global first_task_entry
	.extern first_task_main
first_task_entry:
    mov %ss, %ax
80000000:	66 8c d0             	mov    %ss,%ax
    mov %ax, %ds
80000003:	8e d8                	mov    %eax,%ds
    mov %ax, %es
80000005:	8e c0                	mov    %eax,%es
    mov %ax, %fs
80000007:	8e e0                	mov    %eax,%fs
    mov %ax, %gs
80000009:	8e e8                	mov    %eax,%gs
    jmp first_task_main
8000000b:	e9 00 00 00 00       	jmp    80000010 <first_task_main>

80000010 <first_task_main>:

#include "applib/lib_syscall.h"
#include "dev/tty.h"

int first_task_main (void) {
80000010:	55                   	push   %ebp
80000011:	89 e5                	mov    %esp,%ebp
80000013:	83 ec 28             	sub    $0x28,%esp
        print_msg("task id = %d", pid);
        msleep(1000);
    }
#endif

    for (int i = 0; i < TTY_NR; i++) {
80000016:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)
8000001d:	e9 90 00 00 00       	jmp    800000b2 <first_task_main+0xa2>
        int pid = fork();
80000022:	e8 62 01 00 00       	call   80000189 <fork>
80000027:	89 45 f0             	mov    %eax,-0x10(%ebp)
        if (pid < 0) {
8000002a:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
8000002e:	79 14                	jns    80000044 <first_task_main+0x34>
            print_msg("create shell proc failed", 0);
80000030:	83 ec 08             	sub    $0x8,%esp
80000033:	6a 00                	push   $0x0
80000035:	68 89 9e 01 00       	push   $0x19e89
8000003a:	e8 23 01 00 00       	call   80000162 <print_msg>
8000003f:	83 c4 10             	add    $0x10,%esp
            break;
80000042:	eb 78                	jmp    800000bc <first_task_main+0xac>
        } else if (pid == 0) {
80000044:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)
80000048:	75 64                	jne    800000ae <first_task_main+0x9e>
            char tty_num[] = "/dev/tty?";
8000004a:	c7 45 e6 2f 64 65 76 	movl   $0x7665642f,-0x1a(%ebp)
80000051:	c7 45 ea 2f 74 74 79 	movl   $0x7974742f,-0x16(%ebp)
80000058:	66 c7 45 ee 3f 00    	movw   $0x3f,-0x12(%ebp)
            tty_num[sizeof(tty_num) - 2] = i + '0';
8000005e:	8b 45 f4             	mov    -0xc(%ebp),%eax
80000061:	83 c0 30             	add    $0x30,%eax
80000064:	88 45 ee             	mov    %al,-0x12(%ebp)
            char * argv[] = {tty_num, (char *)0};
80000067:	8d 45 e6             	lea    -0x1a(%ebp),%eax
8000006a:	89 45 dc             	mov    %eax,-0x24(%ebp)
8000006d:	c7 45 e0 00 00 00 00 	movl   $0x0,-0x20(%ebp)
            execve("shell.elf", argv, (char **)0);
80000074:	83 ec 04             	sub    $0x4,%esp
80000077:	6a 00                	push   $0x0
80000079:	8d 45 dc             	lea    -0x24(%ebp),%eax
8000007c:	50                   	push   %eax
8000007d:	68 a2 9e 01 00       	push   $0x19ea2
80000082:	e8 1d 01 00 00       	call   800001a4 <execve>
80000087:	83 c4 10             	add    $0x10,%esp
            print_msg("create shell proc failed", 0);
8000008a:	83 ec 08             	sub    $0x8,%esp
8000008d:	6a 00                	push   $0x0
8000008f:	68 89 9e 01 00       	push   $0x19e89
80000094:	e8 c9 00 00 00       	call   80000162 <print_msg>
80000099:	83 c4 10             	add    $0x10,%esp
            while (1) {
                msleep(10000);
8000009c:	83 ec 0c             	sub    $0xc,%esp
8000009f:	68 10 27 00 00       	push   $0x2710
800000a4:	e8 70 00 00 00       	call   80000119 <msleep>
800000a9:	83 c4 10             	add    $0x10,%esp
800000ac:	eb ee                	jmp    8000009c <first_task_main+0x8c>
    for (int i = 0; i < TTY_NR; i++) {
800000ae:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)
800000b2:	83 7d f4 07          	cmpl   $0x7,-0xc(%ebp)
800000b6:	0f 8e 66 ff ff ff    	jle    80000022 <first_task_main+0x12>
        }
    }

    while (1) {
        int status;
        wait(&status);
800000bc:	83 ec 0c             	sub    $0xc,%esp
800000bf:	8d 45 d8             	lea    -0x28(%ebp),%eax
800000c2:	50                   	push   %eax
800000c3:	e8 24 01 00 00       	call   800001ec <wait>
800000c8:	83 c4 10             	add    $0x10,%esp
    while (1) {
800000cb:	eb ef                	jmp    800000bc <first_task_main+0xac>

800000cd <sys_call>:
#include "os_cfg.h"
#include "applib/lib_syscall.h"
#include "malloc.h"


static inline int sys_call (syscall_args_t * args) {
800000cd:	55                   	push   %ebp
800000ce:	89 e5                	mov    %esp,%ebp
800000d0:	57                   	push   %edi
800000d1:	56                   	push   %esi
800000d2:	53                   	push   %ebx
800000d3:	83 ec 10             	sub    $0x10,%esp
    const unsigned long sys_gate_addr[] = {0, SELECTOR_SYSCALL | 0};   
800000d6:	c7 45 e8 00 00 00 00 	movl   $0x0,-0x18(%ebp)
800000dd:	c7 45 ec 18 00 00 00 	movl   $0x18,-0x14(%ebp)
            "push %[arg1]\n\t"
            "push %[arg0]\n\t"
            "push %[id]\n\t"
            "lcalll *(%[gate])\n\n"
            :"=a"(ret)
            :[arg3]"r"(args->arg3), [arg2]"r"(args->arg2), [arg1]"r"(args->arg1),
800000e4:	8b 45 08             	mov    0x8(%ebp),%eax
800000e7:	8b 40 10             	mov    0x10(%eax),%eax
800000ea:	8b 55 08             	mov    0x8(%ebp),%edx
800000ed:	8b 52 0c             	mov    0xc(%edx),%edx
800000f0:	8b 4d 08             	mov    0x8(%ebp),%ecx
800000f3:	8b 49 08             	mov    0x8(%ecx),%ecx
    [arg0]"r"(args->arg0), [id]"r"(args->id),
800000f6:	8b 5d 08             	mov    0x8(%ebp),%ebx
800000f9:	8b 5b 04             	mov    0x4(%ebx),%ebx
800000fc:	8b 75 08             	mov    0x8(%ebp),%esi
800000ff:	8b 36                	mov    (%esi),%esi
    __asm__ __volatile__(
80000101:	8d 7d e8             	lea    -0x18(%ebp),%edi
80000104:	50                   	push   %eax
80000105:	52                   	push   %edx
80000106:	51                   	push   %ecx
80000107:	53                   	push   %ebx
80000108:	56                   	push   %esi
80000109:	ff 1f                	lcall  *(%edi)
8000010b:	89 45 f0             	mov    %eax,-0x10(%ebp)
    [gate]"r"(sys_gate_addr));
    return ret;
8000010e:	8b 45 f0             	mov    -0x10(%ebp),%eax
}
80000111:	83 c4 10             	add    $0x10,%esp
80000114:	5b                   	pop    %ebx
80000115:	5e                   	pop    %esi
80000116:	5f                   	pop    %edi
80000117:	5d                   	pop    %ebp
80000118:	c3                   	ret    

80000119 <msleep>:

int msleep (int ms) {
80000119:	55                   	push   %ebp
8000011a:	89 e5                	mov    %esp,%ebp
8000011c:	83 ec 20             	sub    $0x20,%esp
    if (ms <= 0) {
8000011f:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)
80000123:	7f 07                	jg     8000012c <msleep+0x13>
        return 0;
80000125:	b8 00 00 00 00       	mov    $0x0,%eax
8000012a:	eb 19                	jmp    80000145 <msleep+0x2c>
    }

    syscall_args_t args;
    args.id = SYS_msleep;
8000012c:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)
    args.arg0 = ms;
80000133:	8b 45 08             	mov    0x8(%ebp),%eax
80000136:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000139:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000013c:	50                   	push   %eax
8000013d:	e8 8b ff ff ff       	call   800000cd <sys_call>
80000142:	83 c4 04             	add    $0x4,%esp
}
80000145:	c9                   	leave  
80000146:	c3                   	ret    

80000147 <getpid>:

int getpid() {
80000147:	55                   	push   %ebp
80000148:	89 e5                	mov    %esp,%ebp
8000014a:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_getpid;
8000014d:	c7 45 ec 01 00 00 00 	movl   $0x1,-0x14(%ebp)
    return sys_call(&args);
80000154:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000157:	50                   	push   %eax
80000158:	e8 70 ff ff ff       	call   800000cd <sys_call>
8000015d:	83 c4 04             	add    $0x4,%esp
}
80000160:	c9                   	leave  
80000161:	c3                   	ret    

80000162 <print_msg>:

int print_msg(char * fmt, int arg) {
80000162:	55                   	push   %ebp
80000163:	89 e5                	mov    %esp,%ebp
80000165:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_printmsg;
80000168:	c7 45 ec 64 00 00 00 	movl   $0x64,-0x14(%ebp)
    args.arg0 = (int)fmt;
8000016f:	8b 45 08             	mov    0x8(%ebp),%eax
80000172:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = arg;
80000175:	8b 45 0c             	mov    0xc(%ebp),%eax
80000178:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
8000017b:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000017e:	50                   	push   %eax
8000017f:	e8 49 ff ff ff       	call   800000cd <sys_call>
80000184:	83 c4 04             	add    $0x4,%esp
}
80000187:	c9                   	leave  
80000188:	c3                   	ret    

80000189 <fork>:

int fork() {
80000189:	55                   	push   %ebp
8000018a:	89 e5                	mov    %esp,%ebp
8000018c:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fork;
8000018f:	c7 45 ec 02 00 00 00 	movl   $0x2,-0x14(%ebp)
    return sys_call(&args);
80000196:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000199:	50                   	push   %eax
8000019a:	e8 2e ff ff ff       	call   800000cd <sys_call>
8000019f:	83 c4 04             	add    $0x4,%esp
}
800001a2:	c9                   	leave  
800001a3:	c3                   	ret    

800001a4 <execve>:

int execve(const char *name, char * const *argv, char * const *env) {
800001a4:	55                   	push   %ebp
800001a5:	89 e5                	mov    %esp,%ebp
800001a7:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_execve;
800001aa:	c7 45 ec 03 00 00 00 	movl   $0x3,-0x14(%ebp)
    args.arg0 = (int)name;
800001b1:	8b 45 08             	mov    0x8(%ebp),%eax
800001b4:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)argv;
800001b7:	8b 45 0c             	mov    0xc(%ebp),%eax
800001ba:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = (int)env;
800001bd:	8b 45 10             	mov    0x10(%ebp),%eax
800001c0:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800001c3:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001c6:	50                   	push   %eax
800001c7:	e8 01 ff ff ff       	call   800000cd <sys_call>
800001cc:	83 c4 04             	add    $0x4,%esp
}
800001cf:	c9                   	leave  
800001d0:	c3                   	ret    

800001d1 <yield>:

int yield (void) {
800001d1:	55                   	push   %ebp
800001d2:	89 e5                	mov    %esp,%ebp
800001d4:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_yield;
800001d7:	c7 45 ec 04 00 00 00 	movl   $0x4,-0x14(%ebp)
    return sys_call(&args);
800001de:	8d 45 ec             	lea    -0x14(%ebp),%eax
800001e1:	50                   	push   %eax
800001e2:	e8 e6 fe ff ff       	call   800000cd <sys_call>
800001e7:	83 c4 04             	add    $0x4,%esp
}
800001ea:	c9                   	leave  
800001eb:	c3                   	ret    

800001ec <wait>:

int wait(int* status) {
800001ec:	55                   	push   %ebp
800001ed:	89 e5                	mov    %esp,%ebp
800001ef:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_wait;
800001f2:	c7 45 ec 06 00 00 00 	movl   $0x6,-0x14(%ebp)
    args.arg0 = (int)status;
800001f9:	8b 45 08             	mov    0x8(%ebp),%eax
800001fc:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800001ff:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000202:	50                   	push   %eax
80000203:	e8 c5 fe ff ff       	call   800000cd <sys_call>
80000208:	83 c4 04             	add    $0x4,%esp
}
8000020b:	c9                   	leave  
8000020c:	c3                   	ret    

8000020d <_exit>:

void _exit(int status) {
8000020d:	55                   	push   %ebp
8000020e:	89 e5                	mov    %esp,%ebp
80000210:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_exit;
80000213:	c7 45 ec 05 00 00 00 	movl   $0x5,-0x14(%ebp)
    args.arg0 = (int)status;
8000021a:	8b 45 08             	mov    0x8(%ebp),%eax
8000021d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    sys_call(&args);
80000220:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000223:	50                   	push   %eax
80000224:	e8 a4 fe ff ff       	call   800000cd <sys_call>
80000229:	83 c4 04             	add    $0x4,%esp
    for (;;) {}
8000022c:	eb fe                	jmp    8000022c <_exit+0x1f>

8000022e <open>:
}

int open(const char *name, int flags, ...) {
8000022e:	55                   	push   %ebp
8000022f:	89 e5                	mov    %esp,%ebp
80000231:	83 ec 20             	sub    $0x20,%esp
     
    syscall_args_t args;
    args.id = SYS_open;
80000234:	c7 45 ec 32 00 00 00 	movl   $0x32,-0x14(%ebp)
    args.arg0 = (int)name;
8000023b:	8b 45 08             	mov    0x8(%ebp),%eax
8000023e:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)flags;
80000241:	8b 45 0c             	mov    0xc(%ebp),%eax
80000244:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000247:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000024a:	50                   	push   %eax
8000024b:	e8 7d fe ff ff       	call   800000cd <sys_call>
80000250:	83 c4 04             	add    $0x4,%esp
}
80000253:	c9                   	leave  
80000254:	c3                   	ret    

80000255 <read>:

int read(int file, char *ptr, int len) {
80000255:	55                   	push   %ebp
80000256:	89 e5                	mov    %esp,%ebp
80000258:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_read;
8000025b:	c7 45 ec 33 00 00 00 	movl   $0x33,-0x14(%ebp)
    args.arg0 = (int)file;
80000262:	8b 45 08             	mov    0x8(%ebp),%eax
80000265:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000268:	8b 45 0c             	mov    0xc(%ebp),%eax
8000026b:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000026e:	8b 45 10             	mov    0x10(%ebp),%eax
80000271:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
80000274:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000277:	50                   	push   %eax
80000278:	e8 50 fe ff ff       	call   800000cd <sys_call>
8000027d:	83 c4 04             	add    $0x4,%esp
}
80000280:	c9                   	leave  
80000281:	c3                   	ret    

80000282 <write>:

int write(int file, char *ptr, int len) {
80000282:	55                   	push   %ebp
80000283:	89 e5                	mov    %esp,%ebp
80000285:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_write;
80000288:	c7 45 ec 34 00 00 00 	movl   $0x34,-0x14(%ebp)
    args.arg0 = (int)file;
8000028f:	8b 45 08             	mov    0x8(%ebp),%eax
80000292:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
80000295:	8b 45 0c             	mov    0xc(%ebp),%eax
80000298:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = len;
8000029b:	8b 45 10             	mov    0x10(%ebp),%eax
8000029e:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002a1:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002a4:	50                   	push   %eax
800002a5:	e8 23 fe ff ff       	call   800000cd <sys_call>
800002aa:	83 c4 04             	add    $0x4,%esp
}
800002ad:	c9                   	leave  
800002ae:	c3                   	ret    

800002af <close>:

int close(int file) {
800002af:	55                   	push   %ebp
800002b0:	89 e5                	mov    %esp,%ebp
800002b2:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_close;
800002b5:	c7 45 ec 35 00 00 00 	movl   $0x35,-0x14(%ebp)
    args.arg0 = (int)file;
800002bc:	8b 45 08             	mov    0x8(%ebp),%eax
800002bf:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
800002c2:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002c5:	50                   	push   %eax
800002c6:	e8 02 fe ff ff       	call   800000cd <sys_call>
800002cb:	83 c4 04             	add    $0x4,%esp
}
800002ce:	c9                   	leave  
800002cf:	c3                   	ret    

800002d0 <lseek>:

int lseek(int file, int ptr, int dir) {
800002d0:	55                   	push   %ebp
800002d1:	89 e5                	mov    %esp,%ebp
800002d3:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_lseek;
800002d6:	c7 45 ec 36 00 00 00 	movl   $0x36,-0x14(%ebp)
    args.arg0 = (int)file;
800002dd:	8b 45 08             	mov    0x8(%ebp),%eax
800002e0:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)ptr;
800002e3:	8b 45 0c             	mov    0xc(%ebp),%eax
800002e6:	89 45 f4             	mov    %eax,-0xc(%ebp)
    args.arg2 = dir;
800002e9:	8b 45 10             	mov    0x10(%ebp),%eax
800002ec:	89 45 f8             	mov    %eax,-0x8(%ebp)
    return sys_call(&args);
800002ef:	8d 45 ec             	lea    -0x14(%ebp),%eax
800002f2:	50                   	push   %eax
800002f3:	e8 d5 fd ff ff       	call   800000cd <sys_call>
800002f8:	83 c4 04             	add    $0x4,%esp
}
800002fb:	c9                   	leave  
800002fc:	c3                   	ret    

800002fd <fstat>:


int fstat(int file, struct stat *st) {
800002fd:	55                   	push   %ebp
800002fe:	89 e5                	mov    %esp,%ebp
80000300:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_fstat;
80000303:	c7 45 ec 39 00 00 00 	movl   $0x39,-0x14(%ebp)
    args.arg0 = (int)file;
8000030a:	8b 45 08             	mov    0x8(%ebp),%eax
8000030d:	89 45 f0             	mov    %eax,-0x10(%ebp)
    args.arg1 = (int)st;
80000310:	8b 45 0c             	mov    0xc(%ebp),%eax
80000313:	89 45 f4             	mov    %eax,-0xc(%ebp)
    return sys_call(&args);
80000316:	8d 45 ec             	lea    -0x14(%ebp),%eax
80000319:	50                   	push   %eax
8000031a:	e8 ae fd ff ff       	call   800000cd <sys_call>
8000031f:	83 c4 04             	add    $0x4,%esp
}
80000322:	c9                   	leave  
80000323:	c3                   	ret    

80000324 <isatty>:


int isatty(int file) {
80000324:	55                   	push   %ebp
80000325:	89 e5                	mov    %esp,%ebp
80000327:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_isatty;
8000032a:	c7 45 ec 37 00 00 00 	movl   $0x37,-0x14(%ebp)
    args.arg0 = (int)file;
80000331:	8b 45 08             	mov    0x8(%ebp),%eax
80000334:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000337:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000033a:	50                   	push   %eax
8000033b:	e8 8d fd ff ff       	call   800000cd <sys_call>
80000340:	83 c4 04             	add    $0x4,%esp
}
80000343:	c9                   	leave  
80000344:	c3                   	ret    

80000345 <sbrk>:

void * sbrk(ptrdiff_t incr) {
80000345:	55                   	push   %ebp
80000346:	89 e5                	mov    %esp,%ebp
80000348:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_sbrk;
8000034b:	c7 45 ec 38 00 00 00 	movl   $0x38,-0x14(%ebp)
    args.arg0 = (int)incr;
80000352:	8b 45 08             	mov    0x8(%ebp),%eax
80000355:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return (void *)sys_call(&args);
80000358:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000035b:	50                   	push   %eax
8000035c:	e8 6c fd ff ff       	call   800000cd <sys_call>
80000361:	83 c4 04             	add    $0x4,%esp
}
80000364:	c9                   	leave  
80000365:	c3                   	ret    

80000366 <dup>:

int dup (int file) {
80000366:	55                   	push   %ebp
80000367:	89 e5                	mov    %esp,%ebp
80000369:	83 ec 20             	sub    $0x20,%esp
    syscall_args_t args;
    args.id = SYS_dup;
8000036c:	c7 45 ec 3a 00 00 00 	movl   $0x3a,-0x14(%ebp)
    args.arg0 = file;
80000373:	8b 45 08             	mov    0x8(%ebp),%eax
80000376:	89 45 f0             	mov    %eax,-0x10(%ebp)
    return sys_call(&args);
80000379:	8d 45 ec             	lea    -0x14(%ebp),%eax
8000037c:	50                   	push   %eax
8000037d:	e8 4b fd ff ff       	call   800000cd <sys_call>
80000382:	83 c4 04             	add    $0x4,%esp
}
80000385:	c9                   	leave  
80000386:	c3                   	ret    
